// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulaidl/core/identifier.proto

#include "nebulaidl/core/identifier.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_nebulaidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto;
namespace nebulaidl {
namespace core {
class IdentifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Identifier> _instance;
} _Identifier_default_instance_;
class WorkflowExecutionIdentifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowExecutionIdentifier> _instance;
} _WorkflowExecutionIdentifier_default_instance_;
class NodeExecutionIdentifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeExecutionIdentifier> _instance;
} _NodeExecutionIdentifier_default_instance_;
class TaskExecutionIdentifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionIdentifier> _instance;
} _TaskExecutionIdentifier_default_instance_;
class SignalIdentifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalIdentifier> _instance;
} _SignalIdentifier_default_instance_;
}  // namespace core
}  // namespace nebulaidl
static void InitDefaultsIdentifier_nebulaidl_2fcore_2fidentifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::core::_Identifier_default_instance_;
    new (ptr) ::nebulaidl::core::Identifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::core::Identifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_nebulaidl_2fcore_2fidentifier_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIdentifier_nebulaidl_2fcore_2fidentifier_2eproto}, {}};

static void InitDefaultsWorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_;
    new (ptr) ::nebulaidl::core::WorkflowExecutionIdentifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::core::WorkflowExecutionIdentifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto}, {}};

static void InitDefaultsNodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::core::_NodeExecutionIdentifier_default_instance_;
    new (ptr) ::nebulaidl::core::NodeExecutionIdentifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::core::NodeExecutionIdentifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsTaskExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::core::_TaskExecutionIdentifier_default_instance_;
    new (ptr) ::nebulaidl::core::TaskExecutionIdentifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::core::TaskExecutionIdentifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TaskExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTaskExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto}, {
      &scc_info_Identifier_nebulaidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_NodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsSignalIdentifier_nebulaidl_2fcore_2fidentifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::core::_SignalIdentifier_default_instance_;
    new (ptr) ::nebulaidl::core::SignalIdentifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::core::SignalIdentifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SignalIdentifier_nebulaidl_2fcore_2fidentifier_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignalIdentifier_nebulaidl_2fcore_2fidentifier_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base,}};

void InitDefaults_nebulaidl_2fcore_2fidentifier_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Identifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_nebulaidl_2fcore_2fidentifier_2eproto[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_nebulaidl_2fcore_2fidentifier_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_nebulaidl_2fcore_2fidentifier_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_nebulaidl_2fcore_2fidentifier_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::Identifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::Identifier, resource_type_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::Identifier, project_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::Identifier, domain_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::Identifier, name_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::Identifier, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::WorkflowExecutionIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::WorkflowExecutionIdentifier, project_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::WorkflowExecutionIdentifier, domain_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::WorkflowExecutionIdentifier, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::NodeExecutionIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::NodeExecutionIdentifier, node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::NodeExecutionIdentifier, execution_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::TaskExecutionIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::TaskExecutionIdentifier, task_id_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::TaskExecutionIdentifier, node_execution_id_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::TaskExecutionIdentifier, retry_attempt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::SignalIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::SignalIdentifier, signal_id_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::core::SignalIdentifier, execution_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nebulaidl::core::Identifier)},
  { 10, -1, sizeof(::nebulaidl::core::WorkflowExecutionIdentifier)},
  { 18, -1, sizeof(::nebulaidl::core::NodeExecutionIdentifier)},
  { 25, -1, sizeof(::nebulaidl::core::TaskExecutionIdentifier)},
  { 33, -1, sizeof(::nebulaidl::core::SignalIdentifier)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::core::_Identifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::core::_NodeExecutionIdentifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::core::_TaskExecutionIdentifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::core::_SignalIdentifier_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_nebulaidl_2fcore_2fidentifier_2eproto = {
  {}, AddDescriptors_nebulaidl_2fcore_2fidentifier_2eproto, "nebulaidl/core/identifier.proto", schemas,
  file_default_instances, TableStruct_nebulaidl_2fcore_2fidentifier_2eproto::offsets,
  file_level_metadata_nebulaidl_2fcore_2fidentifier_2eproto, 5, file_level_enum_descriptors_nebulaidl_2fcore_2fidentifier_2eproto, file_level_service_descriptors_nebulaidl_2fcore_2fidentifier_2eproto,
};

const char descriptor_table_protodef_nebulaidl_2fcore_2fidentifier_2eproto[] =
  "\n\037nebulaidl/core/identifier.proto\022\016nebul"
  "aidl.core\"\201\001\n\nIdentifier\0223\n\rresource_typ"
  "e\030\001 \001(\0162\034.nebulaidl.core.ResourceType\022\017\n"
  "\007project\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\014\n\004name\030\004"
  " \001(\t\022\017\n\007version\030\005 \001(\t\"L\n\033WorkflowExecuti"
  "onIdentifier\022\017\n\007project\030\001 \001(\t\022\016\n\006domain\030"
  "\002 \001(\t\022\014\n\004name\030\004 \001(\t\"m\n\027NodeExecutionIden"
  "tifier\022\017\n\007node_id\030\001 \001(\t\022A\n\014execution_id\030"
  "\002 \001(\0132+.nebulaidl.core.WorkflowExecution"
  "Identifier\"\241\001\n\027TaskExecutionIdentifier\022+"
  "\n\007task_id\030\001 \001(\0132\032.nebulaidl.core.Identif"
  "ier\022B\n\021node_execution_id\030\002 \001(\0132\'.nebulai"
  "dl.core.NodeExecutionIdentifier\022\025\n\rretry"
  "_attempt\030\003 \001(\r\"h\n\020SignalIdentifier\022\021\n\tsi"
  "gnal_id\030\001 \001(\t\022A\n\014execution_id\030\002 \001(\0132+.ne"
  "bulaidl.core.WorkflowExecutionIdentifier"
  "*U\n\014ResourceType\022\017\n\013UNSPECIFIED\020\000\022\010\n\004TAS"
  "K\020\001\022\014\n\010WORKFLOW\020\002\022\017\n\013LAUNCH_PLAN\020\003\022\013\n\007DA"
  "TASET\020\004B<Z:github.com/nebulaclouds/nebul"
  "aidl/gen/pb-go/nebulaidl/coreb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_nebulaidl_2fcore_2fidentifier_2eproto = {
  false, InitDefaults_nebulaidl_2fcore_2fidentifier_2eproto, 
  descriptor_table_protodef_nebulaidl_2fcore_2fidentifier_2eproto,
  "nebulaidl/core/identifier.proto", &assign_descriptors_table_nebulaidl_2fcore_2fidentifier_2eproto, 797,
};

void AddDescriptors_nebulaidl_2fcore_2fidentifier_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_nebulaidl_2fcore_2fidentifier_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nebulaidl_2fcore_2fidentifier_2eproto = []() { AddDescriptors_nebulaidl_2fcore_2fidentifier_2eproto(); return true; }();
namespace nebulaidl {
namespace core {
const ::google::protobuf::EnumDescriptor* ResourceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_nebulaidl_2fcore_2fidentifier_2eproto);
  return file_level_enum_descriptors_nebulaidl_2fcore_2fidentifier_2eproto[0];
}
bool ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Identifier::InitAsDefaultInstance() {
}
class Identifier::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Identifier::kResourceTypeFieldNumber;
const int Identifier::kProjectFieldNumber;
const int Identifier::kDomainFieldNumber;
const int Identifier::kNameFieldNumber;
const int Identifier::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Identifier::Identifier()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.core.Identifier)
}
Identifier::Identifier(const Identifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  resource_type_ = from.resource_type_;
  // @@protoc_insertion_point(copy_constructor:nebulaidl.core.Identifier)
}

void Identifier::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Identifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_type_ = 0;
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:nebulaidl.core.Identifier)
  SharedDtor();
}

void Identifier::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Identifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Identifier& Identifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Identifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  return *internal_default_instance();
}


void Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.core.Identifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Identifier::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Identifier*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.core.ResourceType resource_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_resource_type(static_cast<::nebulaidl::core::ResourceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string project = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.core.Identifier.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.core.Identifier.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.core.Identifier.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.core.Identifier.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Identifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.core.Identifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.core.ResourceType resource_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource_type(static_cast< ::nebulaidl::core::ResourceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.core.Identifier.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.core.Identifier.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.core.Identifier.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.core.Identifier.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.core.Identifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.core.Identifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Identifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.core.Identifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource_type(), output);
  }

  // string project = 2;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.Identifier.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->project(), output);
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.Identifier.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.Identifier.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.Identifier.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.core.Identifier)
}

::google::protobuf::uint8* Identifier::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.core.Identifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource_type(), target);
  }

  // string project = 2;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.Identifier.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->project(), target);
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.Identifier.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.Identifier.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.Identifier.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.core.Identifier)
  return target;
}

size_t Identifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.core.Identifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 2;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .nebulaidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.core.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  const Identifier* source =
      ::google::protobuf::DynamicCastToGenerated<Identifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.core.Identifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.core.Identifier)
    MergeFrom(*source);
  }
}

void Identifier::MergeFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.core.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.resource_type() != 0) {
    set_resource_type(from.resource_type());
  }
}

void Identifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.core.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identifier::CopyFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.core.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {
  return true;
}

void Identifier::Swap(Identifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Identifier::InternalSwap(Identifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resource_type_, other->resource_type_);
}

::google::protobuf::Metadata Identifier::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fcore_2fidentifier_2eproto);
  return ::file_level_metadata_nebulaidl_2fcore_2fidentifier_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowExecutionIdentifier::InitAsDefaultInstance() {
}
class WorkflowExecutionIdentifier::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowExecutionIdentifier::kProjectFieldNumber;
const int WorkflowExecutionIdentifier::kDomainFieldNumber;
const int WorkflowExecutionIdentifier::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowExecutionIdentifier::WorkflowExecutionIdentifier()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.core.WorkflowExecutionIdentifier)
}
WorkflowExecutionIdentifier::WorkflowExecutionIdentifier(const WorkflowExecutionIdentifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.core.WorkflowExecutionIdentifier)
}

void WorkflowExecutionIdentifier::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WorkflowExecutionIdentifier::~WorkflowExecutionIdentifier() {
  // @@protoc_insertion_point(destructor:nebulaidl.core.WorkflowExecutionIdentifier)
  SharedDtor();
}

void WorkflowExecutionIdentifier::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WorkflowExecutionIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowExecutionIdentifier& WorkflowExecutionIdentifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  return *internal_default_instance();
}


void WorkflowExecutionIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.core.WorkflowExecutionIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowExecutionIdentifier::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowExecutionIdentifier*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.core.WorkflowExecutionIdentifier.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.core.WorkflowExecutionIdentifier.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.core.WorkflowExecutionIdentifier.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowExecutionIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.core.WorkflowExecutionIdentifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.core.WorkflowExecutionIdentifier.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.core.WorkflowExecutionIdentifier.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.core.WorkflowExecutionIdentifier.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.core.WorkflowExecutionIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.core.WorkflowExecutionIdentifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowExecutionIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.core.WorkflowExecutionIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.WorkflowExecutionIdentifier.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.WorkflowExecutionIdentifier.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.WorkflowExecutionIdentifier.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.core.WorkflowExecutionIdentifier)
}

::google::protobuf::uint8* WorkflowExecutionIdentifier::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.core.WorkflowExecutionIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.WorkflowExecutionIdentifier.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.WorkflowExecutionIdentifier.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.WorkflowExecutionIdentifier.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.core.WorkflowExecutionIdentifier)
  return target;
}

size_t WorkflowExecutionIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.core.WorkflowExecutionIdentifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowExecutionIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.core.WorkflowExecutionIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowExecutionIdentifier* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowExecutionIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.core.WorkflowExecutionIdentifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.core.WorkflowExecutionIdentifier)
    MergeFrom(*source);
  }
}

void WorkflowExecutionIdentifier::MergeFrom(const WorkflowExecutionIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.core.WorkflowExecutionIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void WorkflowExecutionIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.core.WorkflowExecutionIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowExecutionIdentifier::CopyFrom(const WorkflowExecutionIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.core.WorkflowExecutionIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowExecutionIdentifier::IsInitialized() const {
  return true;
}

void WorkflowExecutionIdentifier::Swap(WorkflowExecutionIdentifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowExecutionIdentifier::InternalSwap(WorkflowExecutionIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata WorkflowExecutionIdentifier::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fcore_2fidentifier_2eproto);
  return ::file_level_metadata_nebulaidl_2fcore_2fidentifier_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeExecutionIdentifier::InitAsDefaultInstance() {
  ::nebulaidl::core::_NodeExecutionIdentifier_default_instance_._instance.get_mutable()->execution_id_ = const_cast< ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      ::nebulaidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class NodeExecutionIdentifier::HasBitSetters {
 public:
  static const ::nebulaidl::core::WorkflowExecutionIdentifier& execution_id(const NodeExecutionIdentifier* msg);
};

const ::nebulaidl::core::WorkflowExecutionIdentifier&
NodeExecutionIdentifier::HasBitSetters::execution_id(const NodeExecutionIdentifier* msg) {
  return *msg->execution_id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecutionIdentifier::kNodeIdFieldNumber;
const int NodeExecutionIdentifier::kExecutionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecutionIdentifier::NodeExecutionIdentifier()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.core.NodeExecutionIdentifier)
}
NodeExecutionIdentifier::NodeExecutionIdentifier(const NodeExecutionIdentifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.has_execution_id()) {
    execution_id_ = new ::nebulaidl::core::WorkflowExecutionIdentifier(*from.execution_id_);
  } else {
    execution_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.core.NodeExecutionIdentifier)
}

void NodeExecutionIdentifier::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  execution_id_ = nullptr;
}

NodeExecutionIdentifier::~NodeExecutionIdentifier() {
  // @@protoc_insertion_point(destructor:nebulaidl.core.NodeExecutionIdentifier)
  SharedDtor();
}

void NodeExecutionIdentifier::SharedDtor() {
  node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete execution_id_;
}

void NodeExecutionIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeExecutionIdentifier& NodeExecutionIdentifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  return *internal_default_instance();
}


void NodeExecutionIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.core.NodeExecutionIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && execution_id_ != nullptr) {
    delete execution_id_;
  }
  execution_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeExecutionIdentifier::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeExecutionIdentifier*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.core.NodeExecutionIdentifier.node_id");
        object = msg->mutable_node_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .nebulaidl.core.WorkflowExecutionIdentifier execution_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_execution_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeExecutionIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.core.NodeExecutionIdentifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.core.NodeExecutionIdentifier.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.core.WorkflowExecutionIdentifier execution_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.core.NodeExecutionIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.core.NodeExecutionIdentifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeExecutionIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.core.NodeExecutionIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.NodeExecutionIdentifier.node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // .nebulaidl.core.WorkflowExecutionIdentifier execution_id = 2;
  if (this->has_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::execution_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.core.NodeExecutionIdentifier)
}

::google::protobuf::uint8* NodeExecutionIdentifier::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.core.NodeExecutionIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.NodeExecutionIdentifier.node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // .nebulaidl.core.WorkflowExecutionIdentifier execution_id = 2;
  if (this->has_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::execution_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.core.NodeExecutionIdentifier)
  return target;
}

size_t NodeExecutionIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.core.NodeExecutionIdentifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // .nebulaidl.core.WorkflowExecutionIdentifier execution_id = 2;
  if (this->has_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *execution_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExecutionIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.core.NodeExecutionIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecutionIdentifier* source =
      ::google::protobuf::DynamicCastToGenerated<NodeExecutionIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.core.NodeExecutionIdentifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.core.NodeExecutionIdentifier)
    MergeFrom(*source);
  }
}

void NodeExecutionIdentifier::MergeFrom(const NodeExecutionIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.core.NodeExecutionIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.has_execution_id()) {
    mutable_execution_id()->::nebulaidl::core::WorkflowExecutionIdentifier::MergeFrom(from.execution_id());
  }
}

void NodeExecutionIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.core.NodeExecutionIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecutionIdentifier::CopyFrom(const NodeExecutionIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.core.NodeExecutionIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecutionIdentifier::IsInitialized() const {
  return true;
}

void NodeExecutionIdentifier::Swap(NodeExecutionIdentifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeExecutionIdentifier::InternalSwap(NodeExecutionIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(execution_id_, other->execution_id_);
}

::google::protobuf::Metadata NodeExecutionIdentifier::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fcore_2fidentifier_2eproto);
  return ::file_level_metadata_nebulaidl_2fcore_2fidentifier_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionIdentifier::InitAsDefaultInstance() {
  ::nebulaidl::core::_TaskExecutionIdentifier_default_instance_._instance.get_mutable()->task_id_ = const_cast< ::nebulaidl::core::Identifier*>(
      ::nebulaidl::core::Identifier::internal_default_instance());
  ::nebulaidl::core::_TaskExecutionIdentifier_default_instance_._instance.get_mutable()->node_execution_id_ = const_cast< ::nebulaidl::core::NodeExecutionIdentifier*>(
      ::nebulaidl::core::NodeExecutionIdentifier::internal_default_instance());
}
class TaskExecutionIdentifier::HasBitSetters {
 public:
  static const ::nebulaidl::core::Identifier& task_id(const TaskExecutionIdentifier* msg);
  static const ::nebulaidl::core::NodeExecutionIdentifier& node_execution_id(const TaskExecutionIdentifier* msg);
};

const ::nebulaidl::core::Identifier&
TaskExecutionIdentifier::HasBitSetters::task_id(const TaskExecutionIdentifier* msg) {
  return *msg->task_id_;
}
const ::nebulaidl::core::NodeExecutionIdentifier&
TaskExecutionIdentifier::HasBitSetters::node_execution_id(const TaskExecutionIdentifier* msg) {
  return *msg->node_execution_id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionIdentifier::kTaskIdFieldNumber;
const int TaskExecutionIdentifier::kNodeExecutionIdFieldNumber;
const int TaskExecutionIdentifier::kRetryAttemptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionIdentifier::TaskExecutionIdentifier()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.core.TaskExecutionIdentifier)
}
TaskExecutionIdentifier::TaskExecutionIdentifier(const TaskExecutionIdentifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task_id()) {
    task_id_ = new ::nebulaidl::core::Identifier(*from.task_id_);
  } else {
    task_id_ = nullptr;
  }
  if (from.has_node_execution_id()) {
    node_execution_id_ = new ::nebulaidl::core::NodeExecutionIdentifier(*from.node_execution_id_);
  } else {
    node_execution_id_ = nullptr;
  }
  retry_attempt_ = from.retry_attempt_;
  // @@protoc_insertion_point(copy_constructor:nebulaidl.core.TaskExecutionIdentifier)
}

void TaskExecutionIdentifier::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_attempt_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(retry_attempt_));
}

TaskExecutionIdentifier::~TaskExecutionIdentifier() {
  // @@protoc_insertion_point(destructor:nebulaidl.core.TaskExecutionIdentifier)
  SharedDtor();
}

void TaskExecutionIdentifier::SharedDtor() {
  if (this != internal_default_instance()) delete task_id_;
  if (this != internal_default_instance()) delete node_execution_id_;
}

void TaskExecutionIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskExecutionIdentifier& TaskExecutionIdentifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  return *internal_default_instance();
}


void TaskExecutionIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.core.TaskExecutionIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && node_execution_id_ != nullptr) {
    delete node_execution_id_;
  }
  node_execution_id_ = nullptr;
  retry_attempt_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskExecutionIdentifier::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskExecutionIdentifier*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.core.Identifier task_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::Identifier::_InternalParse;
        object = msg->mutable_task_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.core.NodeExecutionIdentifier node_execution_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::NodeExecutionIdentifier::_InternalParse;
        object = msg->mutable_node_execution_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 retry_attempt = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_retry_attempt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskExecutionIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.core.TaskExecutionIdentifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.core.Identifier task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.core.NodeExecutionIdentifier node_execution_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 retry_attempt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_attempt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.core.TaskExecutionIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.core.TaskExecutionIdentifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskExecutionIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.core.TaskExecutionIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.Identifier task_id = 1;
  if (this->has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::task_id(this), output);
  }

  // .nebulaidl.core.NodeExecutionIdentifier node_execution_id = 2;
  if (this->has_node_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::node_execution_id(this), output);
  }

  // uint32 retry_attempt = 3;
  if (this->retry_attempt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->retry_attempt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.core.TaskExecutionIdentifier)
}

::google::protobuf::uint8* TaskExecutionIdentifier::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.core.TaskExecutionIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.Identifier task_id = 1;
  if (this->has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::task_id(this), target);
  }

  // .nebulaidl.core.NodeExecutionIdentifier node_execution_id = 2;
  if (this->has_node_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::node_execution_id(this), target);
  }

  // uint32 retry_attempt = 3;
  if (this->retry_attempt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->retry_attempt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.core.TaskExecutionIdentifier)
  return target;
}

size_t TaskExecutionIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.core.TaskExecutionIdentifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulaidl.core.Identifier task_id = 1;
  if (this->has_task_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_id_);
  }

  // .nebulaidl.core.NodeExecutionIdentifier node_execution_id = 2;
  if (this->has_node_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_execution_id_);
  }

  // uint32 retry_attempt = 3;
  if (this->retry_attempt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->retry_attempt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskExecutionIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.core.TaskExecutionIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionIdentifier* source =
      ::google::protobuf::DynamicCastToGenerated<TaskExecutionIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.core.TaskExecutionIdentifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.core.TaskExecutionIdentifier)
    MergeFrom(*source);
  }
}

void TaskExecutionIdentifier::MergeFrom(const TaskExecutionIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.core.TaskExecutionIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_id()) {
    mutable_task_id()->::nebulaidl::core::Identifier::MergeFrom(from.task_id());
  }
  if (from.has_node_execution_id()) {
    mutable_node_execution_id()->::nebulaidl::core::NodeExecutionIdentifier::MergeFrom(from.node_execution_id());
  }
  if (from.retry_attempt() != 0) {
    set_retry_attempt(from.retry_attempt());
  }
}

void TaskExecutionIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.core.TaskExecutionIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionIdentifier::CopyFrom(const TaskExecutionIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.core.TaskExecutionIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionIdentifier::IsInitialized() const {
  return true;
}

void TaskExecutionIdentifier::Swap(TaskExecutionIdentifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionIdentifier::InternalSwap(TaskExecutionIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(task_id_, other->task_id_);
  swap(node_execution_id_, other->node_execution_id_);
  swap(retry_attempt_, other->retry_attempt_);
}

::google::protobuf::Metadata TaskExecutionIdentifier::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fcore_2fidentifier_2eproto);
  return ::file_level_metadata_nebulaidl_2fcore_2fidentifier_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignalIdentifier::InitAsDefaultInstance() {
  ::nebulaidl::core::_SignalIdentifier_default_instance_._instance.get_mutable()->execution_id_ = const_cast< ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      ::nebulaidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class SignalIdentifier::HasBitSetters {
 public:
  static const ::nebulaidl::core::WorkflowExecutionIdentifier& execution_id(const SignalIdentifier* msg);
};

const ::nebulaidl::core::WorkflowExecutionIdentifier&
SignalIdentifier::HasBitSetters::execution_id(const SignalIdentifier* msg) {
  return *msg->execution_id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalIdentifier::kSignalIdFieldNumber;
const int SignalIdentifier::kExecutionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalIdentifier::SignalIdentifier()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.core.SignalIdentifier)
}
SignalIdentifier::SignalIdentifier(const SignalIdentifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signal_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signal_id().size() > 0) {
    signal_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signal_id_);
  }
  if (from.has_execution_id()) {
    execution_id_ = new ::nebulaidl::core::WorkflowExecutionIdentifier(*from.execution_id_);
  } else {
    execution_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.core.SignalIdentifier)
}

void SignalIdentifier::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignalIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  signal_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  execution_id_ = nullptr;
}

SignalIdentifier::~SignalIdentifier() {
  // @@protoc_insertion_point(destructor:nebulaidl.core.SignalIdentifier)
  SharedDtor();
}

void SignalIdentifier::SharedDtor() {
  signal_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete execution_id_;
}

void SignalIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalIdentifier& SignalIdentifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignalIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base);
  return *internal_default_instance();
}


void SignalIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.core.SignalIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && execution_id_ != nullptr) {
    delete execution_id_;
  }
  execution_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignalIdentifier::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignalIdentifier*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string signal_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.core.SignalIdentifier.signal_id");
        object = msg->mutable_signal_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .nebulaidl.core.WorkflowExecutionIdentifier execution_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_execution_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignalIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.core.SignalIdentifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string signal_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signal_id().data(), static_cast<int>(this->signal_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.core.SignalIdentifier.signal_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.core.WorkflowExecutionIdentifier execution_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.core.SignalIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.core.SignalIdentifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignalIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.core.SignalIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal_id().data(), static_cast<int>(this->signal_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.SignalIdentifier.signal_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signal_id(), output);
  }

  // .nebulaidl.core.WorkflowExecutionIdentifier execution_id = 2;
  if (this->has_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::execution_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.core.SignalIdentifier)
}

::google::protobuf::uint8* SignalIdentifier::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.core.SignalIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal_id().data(), static_cast<int>(this->signal_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.core.SignalIdentifier.signal_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signal_id(), target);
  }

  // .nebulaidl.core.WorkflowExecutionIdentifier execution_id = 2;
  if (this->has_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::execution_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.core.SignalIdentifier)
  return target;
}

size_t SignalIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.core.SignalIdentifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signal_id());
  }

  // .nebulaidl.core.WorkflowExecutionIdentifier execution_id = 2;
  if (this->has_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *execution_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.core.SignalIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalIdentifier* source =
      ::google::protobuf::DynamicCastToGenerated<SignalIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.core.SignalIdentifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.core.SignalIdentifier)
    MergeFrom(*source);
  }
}

void SignalIdentifier::MergeFrom(const SignalIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.core.SignalIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signal_id().size() > 0) {

    signal_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signal_id_);
  }
  if (from.has_execution_id()) {
    mutable_execution_id()->::nebulaidl::core::WorkflowExecutionIdentifier::MergeFrom(from.execution_id());
  }
}

void SignalIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.core.SignalIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalIdentifier::CopyFrom(const SignalIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.core.SignalIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalIdentifier::IsInitialized() const {
  return true;
}

void SignalIdentifier::Swap(SignalIdentifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalIdentifier::InternalSwap(SignalIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signal_id_.Swap(&other->signal_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(execution_id_, other->execution_id_);
}

::google::protobuf::Metadata SignalIdentifier::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fcore_2fidentifier_2eproto);
  return ::file_level_metadata_nebulaidl_2fcore_2fidentifier_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace nebulaidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::nebulaidl::core::Identifier* Arena::CreateMaybeMessage< ::nebulaidl::core::Identifier >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::core::Identifier >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::core::WorkflowExecutionIdentifier* Arena::CreateMaybeMessage< ::nebulaidl::core::WorkflowExecutionIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::core::WorkflowExecutionIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::core::NodeExecutionIdentifier* Arena::CreateMaybeMessage< ::nebulaidl::core::NodeExecutionIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::core::NodeExecutionIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::core::TaskExecutionIdentifier* Arena::CreateMaybeMessage< ::nebulaidl::core::TaskExecutionIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::core::TaskExecutionIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::core::SignalIdentifier* Arena::CreateMaybeMessage< ::nebulaidl::core::SignalIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::core::SignalIdentifier >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
