// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulaidl/plugins/kubeflow/tensorflow.proto

#include "nebulaidl/plugins/kubeflow/tensorflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Resources_nebulaidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fplugins_2fkubeflow_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RunPolicy_nebulaidl_2fplugins_2fkubeflow_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DistributedTensorflowTrainingReplicaSpec_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto;
namespace nebulaidl {
namespace plugins {
namespace kubeflow {
class DistributedTensorflowTrainingTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistributedTensorflowTrainingTask> _instance;
} _DistributedTensorflowTrainingTask_default_instance_;
class DistributedTensorflowTrainingReplicaSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistributedTensorflowTrainingReplicaSpec> _instance;
} _DistributedTensorflowTrainingReplicaSpec_default_instance_;
}  // namespace kubeflow
}  // namespace plugins
}  // namespace nebulaidl
static void InitDefaultsDistributedTensorflowTrainingTask_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::plugins::kubeflow::_DistributedTensorflowTrainingTask_default_instance_;
    new (ptr) ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DistributedTensorflowTrainingTask_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDistributedTensorflowTrainingTask_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto}, {
      &scc_info_DistributedTensorflowTrainingReplicaSpec_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto.base,
      &scc_info_RunPolicy_nebulaidl_2fplugins_2fkubeflow_2fcommon_2eproto.base,}};

static void InitDefaultsDistributedTensorflowTrainingReplicaSpec_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::plugins::kubeflow::_DistributedTensorflowTrainingReplicaSpec_default_instance_;
    new (ptr) ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DistributedTensorflowTrainingReplicaSpec_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDistributedTensorflowTrainingReplicaSpec_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto}, {
      &scc_info_Resources_nebulaidl_2fcore_2ftasks_2eproto.base,}};

void InitDefaults_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_DistributedTensorflowTrainingTask_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DistributedTensorflowTrainingReplicaSpec_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingTask, worker_replicas_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingTask, ps_replicas_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingTask, chief_replicas_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingTask, run_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec, replicas_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec, image_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec, resources_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec, restart_policy_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingTask)},
  { 9, -1, sizeof(::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::plugins::kubeflow::_DistributedTensorflowTrainingTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::plugins::kubeflow::_DistributedTensorflowTrainingReplicaSpec_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto = {
  {}, AddDescriptors_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto, "nebulaidl/plugins/kubeflow/tensorflow.proto", schemas,
  file_default_instances, TableStruct_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto::offsets,
  file_level_metadata_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto, 2, file_level_enum_descriptors_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto, file_level_service_descriptors_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto,
};

const char descriptor_table_protodef_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto[] =
  "\n+nebulaidl/plugins/kubeflow/tensorflow."
  "proto\022\032nebulaidl.plugins.kubeflow\032\032nebul"
  "aidl/core/tasks.proto\032\'nebulaidl/plugins"
  "/kubeflow/common.proto\"\366\002\n!DistributedTe"
  "nsorflowTrainingTask\022]\n\017worker_replicas\030"
  "\001 \001(\0132D.nebulaidl.plugins.kubeflow.Distr"
  "ibutedTensorflowTrainingReplicaSpec\022Y\n\013p"
  "s_replicas\030\002 \001(\0132D.nebulaidl.plugins.kub"
  "eflow.DistributedTensorflowTrainingRepli"
  "caSpec\022\\\n\016chief_replicas\030\003 \001(\0132D.nebulai"
  "dl.plugins.kubeflow.DistributedTensorflo"
  "wTrainingReplicaSpec\0229\n\nrun_policy\030\004 \001(\013"
  "2%.nebulaidl.plugins.kubeflow.RunPolicy\""
  "\274\001\n(DistributedTensorflowTrainingReplica"
  "Spec\022\020\n\010replicas\030\001 \001(\005\022\r\n\005image\030\002 \001(\t\022,\n"
  "\tresources\030\003 \001(\0132\031.nebulaidl.core.Resour"
  "ces\022A\n\016restart_policy\030\004 \001(\0162).nebulaidl."
  "plugins.kubeflow.RestartPolicyB\?Z=github"
  ".com/nebulaclouds/nebulaidl/gen/pb-go/ne"
  "bulaidl/pluginsb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto = {
  false, InitDefaults_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto, 
  descriptor_table_protodef_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto,
  "nebulaidl/plugins/kubeflow/tensorflow.proto", &assign_descriptors_table_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto, 783,
};

void AddDescriptors_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_nebulaidl_2fcore_2ftasks_2eproto,
    ::AddDescriptors_nebulaidl_2fplugins_2fkubeflow_2fcommon_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto = []() { AddDescriptors_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto(); return true; }();
namespace nebulaidl {
namespace plugins {
namespace kubeflow {

// ===================================================================

void DistributedTensorflowTrainingTask::InitAsDefaultInstance() {
  ::nebulaidl::plugins::kubeflow::_DistributedTensorflowTrainingTask_default_instance_._instance.get_mutable()->worker_replicas_ = const_cast< ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec*>(
      ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec::internal_default_instance());
  ::nebulaidl::plugins::kubeflow::_DistributedTensorflowTrainingTask_default_instance_._instance.get_mutable()->ps_replicas_ = const_cast< ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec*>(
      ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec::internal_default_instance());
  ::nebulaidl::plugins::kubeflow::_DistributedTensorflowTrainingTask_default_instance_._instance.get_mutable()->chief_replicas_ = const_cast< ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec*>(
      ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec::internal_default_instance());
  ::nebulaidl::plugins::kubeflow::_DistributedTensorflowTrainingTask_default_instance_._instance.get_mutable()->run_policy_ = const_cast< ::nebulaidl::plugins::kubeflow::RunPolicy*>(
      ::nebulaidl::plugins::kubeflow::RunPolicy::internal_default_instance());
}
class DistributedTensorflowTrainingTask::HasBitSetters {
 public:
  static const ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec& worker_replicas(const DistributedTensorflowTrainingTask* msg);
  static const ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec& ps_replicas(const DistributedTensorflowTrainingTask* msg);
  static const ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec& chief_replicas(const DistributedTensorflowTrainingTask* msg);
  static const ::nebulaidl::plugins::kubeflow::RunPolicy& run_policy(const DistributedTensorflowTrainingTask* msg);
};

const ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec&
DistributedTensorflowTrainingTask::HasBitSetters::worker_replicas(const DistributedTensorflowTrainingTask* msg) {
  return *msg->worker_replicas_;
}
const ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec&
DistributedTensorflowTrainingTask::HasBitSetters::ps_replicas(const DistributedTensorflowTrainingTask* msg) {
  return *msg->ps_replicas_;
}
const ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec&
DistributedTensorflowTrainingTask::HasBitSetters::chief_replicas(const DistributedTensorflowTrainingTask* msg) {
  return *msg->chief_replicas_;
}
const ::nebulaidl::plugins::kubeflow::RunPolicy&
DistributedTensorflowTrainingTask::HasBitSetters::run_policy(const DistributedTensorflowTrainingTask* msg) {
  return *msg->run_policy_;
}
void DistributedTensorflowTrainingTask::clear_run_policy() {
  if (GetArenaNoVirtual() == nullptr && run_policy_ != nullptr) {
    delete run_policy_;
  }
  run_policy_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistributedTensorflowTrainingTask::kWorkerReplicasFieldNumber;
const int DistributedTensorflowTrainingTask::kPsReplicasFieldNumber;
const int DistributedTensorflowTrainingTask::kChiefReplicasFieldNumber;
const int DistributedTensorflowTrainingTask::kRunPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistributedTensorflowTrainingTask::DistributedTensorflowTrainingTask()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
}
DistributedTensorflowTrainingTask::DistributedTensorflowTrainingTask(const DistributedTensorflowTrainingTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_worker_replicas()) {
    worker_replicas_ = new ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec(*from.worker_replicas_);
  } else {
    worker_replicas_ = nullptr;
  }
  if (from.has_ps_replicas()) {
    ps_replicas_ = new ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec(*from.ps_replicas_);
  } else {
    ps_replicas_ = nullptr;
  }
  if (from.has_chief_replicas()) {
    chief_replicas_ = new ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec(*from.chief_replicas_);
  } else {
    chief_replicas_ = nullptr;
  }
  if (from.has_run_policy()) {
    run_policy_ = new ::nebulaidl::plugins::kubeflow::RunPolicy(*from.run_policy_);
  } else {
    run_policy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
}

void DistributedTensorflowTrainingTask::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DistributedTensorflowTrainingTask_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto.base);
  ::memset(&worker_replicas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&run_policy_) -
      reinterpret_cast<char*>(&worker_replicas_)) + sizeof(run_policy_));
}

DistributedTensorflowTrainingTask::~DistributedTensorflowTrainingTask() {
  // @@protoc_insertion_point(destructor:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  SharedDtor();
}

void DistributedTensorflowTrainingTask::SharedDtor() {
  if (this != internal_default_instance()) delete worker_replicas_;
  if (this != internal_default_instance()) delete ps_replicas_;
  if (this != internal_default_instance()) delete chief_replicas_;
  if (this != internal_default_instance()) delete run_policy_;
}

void DistributedTensorflowTrainingTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistributedTensorflowTrainingTask& DistributedTensorflowTrainingTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DistributedTensorflowTrainingTask_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto.base);
  return *internal_default_instance();
}


void DistributedTensorflowTrainingTask::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && worker_replicas_ != nullptr) {
    delete worker_replicas_;
  }
  worker_replicas_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ps_replicas_ != nullptr) {
    delete ps_replicas_;
  }
  ps_replicas_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && chief_replicas_ != nullptr) {
    delete chief_replicas_;
  }
  chief_replicas_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && run_policy_ != nullptr) {
    delete run_policy_;
  }
  run_policy_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DistributedTensorflowTrainingTask::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DistributedTensorflowTrainingTask*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec worker_replicas = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec::_InternalParse;
        object = msg->mutable_worker_replicas();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec ps_replicas = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec::_InternalParse;
        object = msg->mutable_ps_replicas();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec chief_replicas = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec::_InternalParse;
        object = msg->mutable_chief_replicas();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.plugins.kubeflow.RunPolicy run_policy = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::plugins::kubeflow::RunPolicy::_InternalParse;
        object = msg->mutable_run_policy();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DistributedTensorflowTrainingTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec worker_replicas = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_worker_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec ps_replicas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ps_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec chief_replicas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chief_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.plugins.kubeflow.RunPolicy run_policy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_run_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DistributedTensorflowTrainingTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec worker_replicas = 1;
  if (this->has_worker_replicas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::worker_replicas(this), output);
  }

  // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec ps_replicas = 2;
  if (this->has_ps_replicas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ps_replicas(this), output);
  }

  // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec chief_replicas = 3;
  if (this->has_chief_replicas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::chief_replicas(this), output);
  }

  // .nebulaidl.plugins.kubeflow.RunPolicy run_policy = 4;
  if (this->has_run_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::run_policy(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
}

::google::protobuf::uint8* DistributedTensorflowTrainingTask::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec worker_replicas = 1;
  if (this->has_worker_replicas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::worker_replicas(this), target);
  }

  // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec ps_replicas = 2;
  if (this->has_ps_replicas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ps_replicas(this), target);
  }

  // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec chief_replicas = 3;
  if (this->has_chief_replicas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::chief_replicas(this), target);
  }

  // .nebulaidl.plugins.kubeflow.RunPolicy run_policy = 4;
  if (this->has_run_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::run_policy(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  return target;
}

size_t DistributedTensorflowTrainingTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec worker_replicas = 1;
  if (this->has_worker_replicas()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *worker_replicas_);
  }

  // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec ps_replicas = 2;
  if (this->has_ps_replicas()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ps_replicas_);
  }

  // .nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec chief_replicas = 3;
  if (this->has_chief_replicas()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chief_replicas_);
  }

  // .nebulaidl.plugins.kubeflow.RunPolicy run_policy = 4;
  if (this->has_run_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *run_policy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistributedTensorflowTrainingTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  GOOGLE_DCHECK_NE(&from, this);
  const DistributedTensorflowTrainingTask* source =
      ::google::protobuf::DynamicCastToGenerated<DistributedTensorflowTrainingTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
    MergeFrom(*source);
  }
}

void DistributedTensorflowTrainingTask::MergeFrom(const DistributedTensorflowTrainingTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_worker_replicas()) {
    mutable_worker_replicas()->::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec::MergeFrom(from.worker_replicas());
  }
  if (from.has_ps_replicas()) {
    mutable_ps_replicas()->::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec::MergeFrom(from.ps_replicas());
  }
  if (from.has_chief_replicas()) {
    mutable_chief_replicas()->::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec::MergeFrom(from.chief_replicas());
  }
  if (from.has_run_policy()) {
    mutable_run_policy()->::nebulaidl::plugins::kubeflow::RunPolicy::MergeFrom(from.run_policy());
  }
}

void DistributedTensorflowTrainingTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistributedTensorflowTrainingTask::CopyFrom(const DistributedTensorflowTrainingTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributedTensorflowTrainingTask::IsInitialized() const {
  return true;
}

void DistributedTensorflowTrainingTask::Swap(DistributedTensorflowTrainingTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistributedTensorflowTrainingTask::InternalSwap(DistributedTensorflowTrainingTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(worker_replicas_, other->worker_replicas_);
  swap(ps_replicas_, other->ps_replicas_);
  swap(chief_replicas_, other->chief_replicas_);
  swap(run_policy_, other->run_policy_);
}

::google::protobuf::Metadata DistributedTensorflowTrainingTask::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto);
  return ::file_level_metadata_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DistributedTensorflowTrainingReplicaSpec::InitAsDefaultInstance() {
  ::nebulaidl::plugins::kubeflow::_DistributedTensorflowTrainingReplicaSpec_default_instance_._instance.get_mutable()->resources_ = const_cast< ::nebulaidl::core::Resources*>(
      ::nebulaidl::core::Resources::internal_default_instance());
}
class DistributedTensorflowTrainingReplicaSpec::HasBitSetters {
 public:
  static const ::nebulaidl::core::Resources& resources(const DistributedTensorflowTrainingReplicaSpec* msg);
};

const ::nebulaidl::core::Resources&
DistributedTensorflowTrainingReplicaSpec::HasBitSetters::resources(const DistributedTensorflowTrainingReplicaSpec* msg) {
  return *msg->resources_;
}
void DistributedTensorflowTrainingReplicaSpec::clear_resources() {
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistributedTensorflowTrainingReplicaSpec::kReplicasFieldNumber;
const int DistributedTensorflowTrainingReplicaSpec::kImageFieldNumber;
const int DistributedTensorflowTrainingReplicaSpec::kResourcesFieldNumber;
const int DistributedTensorflowTrainingReplicaSpec::kRestartPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistributedTensorflowTrainingReplicaSpec::DistributedTensorflowTrainingReplicaSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
}
DistributedTensorflowTrainingReplicaSpec::DistributedTensorflowTrainingReplicaSpec(const DistributedTensorflowTrainingReplicaSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    resources_ = new ::nebulaidl::core::Resources(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  ::memcpy(&replicas_, &from.replicas_,
    static_cast<size_t>(reinterpret_cast<char*>(&restart_policy_) -
    reinterpret_cast<char*>(&replicas_)) + sizeof(restart_policy_));
  // @@protoc_insertion_point(copy_constructor:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
}

void DistributedTensorflowTrainingReplicaSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DistributedTensorflowTrainingReplicaSpec_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto.base);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_policy_) -
      reinterpret_cast<char*>(&resources_)) + sizeof(restart_policy_));
}

DistributedTensorflowTrainingReplicaSpec::~DistributedTensorflowTrainingReplicaSpec() {
  // @@protoc_insertion_point(destructor:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  SharedDtor();
}

void DistributedTensorflowTrainingReplicaSpec::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resources_;
}

void DistributedTensorflowTrainingReplicaSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistributedTensorflowTrainingReplicaSpec& DistributedTensorflowTrainingReplicaSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DistributedTensorflowTrainingReplicaSpec_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto.base);
  return *internal_default_instance();
}


void DistributedTensorflowTrainingReplicaSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  ::memset(&replicas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_policy_) -
      reinterpret_cast<char*>(&replicas_)) + sizeof(restart_policy_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DistributedTensorflowTrainingReplicaSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DistributedTensorflowTrainingReplicaSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 replicas = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_replicas(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string image = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .nebulaidl.core.Resources resources = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::Resources::_InternalParse;
        object = msg->mutable_resources();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.plugins.kubeflow.RestartPolicy restart_policy = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_restart_policy(static_cast<::nebulaidl::plugins::kubeflow::RestartPolicy>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DistributedTensorflowTrainingReplicaSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 replicas = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.core.Resources resources = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.plugins.kubeflow.RestartPolicy restart_policy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_restart_policy(static_cast< ::nebulaidl::plugins::kubeflow::RestartPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DistributedTensorflowTrainingReplicaSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 replicas = 1;
  if (this->replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->replicas(), output);
  }

  // string image = 2;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image(), output);
  }

  // .nebulaidl.core.Resources resources = 3;
  if (this->has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::resources(this), output);
  }

  // .nebulaidl.plugins.kubeflow.RestartPolicy restart_policy = 4;
  if (this->restart_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->restart_policy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
}

::google::protobuf::uint8* DistributedTensorflowTrainingReplicaSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 replicas = 1;
  if (this->replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->replicas(), target);
  }

  // string image = 2;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image(), target);
  }

  // .nebulaidl.core.Resources resources = 3;
  if (this->has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::resources(this), target);
  }

  // .nebulaidl.plugins.kubeflow.RestartPolicy restart_policy = 4;
  if (this->restart_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->restart_policy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  return target;
}

size_t DistributedTensorflowTrainingReplicaSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image = 2;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // .nebulaidl.core.Resources resources = 3;
  if (this->has_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // int32 replicas = 1;
  if (this->replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replicas());
  }

  // .nebulaidl.plugins.kubeflow.RestartPolicy restart_policy = 4;
  if (this->restart_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->restart_policy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistributedTensorflowTrainingReplicaSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const DistributedTensorflowTrainingReplicaSpec* source =
      ::google::protobuf::DynamicCastToGenerated<DistributedTensorflowTrainingReplicaSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
    MergeFrom(*source);
  }
}

void DistributedTensorflowTrainingReplicaSpec::MergeFrom(const DistributedTensorflowTrainingReplicaSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    mutable_resources()->::nebulaidl::core::Resources::MergeFrom(from.resources());
  }
  if (from.replicas() != 0) {
    set_replicas(from.replicas());
  }
  if (from.restart_policy() != 0) {
    set_restart_policy(from.restart_policy());
  }
}

void DistributedTensorflowTrainingReplicaSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistributedTensorflowTrainingReplicaSpec::CopyFrom(const DistributedTensorflowTrainingReplicaSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributedTensorflowTrainingReplicaSpec::IsInitialized() const {
  return true;
}

void DistributedTensorflowTrainingReplicaSpec::Swap(DistributedTensorflowTrainingReplicaSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistributedTensorflowTrainingReplicaSpec::InternalSwap(DistributedTensorflowTrainingReplicaSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resources_, other->resources_);
  swap(replicas_, other->replicas_);
  swap(restart_policy_, other->restart_policy_);
}

::google::protobuf::Metadata DistributedTensorflowTrainingReplicaSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto);
  return ::file_level_metadata_nebulaidl_2fplugins_2fkubeflow_2ftensorflow_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace kubeflow
}  // namespace plugins
}  // namespace nebulaidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingTask* Arena::CreateMaybeMessage< ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingTask >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingTask >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec* Arena::CreateMaybeMessage< ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::plugins::kubeflow::DistributedTensorflowTrainingReplicaSpec >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
