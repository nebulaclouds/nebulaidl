// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulaidl/plugins/qubole.proto

#include "nebulaidl/plugins/qubole.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fplugins_2fqubole_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HiveQuery_nebulaidl_2fplugins_2fqubole_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fplugins_2fqubole_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HiveQueryCollection_nebulaidl_2fplugins_2fqubole_2eproto;
namespace nebulaidl {
namespace plugins {
class HiveQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HiveQuery> _instance;
} _HiveQuery_default_instance_;
class HiveQueryCollectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HiveQueryCollection> _instance;
} _HiveQueryCollection_default_instance_;
class QuboleHiveJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuboleHiveJob> _instance;
} _QuboleHiveJob_default_instance_;
}  // namespace plugins
}  // namespace nebulaidl
static void InitDefaultsHiveQuery_nebulaidl_2fplugins_2fqubole_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::plugins::_HiveQuery_default_instance_;
    new (ptr) ::nebulaidl::plugins::HiveQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::plugins::HiveQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HiveQuery_nebulaidl_2fplugins_2fqubole_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHiveQuery_nebulaidl_2fplugins_2fqubole_2eproto}, {}};

static void InitDefaultsHiveQueryCollection_nebulaidl_2fplugins_2fqubole_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::plugins::_HiveQueryCollection_default_instance_;
    new (ptr) ::nebulaidl::plugins::HiveQueryCollection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::plugins::HiveQueryCollection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HiveQueryCollection_nebulaidl_2fplugins_2fqubole_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHiveQueryCollection_nebulaidl_2fplugins_2fqubole_2eproto}, {
      &scc_info_HiveQuery_nebulaidl_2fplugins_2fqubole_2eproto.base,}};

static void InitDefaultsQuboleHiveJob_nebulaidl_2fplugins_2fqubole_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::plugins::_QuboleHiveJob_default_instance_;
    new (ptr) ::nebulaidl::plugins::QuboleHiveJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::plugins::QuboleHiveJob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_QuboleHiveJob_nebulaidl_2fplugins_2fqubole_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsQuboleHiveJob_nebulaidl_2fplugins_2fqubole_2eproto}, {
      &scc_info_HiveQueryCollection_nebulaidl_2fplugins_2fqubole_2eproto.base,
      &scc_info_HiveQuery_nebulaidl_2fplugins_2fqubole_2eproto.base,}};

void InitDefaults_nebulaidl_2fplugins_2fqubole_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_HiveQuery_nebulaidl_2fplugins_2fqubole_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HiveQueryCollection_nebulaidl_2fplugins_2fqubole_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QuboleHiveJob_nebulaidl_2fplugins_2fqubole_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_nebulaidl_2fplugins_2fqubole_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_nebulaidl_2fplugins_2fqubole_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_nebulaidl_2fplugins_2fqubole_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_nebulaidl_2fplugins_2fqubole_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::HiveQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::HiveQuery, query_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::HiveQuery, timeout_sec_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::HiveQuery, retrycount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::HiveQueryCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::HiveQueryCollection, queries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::QuboleHiveJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::QuboleHiveJob, cluster_label_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::QuboleHiveJob, query_collection_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::QuboleHiveJob, tags_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::plugins::QuboleHiveJob, query_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nebulaidl::plugins::HiveQuery)},
  { 8, -1, sizeof(::nebulaidl::plugins::HiveQueryCollection)},
  { 14, -1, sizeof(::nebulaidl::plugins::QuboleHiveJob)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::plugins::_HiveQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::plugins::_HiveQueryCollection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::plugins::_QuboleHiveJob_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_nebulaidl_2fplugins_2fqubole_2eproto = {
  {}, AddDescriptors_nebulaidl_2fplugins_2fqubole_2eproto, "nebulaidl/plugins/qubole.proto", schemas,
  file_default_instances, TableStruct_nebulaidl_2fplugins_2fqubole_2eproto::offsets,
  file_level_metadata_nebulaidl_2fplugins_2fqubole_2eproto, 3, file_level_enum_descriptors_nebulaidl_2fplugins_2fqubole_2eproto, file_level_service_descriptors_nebulaidl_2fplugins_2fqubole_2eproto,
};

const char descriptor_table_protodef_nebulaidl_2fplugins_2fqubole_2eproto[] =
  "\n\036nebulaidl/plugins/qubole.proto\022\021nebula"
  "idl.plugins\"C\n\tHiveQuery\022\r\n\005query\030\001 \001(\t\022"
  "\023\n\013timeout_sec\030\002 \001(\r\022\022\n\nretryCount\030\003 \001(\r"
  "\"D\n\023HiveQueryCollection\022-\n\007queries\030\002 \003(\013"
  "2\034.nebulaidl.plugins.HiveQuery\"\247\001\n\rQubol"
  "eHiveJob\022\025\n\rcluster_label\030\001 \001(\t\022D\n\020query"
  "_collection\030\002 \001(\0132&.nebulaidl.plugins.Hi"
  "veQueryCollectionB\002\030\001\022\014\n\004tags\030\003 \003(\t\022+\n\005q"
  "uery\030\004 \001(\0132\034.nebulaidl.plugins.HiveQuery"
  "B\?Z=github.com/nebulaclouds/nebulaidl/ge"
  "n/pb-go/nebulaidl/pluginsb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_nebulaidl_2fplugins_2fqubole_2eproto = {
  false, InitDefaults_nebulaidl_2fplugins_2fqubole_2eproto, 
  descriptor_table_protodef_nebulaidl_2fplugins_2fqubole_2eproto,
  "nebulaidl/plugins/qubole.proto", &assign_descriptors_table_nebulaidl_2fplugins_2fqubole_2eproto, 433,
};

void AddDescriptors_nebulaidl_2fplugins_2fqubole_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_nebulaidl_2fplugins_2fqubole_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nebulaidl_2fplugins_2fqubole_2eproto = []() { AddDescriptors_nebulaidl_2fplugins_2fqubole_2eproto(); return true; }();
namespace nebulaidl {
namespace plugins {

// ===================================================================

void HiveQuery::InitAsDefaultInstance() {
}
class HiveQuery::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HiveQuery::kQueryFieldNumber;
const int HiveQuery::kTimeoutSecFieldNumber;
const int HiveQuery::kRetryCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HiveQuery::HiveQuery()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.plugins.HiveQuery)
}
HiveQuery::HiveQuery(const HiveQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  ::memcpy(&timeout_sec_, &from.timeout_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&retrycount_) -
    reinterpret_cast<char*>(&timeout_sec_)) + sizeof(retrycount_));
  // @@protoc_insertion_point(copy_constructor:nebulaidl.plugins.HiveQuery)
}

void HiveQuery::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HiveQuery_nebulaidl_2fplugins_2fqubole_2eproto.base);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retrycount_) -
      reinterpret_cast<char*>(&timeout_sec_)) + sizeof(retrycount_));
}

HiveQuery::~HiveQuery() {
  // @@protoc_insertion_point(destructor:nebulaidl.plugins.HiveQuery)
  SharedDtor();
}

void HiveQuery::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HiveQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HiveQuery& HiveQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HiveQuery_nebulaidl_2fplugins_2fqubole_2eproto.base);
  return *internal_default_instance();
}


void HiveQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.plugins.HiveQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retrycount_) -
      reinterpret_cast<char*>(&timeout_sec_)) + sizeof(retrycount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HiveQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HiveQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.plugins.HiveQuery.query");
        object = msg->mutable_query();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 timeout_sec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timeout_sec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 retryCount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_retrycount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HiveQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.plugins.HiveQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.plugins.HiveQuery.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeout_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 retryCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retrycount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.plugins.HiveQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.plugins.HiveQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HiveQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.plugins.HiveQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.plugins.HiveQuery.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // uint32 timeout_sec = 2;
  if (this->timeout_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout_sec(), output);
  }

  // uint32 retryCount = 3;
  if (this->retrycount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->retrycount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.plugins.HiveQuery)
}

::google::protobuf::uint8* HiveQuery::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.plugins.HiveQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.plugins.HiveQuery.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // uint32 timeout_sec = 2;
  if (this->timeout_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout_sec(), target);
  }

  // uint32 retryCount = 3;
  if (this->retrycount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->retrycount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.plugins.HiveQuery)
  return target;
}

size_t HiveQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.plugins.HiveQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // uint32 timeout_sec = 2;
  if (this->timeout_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout_sec());
  }

  // uint32 retryCount = 3;
  if (this->retrycount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->retrycount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HiveQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.plugins.HiveQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const HiveQuery* source =
      ::google::protobuf::DynamicCastToGenerated<HiveQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.plugins.HiveQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.plugins.HiveQuery)
    MergeFrom(*source);
  }
}

void HiveQuery::MergeFrom(const HiveQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.plugins.HiveQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.timeout_sec() != 0) {
    set_timeout_sec(from.timeout_sec());
  }
  if (from.retrycount() != 0) {
    set_retrycount(from.retrycount());
  }
}

void HiveQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.plugins.HiveQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HiveQuery::CopyFrom(const HiveQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.plugins.HiveQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiveQuery::IsInitialized() const {
  return true;
}

void HiveQuery::Swap(HiveQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HiveQuery::InternalSwap(HiveQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timeout_sec_, other->timeout_sec_);
  swap(retrycount_, other->retrycount_);
}

::google::protobuf::Metadata HiveQuery::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fplugins_2fqubole_2eproto);
  return ::file_level_metadata_nebulaidl_2fplugins_2fqubole_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HiveQueryCollection::InitAsDefaultInstance() {
}
class HiveQueryCollection::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HiveQueryCollection::kQueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HiveQueryCollection::HiveQueryCollection()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.plugins.HiveQueryCollection)
}
HiveQueryCollection::HiveQueryCollection(const HiveQueryCollection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      queries_(from.queries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulaidl.plugins.HiveQueryCollection)
}

void HiveQueryCollection::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HiveQueryCollection_nebulaidl_2fplugins_2fqubole_2eproto.base);
}

HiveQueryCollection::~HiveQueryCollection() {
  // @@protoc_insertion_point(destructor:nebulaidl.plugins.HiveQueryCollection)
  SharedDtor();
}

void HiveQueryCollection::SharedDtor() {
}

void HiveQueryCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HiveQueryCollection& HiveQueryCollection::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HiveQueryCollection_nebulaidl_2fplugins_2fqubole_2eproto.base);
  return *internal_default_instance();
}


void HiveQueryCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.plugins.HiveQueryCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HiveQueryCollection::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HiveQueryCollection*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .nebulaidl.plugins.HiveQuery queries = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::nebulaidl::plugins::HiveQuery::_InternalParse;
          object = msg->add_queries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HiveQueryCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.plugins.HiveQueryCollection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nebulaidl.plugins.HiveQuery queries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_queries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.plugins.HiveQueryCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.plugins.HiveQueryCollection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HiveQueryCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.plugins.HiveQueryCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulaidl.plugins.HiveQuery queries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->queries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.plugins.HiveQueryCollection)
}

::google::protobuf::uint8* HiveQueryCollection::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.plugins.HiveQueryCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulaidl.plugins.HiveQuery queries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->queries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.plugins.HiveQueryCollection)
  return target;
}

size_t HiveQueryCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.plugins.HiveQueryCollection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulaidl.plugins.HiveQuery queries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->queries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->queries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HiveQueryCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.plugins.HiveQueryCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const HiveQueryCollection* source =
      ::google::protobuf::DynamicCastToGenerated<HiveQueryCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.plugins.HiveQueryCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.plugins.HiveQueryCollection)
    MergeFrom(*source);
  }
}

void HiveQueryCollection::MergeFrom(const HiveQueryCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.plugins.HiveQueryCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
}

void HiveQueryCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.plugins.HiveQueryCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HiveQueryCollection::CopyFrom(const HiveQueryCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.plugins.HiveQueryCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiveQueryCollection::IsInitialized() const {
  return true;
}

void HiveQueryCollection::Swap(HiveQueryCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HiveQueryCollection::InternalSwap(HiveQueryCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&queries_)->InternalSwap(CastToBase(&other->queries_));
}

::google::protobuf::Metadata HiveQueryCollection::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fplugins_2fqubole_2eproto);
  return ::file_level_metadata_nebulaidl_2fplugins_2fqubole_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QuboleHiveJob::InitAsDefaultInstance() {
  ::nebulaidl::plugins::_QuboleHiveJob_default_instance_._instance.get_mutable()->query_collection_ = const_cast< ::nebulaidl::plugins::HiveQueryCollection*>(
      ::nebulaidl::plugins::HiveQueryCollection::internal_default_instance());
  ::nebulaidl::plugins::_QuboleHiveJob_default_instance_._instance.get_mutable()->query_ = const_cast< ::nebulaidl::plugins::HiveQuery*>(
      ::nebulaidl::plugins::HiveQuery::internal_default_instance());
}
class QuboleHiveJob::HasBitSetters {
 public:
  static const ::nebulaidl::plugins::HiveQueryCollection& query_collection(const QuboleHiveJob* msg);
  static const ::nebulaidl::plugins::HiveQuery& query(const QuboleHiveJob* msg);
};

const ::nebulaidl::plugins::HiveQueryCollection&
QuboleHiveJob::HasBitSetters::query_collection(const QuboleHiveJob* msg) {
  return *msg->query_collection_;
}
const ::nebulaidl::plugins::HiveQuery&
QuboleHiveJob::HasBitSetters::query(const QuboleHiveJob* msg) {
  return *msg->query_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuboleHiveJob::kClusterLabelFieldNumber;
const int QuboleHiveJob::kQueryCollectionFieldNumber;
const int QuboleHiveJob::kTagsFieldNumber;
const int QuboleHiveJob::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuboleHiveJob::QuboleHiveJob()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.plugins.QuboleHiveJob)
}
QuboleHiveJob::QuboleHiveJob(const QuboleHiveJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_label().size() > 0) {
    cluster_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_label_);
  }
  if (from.has_query_collection()) {
    query_collection_ = new ::nebulaidl::plugins::HiveQueryCollection(*from.query_collection_);
  } else {
    query_collection_ = nullptr;
  }
  if (from.has_query()) {
    query_ = new ::nebulaidl::plugins::HiveQuery(*from.query_);
  } else {
    query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.plugins.QuboleHiveJob)
}

void QuboleHiveJob::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_QuboleHiveJob_nebulaidl_2fplugins_2fqubole_2eproto.base);
  cluster_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_collection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_) -
      reinterpret_cast<char*>(&query_collection_)) + sizeof(query_));
}

QuboleHiveJob::~QuboleHiveJob() {
  // @@protoc_insertion_point(destructor:nebulaidl.plugins.QuboleHiveJob)
  SharedDtor();
}

void QuboleHiveJob::SharedDtor() {
  cluster_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_collection_;
  if (this != internal_default_instance()) delete query_;
}

void QuboleHiveJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuboleHiveJob& QuboleHiveJob::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QuboleHiveJob_nebulaidl_2fplugins_2fqubole_2eproto.base);
  return *internal_default_instance();
}


void QuboleHiveJob::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.plugins.QuboleHiveJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cluster_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && query_collection_ != nullptr) {
    delete query_collection_;
  }
  query_collection_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuboleHiveJob::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QuboleHiveJob*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string cluster_label = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.plugins.QuboleHiveJob.cluster_label");
        object = msg->mutable_cluster_label();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .nebulaidl.plugins.HiveQueryCollection query_collection = 2 [deprecated = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::plugins::HiveQueryCollection::_InternalParse;
        object = msg->mutable_query_collection();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated string tags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("nebulaidl.plugins.QuboleHiveJob.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // .nebulaidl.plugins.HiveQuery query = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::plugins::HiveQuery::_InternalParse;
        object = msg->mutable_query();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuboleHiveJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.plugins.QuboleHiveJob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_label().data(), static_cast<int>(this->cluster_label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.plugins.QuboleHiveJob.cluster_label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.plugins.HiveQueryCollection query_collection = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query_collection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.plugins.QuboleHiveJob.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.plugins.HiveQuery query = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.plugins.QuboleHiveJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.plugins.QuboleHiveJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuboleHiveJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.plugins.QuboleHiveJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster_label = 1;
  if (this->cluster_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_label().data(), static_cast<int>(this->cluster_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.plugins.QuboleHiveJob.cluster_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_label(), output);
  }

  // .nebulaidl.plugins.HiveQueryCollection query_collection = 2 [deprecated = true];
  if (this->has_query_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::query_collection(this), output);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.plugins.QuboleHiveJob.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tags(i), output);
  }

  // .nebulaidl.plugins.HiveQuery query = 4;
  if (this->has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::query(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.plugins.QuboleHiveJob)
}

::google::protobuf::uint8* QuboleHiveJob::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.plugins.QuboleHiveJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster_label = 1;
  if (this->cluster_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_label().data(), static_cast<int>(this->cluster_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.plugins.QuboleHiveJob.cluster_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_label(), target);
  }

  // .nebulaidl.plugins.HiveQueryCollection query_collection = 2 [deprecated = true];
  if (this->has_query_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::query_collection(this), target);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.plugins.QuboleHiveJob.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tags(i), target);
  }

  // .nebulaidl.plugins.HiveQuery query = 4;
  if (this->has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::query(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.plugins.QuboleHiveJob)
  return target;
}

size_t QuboleHiveJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.plugins.QuboleHiveJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string cluster_label = 1;
  if (this->cluster_label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_label());
  }

  // .nebulaidl.plugins.HiveQueryCollection query_collection = 2 [deprecated = true];
  if (this->has_query_collection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *query_collection_);
  }

  // .nebulaidl.plugins.HiveQuery query = 4;
  if (this->has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *query_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuboleHiveJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.plugins.QuboleHiveJob)
  GOOGLE_DCHECK_NE(&from, this);
  const QuboleHiveJob* source =
      ::google::protobuf::DynamicCastToGenerated<QuboleHiveJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.plugins.QuboleHiveJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.plugins.QuboleHiveJob)
    MergeFrom(*source);
  }
}

void QuboleHiveJob::MergeFrom(const QuboleHiveJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.plugins.QuboleHiveJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.cluster_label().size() > 0) {

    cluster_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_label_);
  }
  if (from.has_query_collection()) {
    mutable_query_collection()->::nebulaidl::plugins::HiveQueryCollection::MergeFrom(from.query_collection());
  }
  if (from.has_query()) {
    mutable_query()->::nebulaidl::plugins::HiveQuery::MergeFrom(from.query());
  }
}

void QuboleHiveJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.plugins.QuboleHiveJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuboleHiveJob::CopyFrom(const QuboleHiveJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.plugins.QuboleHiveJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuboleHiveJob::IsInitialized() const {
  return true;
}

void QuboleHiveJob::Swap(QuboleHiveJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuboleHiveJob::InternalSwap(QuboleHiveJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(CastToBase(&other->tags_));
  cluster_label_.Swap(&other->cluster_label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(query_collection_, other->query_collection_);
  swap(query_, other->query_);
}

::google::protobuf::Metadata QuboleHiveJob::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fplugins_2fqubole_2eproto);
  return ::file_level_metadata_nebulaidl_2fplugins_2fqubole_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace nebulaidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::nebulaidl::plugins::HiveQuery* Arena::CreateMaybeMessage< ::nebulaidl::plugins::HiveQuery >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::plugins::HiveQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::plugins::HiveQueryCollection* Arena::CreateMaybeMessage< ::nebulaidl::plugins::HiveQueryCollection >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::plugins::HiveQueryCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::plugins::QuboleHiveJob* Arena::CreateMaybeMessage< ::nebulaidl::plugins::QuboleHiveJob >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::plugins::QuboleHiveJob >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
