// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulaidl/admin/agent.proto

#ifndef PROTOBUF_INCLUDED_nebulaidl_2fadmin_2fagent_2eproto
#define PROTOBUF_INCLUDED_nebulaidl_2fadmin_2fagent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nebulaidl/core/literals.pb.h"
#include "nebulaidl/core/tasks.pb.h"
#include "nebulaidl/core/interface.pb.h"
#include "nebulaidl/core/identifier.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fagent_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_nebulaidl_2fadmin_2fagent_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_nebulaidl_2fadmin_2fagent_2eproto();
namespace nebulaidl {
namespace admin {
class CreateTaskRequest;
class CreateTaskRequestDefaultTypeInternal;
extern CreateTaskRequestDefaultTypeInternal _CreateTaskRequest_default_instance_;
class CreateTaskResponse;
class CreateTaskResponseDefaultTypeInternal;
extern CreateTaskResponseDefaultTypeInternal _CreateTaskResponse_default_instance_;
class DeleteTaskRequest;
class DeleteTaskRequestDefaultTypeInternal;
extern DeleteTaskRequestDefaultTypeInternal _DeleteTaskRequest_default_instance_;
class DeleteTaskResponse;
class DeleteTaskResponseDefaultTypeInternal;
extern DeleteTaskResponseDefaultTypeInternal _DeleteTaskResponse_default_instance_;
class GetTaskRequest;
class GetTaskRequestDefaultTypeInternal;
extern GetTaskRequestDefaultTypeInternal _GetTaskRequest_default_instance_;
class GetTaskResponse;
class GetTaskResponseDefaultTypeInternal;
extern GetTaskResponseDefaultTypeInternal _GetTaskResponse_default_instance_;
class Resource;
class ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class TaskExecutionMetadata;
class TaskExecutionMetadataDefaultTypeInternal;
extern TaskExecutionMetadataDefaultTypeInternal _TaskExecutionMetadata_default_instance_;
class TaskExecutionMetadata_AnnotationsEntry_DoNotUse;
class TaskExecutionMetadata_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern TaskExecutionMetadata_AnnotationsEntry_DoNotUseDefaultTypeInternal _TaskExecutionMetadata_AnnotationsEntry_DoNotUse_default_instance_;
class TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse;
class TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUseDefaultTypeInternal;
extern TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUseDefaultTypeInternal _TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse_default_instance_;
class TaskExecutionMetadata_LabelsEntry_DoNotUse;
class TaskExecutionMetadata_LabelsEntry_DoNotUseDefaultTypeInternal;
extern TaskExecutionMetadata_LabelsEntry_DoNotUseDefaultTypeInternal _TaskExecutionMetadata_LabelsEntry_DoNotUse_default_instance_;
}  // namespace admin
}  // namespace nebulaidl
namespace google {
namespace protobuf {
template<> ::nebulaidl::admin::CreateTaskRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::CreateTaskRequest>(Arena*);
template<> ::nebulaidl::admin::CreateTaskResponse* Arena::CreateMaybeMessage<::nebulaidl::admin::CreateTaskResponse>(Arena*);
template<> ::nebulaidl::admin::DeleteTaskRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::DeleteTaskRequest>(Arena*);
template<> ::nebulaidl::admin::DeleteTaskResponse* Arena::CreateMaybeMessage<::nebulaidl::admin::DeleteTaskResponse>(Arena*);
template<> ::nebulaidl::admin::GetTaskRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::GetTaskRequest>(Arena*);
template<> ::nebulaidl::admin::GetTaskResponse* Arena::CreateMaybeMessage<::nebulaidl::admin::GetTaskResponse>(Arena*);
template<> ::nebulaidl::admin::Resource* Arena::CreateMaybeMessage<::nebulaidl::admin::Resource>(Arena*);
template<> ::nebulaidl::admin::TaskExecutionMetadata* Arena::CreateMaybeMessage<::nebulaidl::admin::TaskExecutionMetadata>(Arena*);
template<> ::nebulaidl::admin::TaskExecutionMetadata_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::nebulaidl::admin::TaskExecutionMetadata_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::nebulaidl::admin::TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse* Arena::CreateMaybeMessage<::nebulaidl::admin::TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse>(Arena*);
template<> ::nebulaidl::admin::TaskExecutionMetadata_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::nebulaidl::admin::TaskExecutionMetadata_LabelsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace nebulaidl {
namespace admin {

enum State {
  RETRYABLE_FAILURE = 0,
  PERMANENT_FAILURE = 1,
  PENDING = 2,
  RUNNING = 3,
  SUCCEEDED = 4,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool State_IsValid(int value);
const State State_MIN = RETRYABLE_FAILURE;
const State State_MAX = SUCCEEDED;
const int State_ARRAYSIZE = State_MAX + 1;

const ::google::protobuf::EnumDescriptor* State_descriptor();
inline const ::std::string& State_Name(State value) {
  return ::google::protobuf::internal::NameOfEnum(
    State_descriptor(), value);
}
inline bool State_Parse(
    const ::std::string& name, State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State>(
    State_descriptor(), name, value);
}
// ===================================================================

class TaskExecutionMetadata_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TaskExecutionMetadata_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<TaskExecutionMetadata_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TaskExecutionMetadata_LabelsEntry_DoNotUse();
  TaskExecutionMetadata_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TaskExecutionMetadata_LabelsEntry_DoNotUse& other);
  static const TaskExecutionMetadata_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TaskExecutionMetadata_LabelsEntry_DoNotUse*>(&_TaskExecutionMetadata_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TaskExecutionMetadata_AnnotationsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TaskExecutionMetadata_AnnotationsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<TaskExecutionMetadata_AnnotationsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TaskExecutionMetadata_AnnotationsEntry_DoNotUse();
  TaskExecutionMetadata_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TaskExecutionMetadata_AnnotationsEntry_DoNotUse& other);
  static const TaskExecutionMetadata_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TaskExecutionMetadata_AnnotationsEntry_DoNotUse*>(&_TaskExecutionMetadata_AnnotationsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse();
  TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse& other);
  static const TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse*>(&_TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TaskExecutionMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.TaskExecutionMetadata) */ {
 public:
  TaskExecutionMetadata();
  virtual ~TaskExecutionMetadata();

  TaskExecutionMetadata(const TaskExecutionMetadata& from);

  inline TaskExecutionMetadata& operator=(const TaskExecutionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionMetadata(TaskExecutionMetadata&& from) noexcept
    : TaskExecutionMetadata() {
    *this = ::std::move(from);
  }

  inline TaskExecutionMetadata& operator=(TaskExecutionMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecutionMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionMetadata* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionMetadata*>(
               &_TaskExecutionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TaskExecutionMetadata* other);
  friend void swap(TaskExecutionMetadata& a, TaskExecutionMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionMetadata* New() const final {
    return CreateMaybeMessage<TaskExecutionMetadata>(nullptr);
  }

  TaskExecutionMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecutionMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecutionMetadata& from);
  void MergeFrom(const TaskExecutionMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 3;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // map<string, string> annotations = 4;
  int annotations_size() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      annotations() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_annotations();

  // map<string, string> environment_variables = 6;
  int environment_variables_size() const;
  void clear_environment_variables();
  static const int kEnvironmentVariablesFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      environment_variables() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_environment_variables();

  // string namespace = 2;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 2;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // string k8s_service_account = 5;
  void clear_k8s_service_account();
  static const int kK8SServiceAccountFieldNumber = 5;
  const ::std::string& k8s_service_account() const;
  void set_k8s_service_account(const ::std::string& value);
  #if LANG_CXX11
  void set_k8s_service_account(::std::string&& value);
  #endif
  void set_k8s_service_account(const char* value);
  void set_k8s_service_account(const char* value, size_t size);
  ::std::string* mutable_k8s_service_account();
  ::std::string* release_k8s_service_account();
  void set_allocated_k8s_service_account(::std::string* k8s_service_account);

  // .nebulaidl.core.TaskExecutionIdentifier task_execution_id = 1;
  bool has_task_execution_id() const;
  void clear_task_execution_id();
  static const int kTaskExecutionIdFieldNumber = 1;
  const ::nebulaidl::core::TaskExecutionIdentifier& task_execution_id() const;
  ::nebulaidl::core::TaskExecutionIdentifier* release_task_execution_id();
  ::nebulaidl::core::TaskExecutionIdentifier* mutable_task_execution_id();
  void set_allocated_task_execution_id(::nebulaidl::core::TaskExecutionIdentifier* task_execution_id);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.TaskExecutionMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      TaskExecutionMetadata_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::MapField<
      TaskExecutionMetadata_AnnotationsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::google::protobuf::internal::MapField<
      TaskExecutionMetadata_EnvironmentVariablesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > environment_variables_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  ::google::protobuf::internal::ArenaStringPtr k8s_service_account_;
  ::nebulaidl::core::TaskExecutionIdentifier* task_execution_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fagent_2eproto;
};
// -------------------------------------------------------------------

class CreateTaskRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.CreateTaskRequest) */ {
 public:
  CreateTaskRequest();
  virtual ~CreateTaskRequest();

  CreateTaskRequest(const CreateTaskRequest& from);

  inline CreateTaskRequest& operator=(const CreateTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTaskRequest(CreateTaskRequest&& from) noexcept
    : CreateTaskRequest() {
    *this = ::std::move(from);
  }

  inline CreateTaskRequest& operator=(CreateTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTaskRequest*>(
               &_CreateTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CreateTaskRequest* other);
  friend void swap(CreateTaskRequest& a, CreateTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTaskRequest* New() const final {
    return CreateMaybeMessage<CreateTaskRequest>(nullptr);
  }

  CreateTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTaskRequest& from);
  void MergeFrom(const CreateTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string output_prefix = 3;
  void clear_output_prefix();
  static const int kOutputPrefixFieldNumber = 3;
  const ::std::string& output_prefix() const;
  void set_output_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_output_prefix(::std::string&& value);
  #endif
  void set_output_prefix(const char* value);
  void set_output_prefix(const char* value, size_t size);
  ::std::string* mutable_output_prefix();
  ::std::string* release_output_prefix();
  void set_allocated_output_prefix(::std::string* output_prefix);

  // .nebulaidl.core.LiteralMap inputs = 1;
  bool has_inputs() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 1;
  const ::nebulaidl::core::LiteralMap& inputs() const;
  ::nebulaidl::core::LiteralMap* release_inputs();
  ::nebulaidl::core::LiteralMap* mutable_inputs();
  void set_allocated_inputs(::nebulaidl::core::LiteralMap* inputs);

  // .nebulaidl.core.TaskTemplate template = 2;
  bool has_template_() const;
  void clear_template_();
  static const int kTemplateFieldNumber = 2;
  const ::nebulaidl::core::TaskTemplate& template_() const;
  ::nebulaidl::core::TaskTemplate* release_template_();
  ::nebulaidl::core::TaskTemplate* mutable_template_();
  void set_allocated_template_(::nebulaidl::core::TaskTemplate* template_);

  // .nebulaidl.admin.TaskExecutionMetadata task_execution_metadata = 4;
  bool has_task_execution_metadata() const;
  void clear_task_execution_metadata();
  static const int kTaskExecutionMetadataFieldNumber = 4;
  const ::nebulaidl::admin::TaskExecutionMetadata& task_execution_metadata() const;
  ::nebulaidl::admin::TaskExecutionMetadata* release_task_execution_metadata();
  ::nebulaidl::admin::TaskExecutionMetadata* mutable_task_execution_metadata();
  void set_allocated_task_execution_metadata(::nebulaidl::admin::TaskExecutionMetadata* task_execution_metadata);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.CreateTaskRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr output_prefix_;
  ::nebulaidl::core::LiteralMap* inputs_;
  ::nebulaidl::core::TaskTemplate* template__;
  ::nebulaidl::admin::TaskExecutionMetadata* task_execution_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fagent_2eproto;
};
// -------------------------------------------------------------------

class CreateTaskResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.CreateTaskResponse) */ {
 public:
  CreateTaskResponse();
  virtual ~CreateTaskResponse();

  CreateTaskResponse(const CreateTaskResponse& from);

  inline CreateTaskResponse& operator=(const CreateTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTaskResponse(CreateTaskResponse&& from) noexcept
    : CreateTaskResponse() {
    *this = ::std::move(from);
  }

  inline CreateTaskResponse& operator=(CreateTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTaskResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTaskResponse*>(
               &_CreateTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CreateTaskResponse* other);
  friend void swap(CreateTaskResponse& a, CreateTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTaskResponse* New() const final {
    return CreateMaybeMessage<CreateTaskResponse>(nullptr);
  }

  CreateTaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTaskResponse& from);
  void MergeFrom(const CreateTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes resource_meta = 1;
  void clear_resource_meta();
  static const int kResourceMetaFieldNumber = 1;
  const ::std::string& resource_meta() const;
  void set_resource_meta(const ::std::string& value);
  #if LANG_CXX11
  void set_resource_meta(::std::string&& value);
  #endif
  void set_resource_meta(const char* value);
  void set_resource_meta(const void* value, size_t size);
  ::std::string* mutable_resource_meta();
  ::std::string* release_resource_meta();
  void set_allocated_resource_meta(::std::string* resource_meta);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.CreateTaskResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr resource_meta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetTaskRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.GetTaskRequest) */ {
 public:
  GetTaskRequest();
  virtual ~GetTaskRequest();

  GetTaskRequest(const GetTaskRequest& from);

  inline GetTaskRequest& operator=(const GetTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTaskRequest(GetTaskRequest&& from) noexcept
    : GetTaskRequest() {
    *this = ::std::move(from);
  }

  inline GetTaskRequest& operator=(GetTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTaskRequest* internal_default_instance() {
    return reinterpret_cast<const GetTaskRequest*>(
               &_GetTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetTaskRequest* other);
  friend void swap(GetTaskRequest& a, GetTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTaskRequest* New() const final {
    return CreateMaybeMessage<GetTaskRequest>(nullptr);
  }

  GetTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTaskRequest& from);
  void MergeFrom(const GetTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string task_type = 1;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 1;
  const ::std::string& task_type() const;
  void set_task_type(const ::std::string& value);
  #if LANG_CXX11
  void set_task_type(::std::string&& value);
  #endif
  void set_task_type(const char* value);
  void set_task_type(const char* value, size_t size);
  ::std::string* mutable_task_type();
  ::std::string* release_task_type();
  void set_allocated_task_type(::std::string* task_type);

  // bytes resource_meta = 2;
  void clear_resource_meta();
  static const int kResourceMetaFieldNumber = 2;
  const ::std::string& resource_meta() const;
  void set_resource_meta(const ::std::string& value);
  #if LANG_CXX11
  void set_resource_meta(::std::string&& value);
  #endif
  void set_resource_meta(const char* value);
  void set_resource_meta(const void* value, size_t size);
  ::std::string* mutable_resource_meta();
  ::std::string* release_resource_meta();
  void set_allocated_resource_meta(::std::string* resource_meta);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.GetTaskRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr task_type_;
  ::google::protobuf::internal::ArenaStringPtr resource_meta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetTaskResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.GetTaskResponse) */ {
 public:
  GetTaskResponse();
  virtual ~GetTaskResponse();

  GetTaskResponse(const GetTaskResponse& from);

  inline GetTaskResponse& operator=(const GetTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTaskResponse(GetTaskResponse&& from) noexcept
    : GetTaskResponse() {
    *this = ::std::move(from);
  }

  inline GetTaskResponse& operator=(GetTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTaskResponse* internal_default_instance() {
    return reinterpret_cast<const GetTaskResponse*>(
               &_GetTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetTaskResponse* other);
  friend void swap(GetTaskResponse& a, GetTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTaskResponse* New() const final {
    return CreateMaybeMessage<GetTaskResponse>(nullptr);
  }

  GetTaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTaskResponse& from);
  void MergeFrom(const GetTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.admin.Resource resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::nebulaidl::admin::Resource& resource() const;
  ::nebulaidl::admin::Resource* release_resource();
  ::nebulaidl::admin::Resource* mutable_resource();
  void set_allocated_resource(::nebulaidl::admin::Resource* resource);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.GetTaskResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::admin::Resource* resource_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fagent_2eproto;
};
// -------------------------------------------------------------------

class Resource final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.Resource) */ {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(Resource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Resource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Resource* other);
  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Resource* New() const final {
    return CreateMaybeMessage<Resource>(nullptr);
  }

  Resource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.LiteralMap outputs = 2;
  bool has_outputs() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 2;
  const ::nebulaidl::core::LiteralMap& outputs() const;
  ::nebulaidl::core::LiteralMap* release_outputs();
  ::nebulaidl::core::LiteralMap* mutable_outputs();
  void set_allocated_outputs(::nebulaidl::core::LiteralMap* outputs);

  // .nebulaidl.admin.State state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::nebulaidl::admin::State state() const;
  void set_state(::nebulaidl::admin::State value);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.Resource)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::core::LiteralMap* outputs_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fagent_2eproto;
};
// -------------------------------------------------------------------

class DeleteTaskRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.DeleteTaskRequest) */ {
 public:
  DeleteTaskRequest();
  virtual ~DeleteTaskRequest();

  DeleteTaskRequest(const DeleteTaskRequest& from);

  inline DeleteTaskRequest& operator=(const DeleteTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTaskRequest(DeleteTaskRequest&& from) noexcept
    : DeleteTaskRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTaskRequest& operator=(DeleteTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTaskRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTaskRequest*>(
               &_DeleteTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DeleteTaskRequest* other);
  friend void swap(DeleteTaskRequest& a, DeleteTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTaskRequest* New() const final {
    return CreateMaybeMessage<DeleteTaskRequest>(nullptr);
  }

  DeleteTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteTaskRequest& from);
  void MergeFrom(const DeleteTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string task_type = 1;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 1;
  const ::std::string& task_type() const;
  void set_task_type(const ::std::string& value);
  #if LANG_CXX11
  void set_task_type(::std::string&& value);
  #endif
  void set_task_type(const char* value);
  void set_task_type(const char* value, size_t size);
  ::std::string* mutable_task_type();
  ::std::string* release_task_type();
  void set_allocated_task_type(::std::string* task_type);

  // bytes resource_meta = 2;
  void clear_resource_meta();
  static const int kResourceMetaFieldNumber = 2;
  const ::std::string& resource_meta() const;
  void set_resource_meta(const ::std::string& value);
  #if LANG_CXX11
  void set_resource_meta(::std::string&& value);
  #endif
  void set_resource_meta(const char* value);
  void set_resource_meta(const void* value, size_t size);
  ::std::string* mutable_resource_meta();
  ::std::string* release_resource_meta();
  void set_allocated_resource_meta(::std::string* resource_meta);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.DeleteTaskRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr task_type_;
  ::google::protobuf::internal::ArenaStringPtr resource_meta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fagent_2eproto;
};
// -------------------------------------------------------------------

class DeleteTaskResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.DeleteTaskResponse) */ {
 public:
  DeleteTaskResponse();
  virtual ~DeleteTaskResponse();

  DeleteTaskResponse(const DeleteTaskResponse& from);

  inline DeleteTaskResponse& operator=(const DeleteTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTaskResponse(DeleteTaskResponse&& from) noexcept
    : DeleteTaskResponse() {
    *this = ::std::move(from);
  }

  inline DeleteTaskResponse& operator=(DeleteTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTaskResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteTaskResponse*>(
               &_DeleteTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DeleteTaskResponse* other);
  friend void swap(DeleteTaskResponse& a, DeleteTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTaskResponse* New() const final {
    return CreateMaybeMessage<DeleteTaskResponse>(nullptr);
  }

  DeleteTaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteTaskResponse& from);
  void MergeFrom(const DeleteTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.DeleteTaskResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fagent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TaskExecutionMetadata

// .nebulaidl.core.TaskExecutionIdentifier task_execution_id = 1;
inline bool TaskExecutionMetadata::has_task_execution_id() const {
  return this != internal_default_instance() && task_execution_id_ != nullptr;
}
inline const ::nebulaidl::core::TaskExecutionIdentifier& TaskExecutionMetadata::task_execution_id() const {
  const ::nebulaidl::core::TaskExecutionIdentifier* p = task_execution_id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.TaskExecutionMetadata.task_execution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::TaskExecutionIdentifier*>(
      &::nebulaidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::TaskExecutionIdentifier* TaskExecutionMetadata::release_task_execution_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.TaskExecutionMetadata.task_execution_id)
  
  ::nebulaidl::core::TaskExecutionIdentifier* temp = task_execution_id_;
  task_execution_id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::TaskExecutionIdentifier* TaskExecutionMetadata::mutable_task_execution_id() {
  
  if (task_execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::TaskExecutionIdentifier>(GetArenaNoVirtual());
    task_execution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.TaskExecutionMetadata.task_execution_id)
  return task_execution_id_;
}
inline void TaskExecutionMetadata::set_allocated_task_execution_id(::nebulaidl::core::TaskExecutionIdentifier* task_execution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_execution_id_);
  }
  if (task_execution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_execution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_execution_id, submessage_arena);
    }
    
  } else {
    
  }
  task_execution_id_ = task_execution_id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.TaskExecutionMetadata.task_execution_id)
}

// string namespace = 2;
inline void TaskExecutionMetadata::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionMetadata::namespace_() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.TaskExecutionMetadata.namespace)
  return namespace__.GetNoArena();
}
inline void TaskExecutionMetadata::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.TaskExecutionMetadata.namespace)
}
#if LANG_CXX11
inline void TaskExecutionMetadata::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.TaskExecutionMetadata.namespace)
}
#endif
inline void TaskExecutionMetadata::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.TaskExecutionMetadata.namespace)
}
inline void TaskExecutionMetadata::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.TaskExecutionMetadata.namespace)
}
inline ::std::string* TaskExecutionMetadata::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.TaskExecutionMetadata.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionMetadata::release_namespace_() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.TaskExecutionMetadata.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionMetadata::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.TaskExecutionMetadata.namespace)
}

// map<string, string> labels = 3;
inline int TaskExecutionMetadata::labels_size() const {
  return labels_.size();
}
inline void TaskExecutionMetadata::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
TaskExecutionMetadata::labels() const {
  // @@protoc_insertion_point(field_map:nebulaidl.admin.TaskExecutionMetadata.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
TaskExecutionMetadata::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:nebulaidl.admin.TaskExecutionMetadata.labels)
  return labels_.MutableMap();
}

// map<string, string> annotations = 4;
inline int TaskExecutionMetadata::annotations_size() const {
  return annotations_.size();
}
inline void TaskExecutionMetadata::clear_annotations() {
  annotations_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
TaskExecutionMetadata::annotations() const {
  // @@protoc_insertion_point(field_map:nebulaidl.admin.TaskExecutionMetadata.annotations)
  return annotations_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
TaskExecutionMetadata::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:nebulaidl.admin.TaskExecutionMetadata.annotations)
  return annotations_.MutableMap();
}

// string k8s_service_account = 5;
inline void TaskExecutionMetadata::clear_k8s_service_account() {
  k8s_service_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionMetadata::k8s_service_account() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.TaskExecutionMetadata.k8s_service_account)
  return k8s_service_account_.GetNoArena();
}
inline void TaskExecutionMetadata::set_k8s_service_account(const ::std::string& value) {
  
  k8s_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.TaskExecutionMetadata.k8s_service_account)
}
#if LANG_CXX11
inline void TaskExecutionMetadata::set_k8s_service_account(::std::string&& value) {
  
  k8s_service_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.TaskExecutionMetadata.k8s_service_account)
}
#endif
inline void TaskExecutionMetadata::set_k8s_service_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k8s_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.TaskExecutionMetadata.k8s_service_account)
}
inline void TaskExecutionMetadata::set_k8s_service_account(const char* value, size_t size) {
  
  k8s_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.TaskExecutionMetadata.k8s_service_account)
}
inline ::std::string* TaskExecutionMetadata::mutable_k8s_service_account() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.TaskExecutionMetadata.k8s_service_account)
  return k8s_service_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionMetadata::release_k8s_service_account() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.TaskExecutionMetadata.k8s_service_account)
  
  return k8s_service_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionMetadata::set_allocated_k8s_service_account(::std::string* k8s_service_account) {
  if (k8s_service_account != nullptr) {
    
  } else {
    
  }
  k8s_service_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k8s_service_account);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.TaskExecutionMetadata.k8s_service_account)
}

// map<string, string> environment_variables = 6;
inline int TaskExecutionMetadata::environment_variables_size() const {
  return environment_variables_.size();
}
inline void TaskExecutionMetadata::clear_environment_variables() {
  environment_variables_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
TaskExecutionMetadata::environment_variables() const {
  // @@protoc_insertion_point(field_map:nebulaidl.admin.TaskExecutionMetadata.environment_variables)
  return environment_variables_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
TaskExecutionMetadata::mutable_environment_variables() {
  // @@protoc_insertion_point(field_mutable_map:nebulaidl.admin.TaskExecutionMetadata.environment_variables)
  return environment_variables_.MutableMap();
}

// -------------------------------------------------------------------

// CreateTaskRequest

// .nebulaidl.core.LiteralMap inputs = 1;
inline bool CreateTaskRequest::has_inputs() const {
  return this != internal_default_instance() && inputs_ != nullptr;
}
inline const ::nebulaidl::core::LiteralMap& CreateTaskRequest::inputs() const {
  const ::nebulaidl::core::LiteralMap* p = inputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.CreateTaskRequest.inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::LiteralMap*>(
      &::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* CreateTaskRequest::release_inputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.CreateTaskRequest.inputs)
  
  ::nebulaidl::core::LiteralMap* temp = inputs_;
  inputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::LiteralMap* CreateTaskRequest::mutable_inputs() {
  
  if (inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::LiteralMap>(GetArenaNoVirtual());
    inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.CreateTaskRequest.inputs)
  return inputs_;
}
inline void CreateTaskRequest::set_allocated_inputs(::nebulaidl::core::LiteralMap* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.CreateTaskRequest.inputs)
}

// .nebulaidl.core.TaskTemplate template = 2;
inline bool CreateTaskRequest::has_template_() const {
  return this != internal_default_instance() && template__ != nullptr;
}
inline const ::nebulaidl::core::TaskTemplate& CreateTaskRequest::template_() const {
  const ::nebulaidl::core::TaskTemplate* p = template__;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.CreateTaskRequest.template)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::TaskTemplate*>(
      &::nebulaidl::core::_TaskTemplate_default_instance_);
}
inline ::nebulaidl::core::TaskTemplate* CreateTaskRequest::release_template_() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.CreateTaskRequest.template)
  
  ::nebulaidl::core::TaskTemplate* temp = template__;
  template__ = nullptr;
  return temp;
}
inline ::nebulaidl::core::TaskTemplate* CreateTaskRequest::mutable_template_() {
  
  if (template__ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::TaskTemplate>(GetArenaNoVirtual());
    template__ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.CreateTaskRequest.template)
  return template__;
}
inline void CreateTaskRequest::set_allocated_template_(::nebulaidl::core::TaskTemplate* template_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(template__);
  }
  if (template_) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      template_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    
  } else {
    
  }
  template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.CreateTaskRequest.template)
}

// string output_prefix = 3;
inline void CreateTaskRequest::clear_output_prefix() {
  output_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateTaskRequest::output_prefix() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.CreateTaskRequest.output_prefix)
  return output_prefix_.GetNoArena();
}
inline void CreateTaskRequest::set_output_prefix(const ::std::string& value) {
  
  output_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.CreateTaskRequest.output_prefix)
}
#if LANG_CXX11
inline void CreateTaskRequest::set_output_prefix(::std::string&& value) {
  
  output_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.CreateTaskRequest.output_prefix)
}
#endif
inline void CreateTaskRequest::set_output_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.CreateTaskRequest.output_prefix)
}
inline void CreateTaskRequest::set_output_prefix(const char* value, size_t size) {
  
  output_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.CreateTaskRequest.output_prefix)
}
inline ::std::string* CreateTaskRequest::mutable_output_prefix() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.CreateTaskRequest.output_prefix)
  return output_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTaskRequest::release_output_prefix() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.CreateTaskRequest.output_prefix)
  
  return output_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTaskRequest::set_allocated_output_prefix(::std::string* output_prefix) {
  if (output_prefix != nullptr) {
    
  } else {
    
  }
  output_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_prefix);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.CreateTaskRequest.output_prefix)
}

// .nebulaidl.admin.TaskExecutionMetadata task_execution_metadata = 4;
inline bool CreateTaskRequest::has_task_execution_metadata() const {
  return this != internal_default_instance() && task_execution_metadata_ != nullptr;
}
inline void CreateTaskRequest::clear_task_execution_metadata() {
  if (GetArenaNoVirtual() == nullptr && task_execution_metadata_ != nullptr) {
    delete task_execution_metadata_;
  }
  task_execution_metadata_ = nullptr;
}
inline const ::nebulaidl::admin::TaskExecutionMetadata& CreateTaskRequest::task_execution_metadata() const {
  const ::nebulaidl::admin::TaskExecutionMetadata* p = task_execution_metadata_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.CreateTaskRequest.task_execution_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::TaskExecutionMetadata*>(
      &::nebulaidl::admin::_TaskExecutionMetadata_default_instance_);
}
inline ::nebulaidl::admin::TaskExecutionMetadata* CreateTaskRequest::release_task_execution_metadata() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.CreateTaskRequest.task_execution_metadata)
  
  ::nebulaidl::admin::TaskExecutionMetadata* temp = task_execution_metadata_;
  task_execution_metadata_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::TaskExecutionMetadata* CreateTaskRequest::mutable_task_execution_metadata() {
  
  if (task_execution_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::TaskExecutionMetadata>(GetArenaNoVirtual());
    task_execution_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.CreateTaskRequest.task_execution_metadata)
  return task_execution_metadata_;
}
inline void CreateTaskRequest::set_allocated_task_execution_metadata(::nebulaidl::admin::TaskExecutionMetadata* task_execution_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_execution_metadata_;
  }
  if (task_execution_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_execution_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_execution_metadata, submessage_arena);
    }
    
  } else {
    
  }
  task_execution_metadata_ = task_execution_metadata;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.CreateTaskRequest.task_execution_metadata)
}

// -------------------------------------------------------------------

// CreateTaskResponse

// bytes resource_meta = 1;
inline void CreateTaskResponse::clear_resource_meta() {
  resource_meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateTaskResponse::resource_meta() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.CreateTaskResponse.resource_meta)
  return resource_meta_.GetNoArena();
}
inline void CreateTaskResponse::set_resource_meta(const ::std::string& value) {
  
  resource_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.CreateTaskResponse.resource_meta)
}
#if LANG_CXX11
inline void CreateTaskResponse::set_resource_meta(::std::string&& value) {
  
  resource_meta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.CreateTaskResponse.resource_meta)
}
#endif
inline void CreateTaskResponse::set_resource_meta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.CreateTaskResponse.resource_meta)
}
inline void CreateTaskResponse::set_resource_meta(const void* value, size_t size) {
  
  resource_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.CreateTaskResponse.resource_meta)
}
inline ::std::string* CreateTaskResponse::mutable_resource_meta() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.CreateTaskResponse.resource_meta)
  return resource_meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTaskResponse::release_resource_meta() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.CreateTaskResponse.resource_meta)
  
  return resource_meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTaskResponse::set_allocated_resource_meta(::std::string* resource_meta) {
  if (resource_meta != nullptr) {
    
  } else {
    
  }
  resource_meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_meta);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.CreateTaskResponse.resource_meta)
}

// -------------------------------------------------------------------

// GetTaskRequest

// string task_type = 1;
inline void GetTaskRequest::clear_task_type() {
  task_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTaskRequest::task_type() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.GetTaskRequest.task_type)
  return task_type_.GetNoArena();
}
inline void GetTaskRequest::set_task_type(const ::std::string& value) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.GetTaskRequest.task_type)
}
#if LANG_CXX11
inline void GetTaskRequest::set_task_type(::std::string&& value) {
  
  task_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.GetTaskRequest.task_type)
}
#endif
inline void GetTaskRequest::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.GetTaskRequest.task_type)
}
inline void GetTaskRequest::set_task_type(const char* value, size_t size) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.GetTaskRequest.task_type)
}
inline ::std::string* GetTaskRequest::mutable_task_type() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.GetTaskRequest.task_type)
  return task_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTaskRequest::release_task_type() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.GetTaskRequest.task_type)
  
  return task_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTaskRequest::set_allocated_task_type(::std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_type);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.GetTaskRequest.task_type)
}

// bytes resource_meta = 2;
inline void GetTaskRequest::clear_resource_meta() {
  resource_meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTaskRequest::resource_meta() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.GetTaskRequest.resource_meta)
  return resource_meta_.GetNoArena();
}
inline void GetTaskRequest::set_resource_meta(const ::std::string& value) {
  
  resource_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.GetTaskRequest.resource_meta)
}
#if LANG_CXX11
inline void GetTaskRequest::set_resource_meta(::std::string&& value) {
  
  resource_meta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.GetTaskRequest.resource_meta)
}
#endif
inline void GetTaskRequest::set_resource_meta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.GetTaskRequest.resource_meta)
}
inline void GetTaskRequest::set_resource_meta(const void* value, size_t size) {
  
  resource_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.GetTaskRequest.resource_meta)
}
inline ::std::string* GetTaskRequest::mutable_resource_meta() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.GetTaskRequest.resource_meta)
  return resource_meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTaskRequest::release_resource_meta() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.GetTaskRequest.resource_meta)
  
  return resource_meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTaskRequest::set_allocated_resource_meta(::std::string* resource_meta) {
  if (resource_meta != nullptr) {
    
  } else {
    
  }
  resource_meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_meta);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.GetTaskRequest.resource_meta)
}

// -------------------------------------------------------------------

// GetTaskResponse

// .nebulaidl.admin.Resource resource = 1;
inline bool GetTaskResponse::has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline void GetTaskResponse::clear_resource() {
  if (GetArenaNoVirtual() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
}
inline const ::nebulaidl::admin::Resource& GetTaskResponse::resource() const {
  const ::nebulaidl::admin::Resource* p = resource_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.GetTaskResponse.resource)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::Resource*>(
      &::nebulaidl::admin::_Resource_default_instance_);
}
inline ::nebulaidl::admin::Resource* GetTaskResponse::release_resource() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.GetTaskResponse.resource)
  
  ::nebulaidl::admin::Resource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::Resource* GetTaskResponse::mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::Resource>(GetArenaNoVirtual());
    resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.GetTaskResponse.resource)
  return resource_;
}
inline void GetTaskResponse::set_allocated_resource(::nebulaidl::admin::Resource* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.GetTaskResponse.resource)
}

// -------------------------------------------------------------------

// Resource

// .nebulaidl.admin.State state = 1;
inline void Resource::clear_state() {
  state_ = 0;
}
inline ::nebulaidl::admin::State Resource::state() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.Resource.state)
  return static_cast< ::nebulaidl::admin::State >(state_);
}
inline void Resource::set_state(::nebulaidl::admin::State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.Resource.state)
}

// .nebulaidl.core.LiteralMap outputs = 2;
inline bool Resource::has_outputs() const {
  return this != internal_default_instance() && outputs_ != nullptr;
}
inline const ::nebulaidl::core::LiteralMap& Resource::outputs() const {
  const ::nebulaidl::core::LiteralMap* p = outputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.Resource.outputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::LiteralMap*>(
      &::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* Resource::release_outputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.Resource.outputs)
  
  ::nebulaidl::core::LiteralMap* temp = outputs_;
  outputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::LiteralMap* Resource::mutable_outputs() {
  
  if (outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::LiteralMap>(GetArenaNoVirtual());
    outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.Resource.outputs)
  return outputs_;
}
inline void Resource::set_allocated_outputs(::nebulaidl::core::LiteralMap* outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(outputs_);
  }
  if (outputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    
  } else {
    
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.Resource.outputs)
}

// -------------------------------------------------------------------

// DeleteTaskRequest

// string task_type = 1;
inline void DeleteTaskRequest::clear_task_type() {
  task_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteTaskRequest::task_type() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.DeleteTaskRequest.task_type)
  return task_type_.GetNoArena();
}
inline void DeleteTaskRequest::set_task_type(const ::std::string& value) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.DeleteTaskRequest.task_type)
}
#if LANG_CXX11
inline void DeleteTaskRequest::set_task_type(::std::string&& value) {
  
  task_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.DeleteTaskRequest.task_type)
}
#endif
inline void DeleteTaskRequest::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.DeleteTaskRequest.task_type)
}
inline void DeleteTaskRequest::set_task_type(const char* value, size_t size) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.DeleteTaskRequest.task_type)
}
inline ::std::string* DeleteTaskRequest::mutable_task_type() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.DeleteTaskRequest.task_type)
  return task_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteTaskRequest::release_task_type() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.DeleteTaskRequest.task_type)
  
  return task_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteTaskRequest::set_allocated_task_type(::std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_type);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.DeleteTaskRequest.task_type)
}

// bytes resource_meta = 2;
inline void DeleteTaskRequest::clear_resource_meta() {
  resource_meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteTaskRequest::resource_meta() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.DeleteTaskRequest.resource_meta)
  return resource_meta_.GetNoArena();
}
inline void DeleteTaskRequest::set_resource_meta(const ::std::string& value) {
  
  resource_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.DeleteTaskRequest.resource_meta)
}
#if LANG_CXX11
inline void DeleteTaskRequest::set_resource_meta(::std::string&& value) {
  
  resource_meta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.DeleteTaskRequest.resource_meta)
}
#endif
inline void DeleteTaskRequest::set_resource_meta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.DeleteTaskRequest.resource_meta)
}
inline void DeleteTaskRequest::set_resource_meta(const void* value, size_t size) {
  
  resource_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.DeleteTaskRequest.resource_meta)
}
inline ::std::string* DeleteTaskRequest::mutable_resource_meta() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.DeleteTaskRequest.resource_meta)
  return resource_meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteTaskRequest::release_resource_meta() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.DeleteTaskRequest.resource_meta)
  
  return resource_meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteTaskRequest::set_allocated_resource_meta(::std::string* resource_meta) {
  if (resource_meta != nullptr) {
    
  } else {
    
  }
  resource_meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_meta);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.DeleteTaskRequest.resource_meta)
}

// -------------------------------------------------------------------

// DeleteTaskResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace nebulaidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::nebulaidl::admin::State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nebulaidl::admin::State>() {
  return ::nebulaidl::admin::State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_nebulaidl_2fadmin_2fagent_2eproto
