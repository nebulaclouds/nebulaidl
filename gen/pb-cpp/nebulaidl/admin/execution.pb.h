// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulaidl/admin/execution.proto

#ifndef PROTOBUF_INCLUDED_nebulaidl_2fadmin_2fexecution_2eproto
#define PROTOBUF_INCLUDED_nebulaidl_2fadmin_2fexecution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nebulaidl/admin/cluster_assignment.pb.h"
#include "nebulaidl/admin/common.pb.h"
#include "nebulaidl/core/literals.pb.h"
#include "nebulaidl/core/execution.pb.h"
#include "nebulaidl/core/identifier.pb.h"
#include "nebulaidl/core/metrics.pb.h"
#include "nebulaidl/core/security.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fexecution_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_nebulaidl_2fadmin_2fexecution_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_nebulaidl_2fadmin_2fexecution_2eproto();
namespace nebulaidl {
namespace admin {
class AbortMetadata;
class AbortMetadataDefaultTypeInternal;
extern AbortMetadataDefaultTypeInternal _AbortMetadata_default_instance_;
class Execution;
class ExecutionDefaultTypeInternal;
extern ExecutionDefaultTypeInternal _Execution_default_instance_;
class ExecutionClosure;
class ExecutionClosureDefaultTypeInternal;
extern ExecutionClosureDefaultTypeInternal _ExecutionClosure_default_instance_;
class ExecutionCreateRequest;
class ExecutionCreateRequestDefaultTypeInternal;
extern ExecutionCreateRequestDefaultTypeInternal _ExecutionCreateRequest_default_instance_;
class ExecutionCreateResponse;
class ExecutionCreateResponseDefaultTypeInternal;
extern ExecutionCreateResponseDefaultTypeInternal _ExecutionCreateResponse_default_instance_;
class ExecutionList;
class ExecutionListDefaultTypeInternal;
extern ExecutionListDefaultTypeInternal _ExecutionList_default_instance_;
class ExecutionMetadata;
class ExecutionMetadataDefaultTypeInternal;
extern ExecutionMetadataDefaultTypeInternal _ExecutionMetadata_default_instance_;
class ExecutionRecoverRequest;
class ExecutionRecoverRequestDefaultTypeInternal;
extern ExecutionRecoverRequestDefaultTypeInternal _ExecutionRecoverRequest_default_instance_;
class ExecutionRelaunchRequest;
class ExecutionRelaunchRequestDefaultTypeInternal;
extern ExecutionRelaunchRequestDefaultTypeInternal _ExecutionRelaunchRequest_default_instance_;
class ExecutionSpec;
class ExecutionSpecDefaultTypeInternal;
extern ExecutionSpecDefaultTypeInternal _ExecutionSpec_default_instance_;
class ExecutionStateChangeDetails;
class ExecutionStateChangeDetailsDefaultTypeInternal;
extern ExecutionStateChangeDetailsDefaultTypeInternal _ExecutionStateChangeDetails_default_instance_;
class ExecutionTerminateRequest;
class ExecutionTerminateRequestDefaultTypeInternal;
extern ExecutionTerminateRequestDefaultTypeInternal _ExecutionTerminateRequest_default_instance_;
class ExecutionTerminateResponse;
class ExecutionTerminateResponseDefaultTypeInternal;
extern ExecutionTerminateResponseDefaultTypeInternal _ExecutionTerminateResponse_default_instance_;
class ExecutionUpdateRequest;
class ExecutionUpdateRequestDefaultTypeInternal;
extern ExecutionUpdateRequestDefaultTypeInternal _ExecutionUpdateRequest_default_instance_;
class ExecutionUpdateResponse;
class ExecutionUpdateResponseDefaultTypeInternal;
extern ExecutionUpdateResponseDefaultTypeInternal _ExecutionUpdateResponse_default_instance_;
class LiteralMapBlob;
class LiteralMapBlobDefaultTypeInternal;
extern LiteralMapBlobDefaultTypeInternal _LiteralMapBlob_default_instance_;
class NotificationList;
class NotificationListDefaultTypeInternal;
extern NotificationListDefaultTypeInternal _NotificationList_default_instance_;
class SystemMetadata;
class SystemMetadataDefaultTypeInternal;
extern SystemMetadataDefaultTypeInternal _SystemMetadata_default_instance_;
class WorkflowExecutionGetDataRequest;
class WorkflowExecutionGetDataRequestDefaultTypeInternal;
extern WorkflowExecutionGetDataRequestDefaultTypeInternal _WorkflowExecutionGetDataRequest_default_instance_;
class WorkflowExecutionGetDataResponse;
class WorkflowExecutionGetDataResponseDefaultTypeInternal;
extern WorkflowExecutionGetDataResponseDefaultTypeInternal _WorkflowExecutionGetDataResponse_default_instance_;
class WorkflowExecutionGetMetricsRequest;
class WorkflowExecutionGetMetricsRequestDefaultTypeInternal;
extern WorkflowExecutionGetMetricsRequestDefaultTypeInternal _WorkflowExecutionGetMetricsRequest_default_instance_;
class WorkflowExecutionGetMetricsResponse;
class WorkflowExecutionGetMetricsResponseDefaultTypeInternal;
extern WorkflowExecutionGetMetricsResponseDefaultTypeInternal _WorkflowExecutionGetMetricsResponse_default_instance_;
class WorkflowExecutionGetRequest;
class WorkflowExecutionGetRequestDefaultTypeInternal;
extern WorkflowExecutionGetRequestDefaultTypeInternal _WorkflowExecutionGetRequest_default_instance_;
}  // namespace admin
}  // namespace nebulaidl
namespace google {
namespace protobuf {
template<> ::nebulaidl::admin::AbortMetadata* Arena::CreateMaybeMessage<::nebulaidl::admin::AbortMetadata>(Arena*);
template<> ::nebulaidl::admin::Execution* Arena::CreateMaybeMessage<::nebulaidl::admin::Execution>(Arena*);
template<> ::nebulaidl::admin::ExecutionClosure* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionClosure>(Arena*);
template<> ::nebulaidl::admin::ExecutionCreateRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionCreateRequest>(Arena*);
template<> ::nebulaidl::admin::ExecutionCreateResponse* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionCreateResponse>(Arena*);
template<> ::nebulaidl::admin::ExecutionList* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionList>(Arena*);
template<> ::nebulaidl::admin::ExecutionMetadata* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionMetadata>(Arena*);
template<> ::nebulaidl::admin::ExecutionRecoverRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionRecoverRequest>(Arena*);
template<> ::nebulaidl::admin::ExecutionRelaunchRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionRelaunchRequest>(Arena*);
template<> ::nebulaidl::admin::ExecutionSpec* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionSpec>(Arena*);
template<> ::nebulaidl::admin::ExecutionStateChangeDetails* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionStateChangeDetails>(Arena*);
template<> ::nebulaidl::admin::ExecutionTerminateRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionTerminateRequest>(Arena*);
template<> ::nebulaidl::admin::ExecutionTerminateResponse* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionTerminateResponse>(Arena*);
template<> ::nebulaidl::admin::ExecutionUpdateRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionUpdateRequest>(Arena*);
template<> ::nebulaidl::admin::ExecutionUpdateResponse* Arena::CreateMaybeMessage<::nebulaidl::admin::ExecutionUpdateResponse>(Arena*);
template<> ::nebulaidl::admin::LiteralMapBlob* Arena::CreateMaybeMessage<::nebulaidl::admin::LiteralMapBlob>(Arena*);
template<> ::nebulaidl::admin::NotificationList* Arena::CreateMaybeMessage<::nebulaidl::admin::NotificationList>(Arena*);
template<> ::nebulaidl::admin::SystemMetadata* Arena::CreateMaybeMessage<::nebulaidl::admin::SystemMetadata>(Arena*);
template<> ::nebulaidl::admin::WorkflowExecutionGetDataRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::WorkflowExecutionGetDataRequest>(Arena*);
template<> ::nebulaidl::admin::WorkflowExecutionGetDataResponse* Arena::CreateMaybeMessage<::nebulaidl::admin::WorkflowExecutionGetDataResponse>(Arena*);
template<> ::nebulaidl::admin::WorkflowExecutionGetMetricsRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::WorkflowExecutionGetMetricsRequest>(Arena*);
template<> ::nebulaidl::admin::WorkflowExecutionGetMetricsResponse* Arena::CreateMaybeMessage<::nebulaidl::admin::WorkflowExecutionGetMetricsResponse>(Arena*);
template<> ::nebulaidl::admin::WorkflowExecutionGetRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::WorkflowExecutionGetRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace nebulaidl {
namespace admin {

enum ExecutionMetadata_ExecutionMode {
  ExecutionMetadata_ExecutionMode_MANUAL = 0,
  ExecutionMetadata_ExecutionMode_SCHEDULED = 1,
  ExecutionMetadata_ExecutionMode_SYSTEM = 2,
  ExecutionMetadata_ExecutionMode_RELAUNCH = 3,
  ExecutionMetadata_ExecutionMode_CHILD_WORKFLOW = 4,
  ExecutionMetadata_ExecutionMode_RECOVERED = 5,
  ExecutionMetadata_ExecutionMode_ExecutionMetadata_ExecutionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ExecutionMetadata_ExecutionMode_ExecutionMetadata_ExecutionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ExecutionMetadata_ExecutionMode_IsValid(int value);
const ExecutionMetadata_ExecutionMode ExecutionMetadata_ExecutionMode_ExecutionMode_MIN = ExecutionMetadata_ExecutionMode_MANUAL;
const ExecutionMetadata_ExecutionMode ExecutionMetadata_ExecutionMode_ExecutionMode_MAX = ExecutionMetadata_ExecutionMode_RECOVERED;
const int ExecutionMetadata_ExecutionMode_ExecutionMode_ARRAYSIZE = ExecutionMetadata_ExecutionMode_ExecutionMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExecutionMetadata_ExecutionMode_descriptor();
inline const ::std::string& ExecutionMetadata_ExecutionMode_Name(ExecutionMetadata_ExecutionMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExecutionMetadata_ExecutionMode_descriptor(), value);
}
inline bool ExecutionMetadata_ExecutionMode_Parse(
    const ::std::string& name, ExecutionMetadata_ExecutionMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionMetadata_ExecutionMode>(
    ExecutionMetadata_ExecutionMode_descriptor(), name, value);
}
enum ExecutionState {
  EXECUTION_ACTIVE = 0,
  EXECUTION_ARCHIVED = 1,
  ExecutionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ExecutionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ExecutionState_IsValid(int value);
const ExecutionState ExecutionState_MIN = EXECUTION_ACTIVE;
const ExecutionState ExecutionState_MAX = EXECUTION_ARCHIVED;
const int ExecutionState_ARRAYSIZE = ExecutionState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExecutionState_descriptor();
inline const ::std::string& ExecutionState_Name(ExecutionState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExecutionState_descriptor(), value);
}
inline bool ExecutionState_Parse(
    const ::std::string& name, ExecutionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionState>(
    ExecutionState_descriptor(), name, value);
}
// ===================================================================

class ExecutionCreateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionCreateRequest) */ {
 public:
  ExecutionCreateRequest();
  virtual ~ExecutionCreateRequest();

  ExecutionCreateRequest(const ExecutionCreateRequest& from);

  inline ExecutionCreateRequest& operator=(const ExecutionCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionCreateRequest(ExecutionCreateRequest&& from) noexcept
    : ExecutionCreateRequest() {
    *this = ::std::move(from);
  }

  inline ExecutionCreateRequest& operator=(ExecutionCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionCreateRequest* internal_default_instance() {
    return reinterpret_cast<const ExecutionCreateRequest*>(
               &_ExecutionCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ExecutionCreateRequest* other);
  friend void swap(ExecutionCreateRequest& a, ExecutionCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionCreateRequest* New() const final {
    return CreateMaybeMessage<ExecutionCreateRequest>(nullptr);
  }

  ExecutionCreateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionCreateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionCreateRequest& from);
  void MergeFrom(const ExecutionCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .nebulaidl.admin.ExecutionSpec spec = 4;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 4;
  const ::nebulaidl::admin::ExecutionSpec& spec() const;
  ::nebulaidl::admin::ExecutionSpec* release_spec();
  ::nebulaidl::admin::ExecutionSpec* mutable_spec();
  void set_allocated_spec(::nebulaidl::admin::ExecutionSpec* spec);

  // .nebulaidl.core.LiteralMap inputs = 5;
  bool has_inputs() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 5;
  const ::nebulaidl::core::LiteralMap& inputs() const;
  ::nebulaidl::core::LiteralMap* release_inputs();
  ::nebulaidl::core::LiteralMap* mutable_inputs();
  void set_allocated_inputs(::nebulaidl::core::LiteralMap* inputs);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionCreateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::nebulaidl::admin::ExecutionSpec* spec_;
  ::nebulaidl::core::LiteralMap* inputs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionRelaunchRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionRelaunchRequest) */ {
 public:
  ExecutionRelaunchRequest();
  virtual ~ExecutionRelaunchRequest();

  ExecutionRelaunchRequest(const ExecutionRelaunchRequest& from);

  inline ExecutionRelaunchRequest& operator=(const ExecutionRelaunchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionRelaunchRequest(ExecutionRelaunchRequest&& from) noexcept
    : ExecutionRelaunchRequest() {
    *this = ::std::move(from);
  }

  inline ExecutionRelaunchRequest& operator=(ExecutionRelaunchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionRelaunchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionRelaunchRequest* internal_default_instance() {
    return reinterpret_cast<const ExecutionRelaunchRequest*>(
               &_ExecutionRelaunchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ExecutionRelaunchRequest* other);
  friend void swap(ExecutionRelaunchRequest& a, ExecutionRelaunchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionRelaunchRequest* New() const final {
    return CreateMaybeMessage<ExecutionRelaunchRequest>(nullptr);
  }

  ExecutionRelaunchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionRelaunchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionRelaunchRequest& from);
  void MergeFrom(const ExecutionRelaunchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionRelaunchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& id() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_id();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id);

  // bool overwrite_cache = 4;
  void clear_overwrite_cache();
  static const int kOverwriteCacheFieldNumber = 4;
  bool overwrite_cache() const;
  void set_overwrite_cache(bool value);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionRelaunchRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* id_;
  bool overwrite_cache_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionRecoverRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionRecoverRequest) */ {
 public:
  ExecutionRecoverRequest();
  virtual ~ExecutionRecoverRequest();

  ExecutionRecoverRequest(const ExecutionRecoverRequest& from);

  inline ExecutionRecoverRequest& operator=(const ExecutionRecoverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionRecoverRequest(ExecutionRecoverRequest&& from) noexcept
    : ExecutionRecoverRequest() {
    *this = ::std::move(from);
  }

  inline ExecutionRecoverRequest& operator=(ExecutionRecoverRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionRecoverRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionRecoverRequest* internal_default_instance() {
    return reinterpret_cast<const ExecutionRecoverRequest*>(
               &_ExecutionRecoverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ExecutionRecoverRequest* other);
  friend void swap(ExecutionRecoverRequest& a, ExecutionRecoverRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionRecoverRequest* New() const final {
    return CreateMaybeMessage<ExecutionRecoverRequest>(nullptr);
  }

  ExecutionRecoverRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionRecoverRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionRecoverRequest& from);
  void MergeFrom(const ExecutionRecoverRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionRecoverRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& id() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_id();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id);

  // .nebulaidl.admin.ExecutionMetadata metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::nebulaidl::admin::ExecutionMetadata& metadata() const;
  ::nebulaidl::admin::ExecutionMetadata* release_metadata();
  ::nebulaidl::admin::ExecutionMetadata* mutable_metadata();
  void set_allocated_metadata(::nebulaidl::admin::ExecutionMetadata* metadata);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionRecoverRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* id_;
  ::nebulaidl::admin::ExecutionMetadata* metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionCreateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionCreateResponse) */ {
 public:
  ExecutionCreateResponse();
  virtual ~ExecutionCreateResponse();

  ExecutionCreateResponse(const ExecutionCreateResponse& from);

  inline ExecutionCreateResponse& operator=(const ExecutionCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionCreateResponse(ExecutionCreateResponse&& from) noexcept
    : ExecutionCreateResponse() {
    *this = ::std::move(from);
  }

  inline ExecutionCreateResponse& operator=(ExecutionCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionCreateResponse* internal_default_instance() {
    return reinterpret_cast<const ExecutionCreateResponse*>(
               &_ExecutionCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ExecutionCreateResponse* other);
  friend void swap(ExecutionCreateResponse& a, ExecutionCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionCreateResponse* New() const final {
    return CreateMaybeMessage<ExecutionCreateResponse>(nullptr);
  }

  ExecutionCreateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionCreateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionCreateResponse& from);
  void MergeFrom(const ExecutionCreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& id() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_id();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionCreateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class WorkflowExecutionGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.WorkflowExecutionGetRequest) */ {
 public:
  WorkflowExecutionGetRequest();
  virtual ~WorkflowExecutionGetRequest();

  WorkflowExecutionGetRequest(const WorkflowExecutionGetRequest& from);

  inline WorkflowExecutionGetRequest& operator=(const WorkflowExecutionGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionGetRequest(WorkflowExecutionGetRequest&& from) noexcept
    : WorkflowExecutionGetRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionGetRequest& operator=(WorkflowExecutionGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowExecutionGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionGetRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionGetRequest*>(
               &_WorkflowExecutionGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(WorkflowExecutionGetRequest* other);
  friend void swap(WorkflowExecutionGetRequest& a, WorkflowExecutionGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionGetRequest* New() const final {
    return CreateMaybeMessage<WorkflowExecutionGetRequest>(nullptr);
  }

  WorkflowExecutionGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowExecutionGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowExecutionGetRequest& from);
  void MergeFrom(const WorkflowExecutionGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecutionGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& id() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_id();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.WorkflowExecutionGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class Execution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.Execution) */ {
 public:
  Execution();
  virtual ~Execution();

  Execution(const Execution& from);

  inline Execution& operator=(const Execution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Execution(Execution&& from) noexcept
    : Execution() {
    *this = ::std::move(from);
  }

  inline Execution& operator=(Execution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Execution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Execution* internal_default_instance() {
    return reinterpret_cast<const Execution*>(
               &_Execution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Execution* other);
  friend void swap(Execution& a, Execution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Execution* New() const final {
    return CreateMaybeMessage<Execution>(nullptr);
  }

  Execution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Execution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Execution& from);
  void MergeFrom(const Execution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Execution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& id() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_id();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id);

  // .nebulaidl.admin.ExecutionSpec spec = 2;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 2;
  const ::nebulaidl::admin::ExecutionSpec& spec() const;
  ::nebulaidl::admin::ExecutionSpec* release_spec();
  ::nebulaidl::admin::ExecutionSpec* mutable_spec();
  void set_allocated_spec(::nebulaidl::admin::ExecutionSpec* spec);

  // .nebulaidl.admin.ExecutionClosure closure = 3;
  bool has_closure() const;
  void clear_closure();
  static const int kClosureFieldNumber = 3;
  const ::nebulaidl::admin::ExecutionClosure& closure() const;
  ::nebulaidl::admin::ExecutionClosure* release_closure();
  ::nebulaidl::admin::ExecutionClosure* mutable_closure();
  void set_allocated_closure(::nebulaidl::admin::ExecutionClosure* closure);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.Execution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* id_;
  ::nebulaidl::admin::ExecutionSpec* spec_;
  ::nebulaidl::admin::ExecutionClosure* closure_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionList) */ {
 public:
  ExecutionList();
  virtual ~ExecutionList();

  ExecutionList(const ExecutionList& from);

  inline ExecutionList& operator=(const ExecutionList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionList(ExecutionList&& from) noexcept
    : ExecutionList() {
    *this = ::std::move(from);
  }

  inline ExecutionList& operator=(ExecutionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionList* internal_default_instance() {
    return reinterpret_cast<const ExecutionList*>(
               &_ExecutionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ExecutionList* other);
  friend void swap(ExecutionList& a, ExecutionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionList* New() const final {
    return CreateMaybeMessage<ExecutionList>(nullptr);
  }

  ExecutionList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionList& from);
  void MergeFrom(const ExecutionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulaidl.admin.Execution executions = 1;
  int executions_size() const;
  void clear_executions();
  static const int kExecutionsFieldNumber = 1;
  ::nebulaidl::admin::Execution* mutable_executions(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Execution >*
      mutable_executions();
  const ::nebulaidl::admin::Execution& executions(int index) const;
  ::nebulaidl::admin::Execution* add_executions();
  const ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Execution >&
      executions() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Execution > executions_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class LiteralMapBlob final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.LiteralMapBlob) */ {
 public:
  LiteralMapBlob();
  virtual ~LiteralMapBlob();

  LiteralMapBlob(const LiteralMapBlob& from);

  inline LiteralMapBlob& operator=(const LiteralMapBlob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiteralMapBlob(LiteralMapBlob&& from) noexcept
    : LiteralMapBlob() {
    *this = ::std::move(from);
  }

  inline LiteralMapBlob& operator=(LiteralMapBlob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiteralMapBlob& default_instance();

  enum DataCase {
    kValues = 1,
    kUri = 2,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiteralMapBlob* internal_default_instance() {
    return reinterpret_cast<const LiteralMapBlob*>(
               &_LiteralMapBlob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LiteralMapBlob* other);
  friend void swap(LiteralMapBlob& a, LiteralMapBlob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiteralMapBlob* New() const final {
    return CreateMaybeMessage<LiteralMapBlob>(nullptr);
  }

  LiteralMapBlob* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiteralMapBlob>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiteralMapBlob& from);
  void MergeFrom(const LiteralMapBlob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiteralMapBlob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.LiteralMap values = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_values() const;
  PROTOBUF_DEPRECATED void clear_values();
  PROTOBUF_DEPRECATED static const int kValuesFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::nebulaidl::core::LiteralMap& values() const;
  PROTOBUF_DEPRECATED ::nebulaidl::core::LiteralMap* release_values();
  PROTOBUF_DEPRECATED ::nebulaidl::core::LiteralMap* mutable_values();
  PROTOBUF_DEPRECATED void set_allocated_values(::nebulaidl::core::LiteralMap* values);

  // string uri = 2;
  private:
  bool has_uri() const;
  public:
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:nebulaidl.admin.LiteralMapBlob)
 private:
  class HasBitSetters;
  void set_has_values();
  void set_has_uri();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::nebulaidl::core::LiteralMap* values_;
    ::google::protobuf::internal::ArenaStringPtr uri_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class AbortMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.AbortMetadata) */ {
 public:
  AbortMetadata();
  virtual ~AbortMetadata();

  AbortMetadata(const AbortMetadata& from);

  inline AbortMetadata& operator=(const AbortMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AbortMetadata(AbortMetadata&& from) noexcept
    : AbortMetadata() {
    *this = ::std::move(from);
  }

  inline AbortMetadata& operator=(AbortMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AbortMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbortMetadata* internal_default_instance() {
    return reinterpret_cast<const AbortMetadata*>(
               &_AbortMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AbortMetadata* other);
  friend void swap(AbortMetadata& a, AbortMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AbortMetadata* New() const final {
    return CreateMaybeMessage<AbortMetadata>(nullptr);
  }

  AbortMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AbortMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AbortMetadata& from);
  void MergeFrom(const AbortMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbortMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cause = 1;
  void clear_cause();
  static const int kCauseFieldNumber = 1;
  const ::std::string& cause() const;
  void set_cause(const ::std::string& value);
  #if LANG_CXX11
  void set_cause(::std::string&& value);
  #endif
  void set_cause(const char* value);
  void set_cause(const char* value, size_t size);
  ::std::string* mutable_cause();
  ::std::string* release_cause();
  void set_allocated_cause(::std::string* cause);

  // string principal = 2;
  void clear_principal();
  static const int kPrincipalFieldNumber = 2;
  const ::std::string& principal() const;
  void set_principal(const ::std::string& value);
  #if LANG_CXX11
  void set_principal(::std::string&& value);
  #endif
  void set_principal(const char* value);
  void set_principal(const char* value, size_t size);
  ::std::string* mutable_principal();
  ::std::string* release_principal();
  void set_allocated_principal(::std::string* principal);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.AbortMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cause_;
  ::google::protobuf::internal::ArenaStringPtr principal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionClosure final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionClosure) */ {
 public:
  ExecutionClosure();
  virtual ~ExecutionClosure();

  ExecutionClosure(const ExecutionClosure& from);

  inline ExecutionClosure& operator=(const ExecutionClosure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionClosure(ExecutionClosure&& from) noexcept
    : ExecutionClosure() {
    *this = ::std::move(from);
  }

  inline ExecutionClosure& operator=(ExecutionClosure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionClosure& default_instance();

  enum OutputResultCase {
    kOutputs = 1,
    kError = 2,
    kAbortCause = 10,
    kAbortMetadata = 12,
    kOutputData = 13,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionClosure* internal_default_instance() {
    return reinterpret_cast<const ExecutionClosure*>(
               &_ExecutionClosure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ExecutionClosure* other);
  friend void swap(ExecutionClosure& a, ExecutionClosure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionClosure* New() const final {
    return CreateMaybeMessage<ExecutionClosure>(nullptr);
  }

  ExecutionClosure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionClosure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionClosure& from);
  void MergeFrom(const ExecutionClosure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionClosure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulaidl.admin.Notification notifications = 9;
  int notifications_size() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 9;
  ::nebulaidl::admin::Notification* mutable_notifications(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Notification >*
      mutable_notifications();
  const ::nebulaidl::admin::Notification& notifications(int index) const;
  ::nebulaidl::admin::Notification* add_notifications();
  const ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Notification >&
      notifications() const;

  // .nebulaidl.core.LiteralMap computed_inputs = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_computed_inputs() const;
  PROTOBUF_DEPRECATED void clear_computed_inputs();
  PROTOBUF_DEPRECATED static const int kComputedInputsFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::nebulaidl::core::LiteralMap& computed_inputs() const;
  PROTOBUF_DEPRECATED ::nebulaidl::core::LiteralMap* release_computed_inputs();
  PROTOBUF_DEPRECATED ::nebulaidl::core::LiteralMap* mutable_computed_inputs();
  PROTOBUF_DEPRECATED void set_allocated_computed_inputs(::nebulaidl::core::LiteralMap* computed_inputs);

  // .google.protobuf.Timestamp started_at = 5;
  bool has_started_at() const;
  void clear_started_at();
  static const int kStartedAtFieldNumber = 5;
  const ::google::protobuf::Timestamp& started_at() const;
  ::google::protobuf::Timestamp* release_started_at();
  ::google::protobuf::Timestamp* mutable_started_at();
  void set_allocated_started_at(::google::protobuf::Timestamp* started_at);

  // .google.protobuf.Duration duration = 6;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 6;
  const ::google::protobuf::Duration& duration() const;
  ::google::protobuf::Duration* release_duration();
  ::google::protobuf::Duration* mutable_duration();
  void set_allocated_duration(::google::protobuf::Duration* duration);

  // .google.protobuf.Timestamp created_at = 7;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 7;
  const ::google::protobuf::Timestamp& created_at() const;
  ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* created_at);

  // .google.protobuf.Timestamp updated_at = 8;
  bool has_updated_at() const;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 8;
  const ::google::protobuf::Timestamp& updated_at() const;
  ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* updated_at);

  // .nebulaidl.core.Identifier workflow_id = 11;
  bool has_workflow_id() const;
  void clear_workflow_id();
  static const int kWorkflowIdFieldNumber = 11;
  const ::nebulaidl::core::Identifier& workflow_id() const;
  ::nebulaidl::core::Identifier* release_workflow_id();
  ::nebulaidl::core::Identifier* mutable_workflow_id();
  void set_allocated_workflow_id(::nebulaidl::core::Identifier* workflow_id);

  // .nebulaidl.admin.ExecutionStateChangeDetails state_change_details = 14;
  bool has_state_change_details() const;
  void clear_state_change_details();
  static const int kStateChangeDetailsFieldNumber = 14;
  const ::nebulaidl::admin::ExecutionStateChangeDetails& state_change_details() const;
  ::nebulaidl::admin::ExecutionStateChangeDetails* release_state_change_details();
  ::nebulaidl::admin::ExecutionStateChangeDetails* mutable_state_change_details();
  void set_allocated_state_change_details(::nebulaidl::admin::ExecutionStateChangeDetails* state_change_details);

  // .nebulaidl.core.WorkflowExecution.Phase phase = 4;
  void clear_phase();
  static const int kPhaseFieldNumber = 4;
  ::nebulaidl::core::WorkflowExecution_Phase phase() const;
  void set_phase(::nebulaidl::core::WorkflowExecution_Phase value);

  // .nebulaidl.admin.LiteralMapBlob outputs = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_outputs() const;
  PROTOBUF_DEPRECATED void clear_outputs();
  PROTOBUF_DEPRECATED static const int kOutputsFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::nebulaidl::admin::LiteralMapBlob& outputs() const;
  PROTOBUF_DEPRECATED ::nebulaidl::admin::LiteralMapBlob* release_outputs();
  PROTOBUF_DEPRECATED ::nebulaidl::admin::LiteralMapBlob* mutable_outputs();
  PROTOBUF_DEPRECATED void set_allocated_outputs(::nebulaidl::admin::LiteralMapBlob* outputs);

  // .nebulaidl.core.ExecutionError error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::nebulaidl::core::ExecutionError& error() const;
  ::nebulaidl::core::ExecutionError* release_error();
  ::nebulaidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::nebulaidl::core::ExecutionError* error);

  // string abort_cause = 10 [deprecated = true];
  private:
  bool has_abort_cause() const;
  public:
  PROTOBUF_DEPRECATED void clear_abort_cause();
  PROTOBUF_DEPRECATED static const int kAbortCauseFieldNumber = 10;
  PROTOBUF_DEPRECATED const ::std::string& abort_cause() const;
  PROTOBUF_DEPRECATED void set_abort_cause(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_abort_cause(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_abort_cause(const char* value);
  PROTOBUF_DEPRECATED void set_abort_cause(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_abort_cause();
  PROTOBUF_DEPRECATED ::std::string* release_abort_cause();
  PROTOBUF_DEPRECATED void set_allocated_abort_cause(::std::string* abort_cause);

  // .nebulaidl.admin.AbortMetadata abort_metadata = 12;
  bool has_abort_metadata() const;
  void clear_abort_metadata();
  static const int kAbortMetadataFieldNumber = 12;
  const ::nebulaidl::admin::AbortMetadata& abort_metadata() const;
  ::nebulaidl::admin::AbortMetadata* release_abort_metadata();
  ::nebulaidl::admin::AbortMetadata* mutable_abort_metadata();
  void set_allocated_abort_metadata(::nebulaidl::admin::AbortMetadata* abort_metadata);

  // .nebulaidl.core.LiteralMap output_data = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_output_data() const;
  PROTOBUF_DEPRECATED void clear_output_data();
  PROTOBUF_DEPRECATED static const int kOutputDataFieldNumber = 13;
  PROTOBUF_DEPRECATED const ::nebulaidl::core::LiteralMap& output_data() const;
  PROTOBUF_DEPRECATED ::nebulaidl::core::LiteralMap* release_output_data();
  PROTOBUF_DEPRECATED ::nebulaidl::core::LiteralMap* mutable_output_data();
  PROTOBUF_DEPRECATED void set_allocated_output_data(::nebulaidl::core::LiteralMap* output_data);

  void clear_output_result();
  OutputResultCase output_result_case() const;
  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionClosure)
 private:
  class HasBitSetters;
  void set_has_outputs();
  void set_has_error();
  void set_has_abort_cause();
  void set_has_abort_metadata();
  void set_has_output_data();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Notification > notifications_;
  ::nebulaidl::core::LiteralMap* computed_inputs_;
  ::google::protobuf::Timestamp* started_at_;
  ::google::protobuf::Duration* duration_;
  ::google::protobuf::Timestamp* created_at_;
  ::google::protobuf::Timestamp* updated_at_;
  ::nebulaidl::core::Identifier* workflow_id_;
  ::nebulaidl::admin::ExecutionStateChangeDetails* state_change_details_;
  int phase_;
  union OutputResultUnion {
    OutputResultUnion() {}
    ::nebulaidl::admin::LiteralMapBlob* outputs_;
    ::nebulaidl::core::ExecutionError* error_;
    ::google::protobuf::internal::ArenaStringPtr abort_cause_;
    ::nebulaidl::admin::AbortMetadata* abort_metadata_;
    ::nebulaidl::core::LiteralMap* output_data_;
  } output_result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class SystemMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.SystemMetadata) */ {
 public:
  SystemMetadata();
  virtual ~SystemMetadata();

  SystemMetadata(const SystemMetadata& from);

  inline SystemMetadata& operator=(const SystemMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemMetadata(SystemMetadata&& from) noexcept
    : SystemMetadata() {
    *this = ::std::move(from);
  }

  inline SystemMetadata& operator=(SystemMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SystemMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemMetadata* internal_default_instance() {
    return reinterpret_cast<const SystemMetadata*>(
               &_SystemMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SystemMetadata* other);
  friend void swap(SystemMetadata& a, SystemMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemMetadata* New() const final {
    return CreateMaybeMessage<SystemMetadata>(nullptr);
  }

  SystemMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemMetadata& from);
  void MergeFrom(const SystemMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string execution_cluster = 1;
  void clear_execution_cluster();
  static const int kExecutionClusterFieldNumber = 1;
  const ::std::string& execution_cluster() const;
  void set_execution_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_execution_cluster(::std::string&& value);
  #endif
  void set_execution_cluster(const char* value);
  void set_execution_cluster(const char* value, size_t size);
  ::std::string* mutable_execution_cluster();
  ::std::string* release_execution_cluster();
  void set_allocated_execution_cluster(::std::string* execution_cluster);

  // string namespace = 2;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 2;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.SystemMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr execution_cluster_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionMetadata) */ {
 public:
  ExecutionMetadata();
  virtual ~ExecutionMetadata();

  ExecutionMetadata(const ExecutionMetadata& from);

  inline ExecutionMetadata& operator=(const ExecutionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionMetadata(ExecutionMetadata&& from) noexcept
    : ExecutionMetadata() {
    *this = ::std::move(from);
  }

  inline ExecutionMetadata& operator=(ExecutionMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionMetadata* internal_default_instance() {
    return reinterpret_cast<const ExecutionMetadata*>(
               &_ExecutionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ExecutionMetadata* other);
  friend void swap(ExecutionMetadata& a, ExecutionMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionMetadata* New() const final {
    return CreateMaybeMessage<ExecutionMetadata>(nullptr);
  }

  ExecutionMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionMetadata& from);
  void MergeFrom(const ExecutionMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExecutionMetadata_ExecutionMode ExecutionMode;
  static const ExecutionMode MANUAL =
    ExecutionMetadata_ExecutionMode_MANUAL;
  static const ExecutionMode SCHEDULED =
    ExecutionMetadata_ExecutionMode_SCHEDULED;
  static const ExecutionMode SYSTEM =
    ExecutionMetadata_ExecutionMode_SYSTEM;
  static const ExecutionMode RELAUNCH =
    ExecutionMetadata_ExecutionMode_RELAUNCH;
  static const ExecutionMode CHILD_WORKFLOW =
    ExecutionMetadata_ExecutionMode_CHILD_WORKFLOW;
  static const ExecutionMode RECOVERED =
    ExecutionMetadata_ExecutionMode_RECOVERED;
  static inline bool ExecutionMode_IsValid(int value) {
    return ExecutionMetadata_ExecutionMode_IsValid(value);
  }
  static const ExecutionMode ExecutionMode_MIN =
    ExecutionMetadata_ExecutionMode_ExecutionMode_MIN;
  static const ExecutionMode ExecutionMode_MAX =
    ExecutionMetadata_ExecutionMode_ExecutionMode_MAX;
  static const int ExecutionMode_ARRAYSIZE =
    ExecutionMetadata_ExecutionMode_ExecutionMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ExecutionMode_descriptor() {
    return ExecutionMetadata_ExecutionMode_descriptor();
  }
  static inline const ::std::string& ExecutionMode_Name(ExecutionMode value) {
    return ExecutionMetadata_ExecutionMode_Name(value);
  }
  static inline bool ExecutionMode_Parse(const ::std::string& name,
      ExecutionMode* value) {
    return ExecutionMetadata_ExecutionMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string principal = 2;
  void clear_principal();
  static const int kPrincipalFieldNumber = 2;
  const ::std::string& principal() const;
  void set_principal(const ::std::string& value);
  #if LANG_CXX11
  void set_principal(::std::string&& value);
  #endif
  void set_principal(const char* value);
  void set_principal(const char* value, size_t size);
  ::std::string* mutable_principal();
  ::std::string* release_principal();
  void set_allocated_principal(::std::string* principal);

  // .google.protobuf.Timestamp scheduled_at = 4;
  bool has_scheduled_at() const;
  void clear_scheduled_at();
  static const int kScheduledAtFieldNumber = 4;
  const ::google::protobuf::Timestamp& scheduled_at() const;
  ::google::protobuf::Timestamp* release_scheduled_at();
  ::google::protobuf::Timestamp* mutable_scheduled_at();
  void set_allocated_scheduled_at(::google::protobuf::Timestamp* scheduled_at);

  // .nebulaidl.core.NodeExecutionIdentifier parent_node_execution = 5;
  bool has_parent_node_execution() const;
  void clear_parent_node_execution();
  static const int kParentNodeExecutionFieldNumber = 5;
  const ::nebulaidl::core::NodeExecutionIdentifier& parent_node_execution() const;
  ::nebulaidl::core::NodeExecutionIdentifier* release_parent_node_execution();
  ::nebulaidl::core::NodeExecutionIdentifier* mutable_parent_node_execution();
  void set_allocated_parent_node_execution(::nebulaidl::core::NodeExecutionIdentifier* parent_node_execution);

  // .nebulaidl.core.WorkflowExecutionIdentifier reference_execution = 16;
  bool has_reference_execution() const;
  void clear_reference_execution();
  static const int kReferenceExecutionFieldNumber = 16;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& reference_execution() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_reference_execution();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_reference_execution();
  void set_allocated_reference_execution(::nebulaidl::core::WorkflowExecutionIdentifier* reference_execution);

  // .nebulaidl.admin.SystemMetadata system_metadata = 17;
  bool has_system_metadata() const;
  void clear_system_metadata();
  static const int kSystemMetadataFieldNumber = 17;
  const ::nebulaidl::admin::SystemMetadata& system_metadata() const;
  ::nebulaidl::admin::SystemMetadata* release_system_metadata();
  ::nebulaidl::admin::SystemMetadata* mutable_system_metadata();
  void set_allocated_system_metadata(::nebulaidl::admin::SystemMetadata* system_metadata);

  // .nebulaidl.admin.ExecutionMetadata.ExecutionMode mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::nebulaidl::admin::ExecutionMetadata_ExecutionMode mode() const;
  void set_mode(::nebulaidl::admin::ExecutionMetadata_ExecutionMode value);

  // uint32 nesting = 3;
  void clear_nesting();
  static const int kNestingFieldNumber = 3;
  ::google::protobuf::uint32 nesting() const;
  void set_nesting(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr principal_;
  ::google::protobuf::Timestamp* scheduled_at_;
  ::nebulaidl::core::NodeExecutionIdentifier* parent_node_execution_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* reference_execution_;
  ::nebulaidl::admin::SystemMetadata* system_metadata_;
  int mode_;
  ::google::protobuf::uint32 nesting_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class NotificationList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.NotificationList) */ {
 public:
  NotificationList();
  virtual ~NotificationList();

  NotificationList(const NotificationList& from);

  inline NotificationList& operator=(const NotificationList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotificationList(NotificationList&& from) noexcept
    : NotificationList() {
    *this = ::std::move(from);
  }

  inline NotificationList& operator=(NotificationList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NotificationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationList* internal_default_instance() {
    return reinterpret_cast<const NotificationList*>(
               &_NotificationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(NotificationList* other);
  friend void swap(NotificationList& a, NotificationList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotificationList* New() const final {
    return CreateMaybeMessage<NotificationList>(nullptr);
  }

  NotificationList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotificationList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotificationList& from);
  void MergeFrom(const NotificationList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulaidl.admin.Notification notifications = 1;
  int notifications_size() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 1;
  ::nebulaidl::admin::Notification* mutable_notifications(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Notification >*
      mutable_notifications();
  const ::nebulaidl::admin::Notification& notifications(int index) const;
  ::nebulaidl::admin::Notification* add_notifications();
  const ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Notification >&
      notifications() const;

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.NotificationList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Notification > notifications_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionSpec) */ {
 public:
  ExecutionSpec();
  virtual ~ExecutionSpec();

  ExecutionSpec(const ExecutionSpec& from);

  inline ExecutionSpec& operator=(const ExecutionSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionSpec(ExecutionSpec&& from) noexcept
    : ExecutionSpec() {
    *this = ::std::move(from);
  }

  inline ExecutionSpec& operator=(ExecutionSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionSpec& default_instance();

  enum NotificationOverridesCase {
    kNotifications = 5,
    kDisableAll = 6,
    NOTIFICATION_OVERRIDES_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionSpec* internal_default_instance() {
    return reinterpret_cast<const ExecutionSpec*>(
               &_ExecutionSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ExecutionSpec* other);
  friend void swap(ExecutionSpec& a, ExecutionSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionSpec* New() const final {
    return CreateMaybeMessage<ExecutionSpec>(nullptr);
  }

  ExecutionSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionSpec& from);
  void MergeFrom(const ExecutionSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 24;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 24;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // .nebulaidl.core.Identifier launch_plan = 1;
  bool has_launch_plan() const;
  void clear_launch_plan();
  static const int kLaunchPlanFieldNumber = 1;
  const ::nebulaidl::core::Identifier& launch_plan() const;
  ::nebulaidl::core::Identifier* release_launch_plan();
  ::nebulaidl::core::Identifier* mutable_launch_plan();
  void set_allocated_launch_plan(::nebulaidl::core::Identifier* launch_plan);

  // .nebulaidl.core.LiteralMap inputs = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_inputs() const;
  PROTOBUF_DEPRECATED void clear_inputs();
  PROTOBUF_DEPRECATED static const int kInputsFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::nebulaidl::core::LiteralMap& inputs() const;
  PROTOBUF_DEPRECATED ::nebulaidl::core::LiteralMap* release_inputs();
  PROTOBUF_DEPRECATED ::nebulaidl::core::LiteralMap* mutable_inputs();
  PROTOBUF_DEPRECATED void set_allocated_inputs(::nebulaidl::core::LiteralMap* inputs);

  // .nebulaidl.admin.ExecutionMetadata metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::nebulaidl::admin::ExecutionMetadata& metadata() const;
  ::nebulaidl::admin::ExecutionMetadata* release_metadata();
  ::nebulaidl::admin::ExecutionMetadata* mutable_metadata();
  void set_allocated_metadata(::nebulaidl::admin::ExecutionMetadata* metadata);

  // .nebulaidl.admin.Labels labels = 7;
  bool has_labels() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 7;
  const ::nebulaidl::admin::Labels& labels() const;
  ::nebulaidl::admin::Labels* release_labels();
  ::nebulaidl::admin::Labels* mutable_labels();
  void set_allocated_labels(::nebulaidl::admin::Labels* labels);

  // .nebulaidl.admin.Annotations annotations = 8;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 8;
  const ::nebulaidl::admin::Annotations& annotations() const;
  ::nebulaidl::admin::Annotations* release_annotations();
  ::nebulaidl::admin::Annotations* mutable_annotations();
  void set_allocated_annotations(::nebulaidl::admin::Annotations* annotations);

  // .nebulaidl.core.SecurityContext security_context = 10;
  bool has_security_context() const;
  void clear_security_context();
  static const int kSecurityContextFieldNumber = 10;
  const ::nebulaidl::core::SecurityContext& security_context() const;
  ::nebulaidl::core::SecurityContext* release_security_context();
  ::nebulaidl::core::SecurityContext* mutable_security_context();
  void set_allocated_security_context(::nebulaidl::core::SecurityContext* security_context);

  // .nebulaidl.admin.AuthRole auth_role = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_auth_role() const;
  PROTOBUF_DEPRECATED void clear_auth_role();
  PROTOBUF_DEPRECATED static const int kAuthRoleFieldNumber = 16;
  PROTOBUF_DEPRECATED const ::nebulaidl::admin::AuthRole& auth_role() const;
  PROTOBUF_DEPRECATED ::nebulaidl::admin::AuthRole* release_auth_role();
  PROTOBUF_DEPRECATED ::nebulaidl::admin::AuthRole* mutable_auth_role();
  PROTOBUF_DEPRECATED void set_allocated_auth_role(::nebulaidl::admin::AuthRole* auth_role);

  // .nebulaidl.core.QualityOfService quality_of_service = 17;
  bool has_quality_of_service() const;
  void clear_quality_of_service();
  static const int kQualityOfServiceFieldNumber = 17;
  const ::nebulaidl::core::QualityOfService& quality_of_service() const;
  ::nebulaidl::core::QualityOfService* release_quality_of_service();
  ::nebulaidl::core::QualityOfService* mutable_quality_of_service();
  void set_allocated_quality_of_service(::nebulaidl::core::QualityOfService* quality_of_service);

  // .nebulaidl.admin.RawOutputDataConfig raw_output_data_config = 19;
  bool has_raw_output_data_config() const;
  void clear_raw_output_data_config();
  static const int kRawOutputDataConfigFieldNumber = 19;
  const ::nebulaidl::admin::RawOutputDataConfig& raw_output_data_config() const;
  ::nebulaidl::admin::RawOutputDataConfig* release_raw_output_data_config();
  ::nebulaidl::admin::RawOutputDataConfig* mutable_raw_output_data_config();
  void set_allocated_raw_output_data_config(::nebulaidl::admin::RawOutputDataConfig* raw_output_data_config);

  // .nebulaidl.admin.ClusterAssignment cluster_assignment = 20;
  bool has_cluster_assignment() const;
  void clear_cluster_assignment();
  static const int kClusterAssignmentFieldNumber = 20;
  const ::nebulaidl::admin::ClusterAssignment& cluster_assignment() const;
  ::nebulaidl::admin::ClusterAssignment* release_cluster_assignment();
  ::nebulaidl::admin::ClusterAssignment* mutable_cluster_assignment();
  void set_allocated_cluster_assignment(::nebulaidl::admin::ClusterAssignment* cluster_assignment);

  // .google.protobuf.BoolValue interruptible = 21;
  bool has_interruptible() const;
  void clear_interruptible();
  static const int kInterruptibleFieldNumber = 21;
  const ::google::protobuf::BoolValue& interruptible() const;
  ::google::protobuf::BoolValue* release_interruptible();
  ::google::protobuf::BoolValue* mutable_interruptible();
  void set_allocated_interruptible(::google::protobuf::BoolValue* interruptible);

  // .nebulaidl.admin.Envs envs = 23;
  bool has_envs() const;
  void clear_envs();
  static const int kEnvsFieldNumber = 23;
  const ::nebulaidl::admin::Envs& envs() const;
  ::nebulaidl::admin::Envs* release_envs();
  ::nebulaidl::admin::Envs* mutable_envs();
  void set_allocated_envs(::nebulaidl::admin::Envs* envs);

  // int32 max_parallelism = 18;
  void clear_max_parallelism();
  static const int kMaxParallelismFieldNumber = 18;
  ::google::protobuf::int32 max_parallelism() const;
  void set_max_parallelism(::google::protobuf::int32 value);

  // bool overwrite_cache = 22;
  void clear_overwrite_cache();
  static const int kOverwriteCacheFieldNumber = 22;
  bool overwrite_cache() const;
  void set_overwrite_cache(bool value);

  // .nebulaidl.admin.NotificationList notifications = 5;
  bool has_notifications() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 5;
  const ::nebulaidl::admin::NotificationList& notifications() const;
  ::nebulaidl::admin::NotificationList* release_notifications();
  ::nebulaidl::admin::NotificationList* mutable_notifications();
  void set_allocated_notifications(::nebulaidl::admin::NotificationList* notifications);

  // bool disable_all = 6;
  private:
  bool has_disable_all() const;
  public:
  void clear_disable_all();
  static const int kDisableAllFieldNumber = 6;
  bool disable_all() const;
  void set_disable_all(bool value);

  void clear_notification_overrides();
  NotificationOverridesCase notification_overrides_case() const;
  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionSpec)
 private:
  class HasBitSetters;
  void set_has_notifications();
  void set_has_disable_all();

  inline bool has_notification_overrides() const;
  inline void clear_has_notification_overrides();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::nebulaidl::core::Identifier* launch_plan_;
  ::nebulaidl::core::LiteralMap* inputs_;
  ::nebulaidl::admin::ExecutionMetadata* metadata_;
  ::nebulaidl::admin::Labels* labels_;
  ::nebulaidl::admin::Annotations* annotations_;
  ::nebulaidl::core::SecurityContext* security_context_;
  ::nebulaidl::admin::AuthRole* auth_role_;
  ::nebulaidl::core::QualityOfService* quality_of_service_;
  ::nebulaidl::admin::RawOutputDataConfig* raw_output_data_config_;
  ::nebulaidl::admin::ClusterAssignment* cluster_assignment_;
  ::google::protobuf::BoolValue* interruptible_;
  ::nebulaidl::admin::Envs* envs_;
  ::google::protobuf::int32 max_parallelism_;
  bool overwrite_cache_;
  union NotificationOverridesUnion {
    NotificationOverridesUnion() {}
    ::nebulaidl::admin::NotificationList* notifications_;
    bool disable_all_;
  } notification_overrides_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionTerminateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionTerminateRequest) */ {
 public:
  ExecutionTerminateRequest();
  virtual ~ExecutionTerminateRequest();

  ExecutionTerminateRequest(const ExecutionTerminateRequest& from);

  inline ExecutionTerminateRequest& operator=(const ExecutionTerminateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionTerminateRequest(ExecutionTerminateRequest&& from) noexcept
    : ExecutionTerminateRequest() {
    *this = ::std::move(from);
  }

  inline ExecutionTerminateRequest& operator=(ExecutionTerminateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionTerminateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionTerminateRequest* internal_default_instance() {
    return reinterpret_cast<const ExecutionTerminateRequest*>(
               &_ExecutionTerminateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ExecutionTerminateRequest* other);
  friend void swap(ExecutionTerminateRequest& a, ExecutionTerminateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionTerminateRequest* New() const final {
    return CreateMaybeMessage<ExecutionTerminateRequest>(nullptr);
  }

  ExecutionTerminateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionTerminateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionTerminateRequest& from);
  void MergeFrom(const ExecutionTerminateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionTerminateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cause = 2;
  void clear_cause();
  static const int kCauseFieldNumber = 2;
  const ::std::string& cause() const;
  void set_cause(const ::std::string& value);
  #if LANG_CXX11
  void set_cause(::std::string&& value);
  #endif
  void set_cause(const char* value);
  void set_cause(const char* value, size_t size);
  ::std::string* mutable_cause();
  ::std::string* release_cause();
  void set_allocated_cause(::std::string* cause);

  // .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& id() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_id();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionTerminateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cause_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionTerminateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionTerminateResponse) */ {
 public:
  ExecutionTerminateResponse();
  virtual ~ExecutionTerminateResponse();

  ExecutionTerminateResponse(const ExecutionTerminateResponse& from);

  inline ExecutionTerminateResponse& operator=(const ExecutionTerminateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionTerminateResponse(ExecutionTerminateResponse&& from) noexcept
    : ExecutionTerminateResponse() {
    *this = ::std::move(from);
  }

  inline ExecutionTerminateResponse& operator=(ExecutionTerminateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionTerminateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionTerminateResponse* internal_default_instance() {
    return reinterpret_cast<const ExecutionTerminateResponse*>(
               &_ExecutionTerminateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ExecutionTerminateResponse* other);
  friend void swap(ExecutionTerminateResponse& a, ExecutionTerminateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionTerminateResponse* New() const final {
    return CreateMaybeMessage<ExecutionTerminateResponse>(nullptr);
  }

  ExecutionTerminateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionTerminateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionTerminateResponse& from);
  void MergeFrom(const ExecutionTerminateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionTerminateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionTerminateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class WorkflowExecutionGetDataRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.WorkflowExecutionGetDataRequest) */ {
 public:
  WorkflowExecutionGetDataRequest();
  virtual ~WorkflowExecutionGetDataRequest();

  WorkflowExecutionGetDataRequest(const WorkflowExecutionGetDataRequest& from);

  inline WorkflowExecutionGetDataRequest& operator=(const WorkflowExecutionGetDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionGetDataRequest(WorkflowExecutionGetDataRequest&& from) noexcept
    : WorkflowExecutionGetDataRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionGetDataRequest& operator=(WorkflowExecutionGetDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowExecutionGetDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionGetDataRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionGetDataRequest*>(
               &_WorkflowExecutionGetDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(WorkflowExecutionGetDataRequest* other);
  friend void swap(WorkflowExecutionGetDataRequest& a, WorkflowExecutionGetDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionGetDataRequest* New() const final {
    return CreateMaybeMessage<WorkflowExecutionGetDataRequest>(nullptr);
  }

  WorkflowExecutionGetDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowExecutionGetDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowExecutionGetDataRequest& from);
  void MergeFrom(const WorkflowExecutionGetDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecutionGetDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& id() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_id();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.WorkflowExecutionGetDataRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class WorkflowExecutionGetDataResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.WorkflowExecutionGetDataResponse) */ {
 public:
  WorkflowExecutionGetDataResponse();
  virtual ~WorkflowExecutionGetDataResponse();

  WorkflowExecutionGetDataResponse(const WorkflowExecutionGetDataResponse& from);

  inline WorkflowExecutionGetDataResponse& operator=(const WorkflowExecutionGetDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionGetDataResponse(WorkflowExecutionGetDataResponse&& from) noexcept
    : WorkflowExecutionGetDataResponse() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionGetDataResponse& operator=(WorkflowExecutionGetDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowExecutionGetDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionGetDataResponse* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionGetDataResponse*>(
               &_WorkflowExecutionGetDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(WorkflowExecutionGetDataResponse* other);
  friend void swap(WorkflowExecutionGetDataResponse& a, WorkflowExecutionGetDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionGetDataResponse* New() const final {
    return CreateMaybeMessage<WorkflowExecutionGetDataResponse>(nullptr);
  }

  WorkflowExecutionGetDataResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowExecutionGetDataResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowExecutionGetDataResponse& from);
  void MergeFrom(const WorkflowExecutionGetDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecutionGetDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.admin.UrlBlob outputs = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_outputs() const;
  PROTOBUF_DEPRECATED void clear_outputs();
  PROTOBUF_DEPRECATED static const int kOutputsFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::nebulaidl::admin::UrlBlob& outputs() const;
  PROTOBUF_DEPRECATED ::nebulaidl::admin::UrlBlob* release_outputs();
  PROTOBUF_DEPRECATED ::nebulaidl::admin::UrlBlob* mutable_outputs();
  PROTOBUF_DEPRECATED void set_allocated_outputs(::nebulaidl::admin::UrlBlob* outputs);

  // .nebulaidl.admin.UrlBlob inputs = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_inputs() const;
  PROTOBUF_DEPRECATED void clear_inputs();
  PROTOBUF_DEPRECATED static const int kInputsFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::nebulaidl::admin::UrlBlob& inputs() const;
  PROTOBUF_DEPRECATED ::nebulaidl::admin::UrlBlob* release_inputs();
  PROTOBUF_DEPRECATED ::nebulaidl::admin::UrlBlob* mutable_inputs();
  PROTOBUF_DEPRECATED void set_allocated_inputs(::nebulaidl::admin::UrlBlob* inputs);

  // .nebulaidl.core.LiteralMap full_inputs = 3;
  bool has_full_inputs() const;
  void clear_full_inputs();
  static const int kFullInputsFieldNumber = 3;
  const ::nebulaidl::core::LiteralMap& full_inputs() const;
  ::nebulaidl::core::LiteralMap* release_full_inputs();
  ::nebulaidl::core::LiteralMap* mutable_full_inputs();
  void set_allocated_full_inputs(::nebulaidl::core::LiteralMap* full_inputs);

  // .nebulaidl.core.LiteralMap full_outputs = 4;
  bool has_full_outputs() const;
  void clear_full_outputs();
  static const int kFullOutputsFieldNumber = 4;
  const ::nebulaidl::core::LiteralMap& full_outputs() const;
  ::nebulaidl::core::LiteralMap* release_full_outputs();
  ::nebulaidl::core::LiteralMap* mutable_full_outputs();
  void set_allocated_full_outputs(::nebulaidl::core::LiteralMap* full_outputs);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.WorkflowExecutionGetDataResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::admin::UrlBlob* outputs_;
  ::nebulaidl::admin::UrlBlob* inputs_;
  ::nebulaidl::core::LiteralMap* full_inputs_;
  ::nebulaidl::core::LiteralMap* full_outputs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionUpdateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionUpdateRequest) */ {
 public:
  ExecutionUpdateRequest();
  virtual ~ExecutionUpdateRequest();

  ExecutionUpdateRequest(const ExecutionUpdateRequest& from);

  inline ExecutionUpdateRequest& operator=(const ExecutionUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionUpdateRequest(ExecutionUpdateRequest&& from) noexcept
    : ExecutionUpdateRequest() {
    *this = ::std::move(from);
  }

  inline ExecutionUpdateRequest& operator=(ExecutionUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const ExecutionUpdateRequest*>(
               &_ExecutionUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ExecutionUpdateRequest* other);
  friend void swap(ExecutionUpdateRequest& a, ExecutionUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionUpdateRequest* New() const final {
    return CreateMaybeMessage<ExecutionUpdateRequest>(nullptr);
  }

  ExecutionUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionUpdateRequest& from);
  void MergeFrom(const ExecutionUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& id() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_id();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id);

  // .nebulaidl.admin.ExecutionState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::nebulaidl::admin::ExecutionState state() const;
  void set_state(::nebulaidl::admin::ExecutionState value);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionUpdateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* id_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionStateChangeDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionStateChangeDetails) */ {
 public:
  ExecutionStateChangeDetails();
  virtual ~ExecutionStateChangeDetails();

  ExecutionStateChangeDetails(const ExecutionStateChangeDetails& from);

  inline ExecutionStateChangeDetails& operator=(const ExecutionStateChangeDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionStateChangeDetails(ExecutionStateChangeDetails&& from) noexcept
    : ExecutionStateChangeDetails() {
    *this = ::std::move(from);
  }

  inline ExecutionStateChangeDetails& operator=(ExecutionStateChangeDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionStateChangeDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionStateChangeDetails* internal_default_instance() {
    return reinterpret_cast<const ExecutionStateChangeDetails*>(
               &_ExecutionStateChangeDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ExecutionStateChangeDetails* other);
  friend void swap(ExecutionStateChangeDetails& a, ExecutionStateChangeDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionStateChangeDetails* New() const final {
    return CreateMaybeMessage<ExecutionStateChangeDetails>(nullptr);
  }

  ExecutionStateChangeDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionStateChangeDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionStateChangeDetails& from);
  void MergeFrom(const ExecutionStateChangeDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionStateChangeDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string principal = 3;
  void clear_principal();
  static const int kPrincipalFieldNumber = 3;
  const ::std::string& principal() const;
  void set_principal(const ::std::string& value);
  #if LANG_CXX11
  void set_principal(::std::string&& value);
  #endif
  void set_principal(const char* value);
  void set_principal(const char* value, size_t size);
  ::std::string* mutable_principal();
  ::std::string* release_principal();
  void set_allocated_principal(::std::string* principal);

  // .google.protobuf.Timestamp occurred_at = 2;
  bool has_occurred_at() const;
  void clear_occurred_at();
  static const int kOccurredAtFieldNumber = 2;
  const ::google::protobuf::Timestamp& occurred_at() const;
  ::google::protobuf::Timestamp* release_occurred_at();
  ::google::protobuf::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at);

  // .nebulaidl.admin.ExecutionState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::nebulaidl::admin::ExecutionState state() const;
  void set_state(::nebulaidl::admin::ExecutionState value);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionStateChangeDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr principal_;
  ::google::protobuf::Timestamp* occurred_at_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionUpdateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.ExecutionUpdateResponse) */ {
 public:
  ExecutionUpdateResponse();
  virtual ~ExecutionUpdateResponse();

  ExecutionUpdateResponse(const ExecutionUpdateResponse& from);

  inline ExecutionUpdateResponse& operator=(const ExecutionUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionUpdateResponse(ExecutionUpdateResponse&& from) noexcept
    : ExecutionUpdateResponse() {
    *this = ::std::move(from);
  }

  inline ExecutionUpdateResponse& operator=(ExecutionUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const ExecutionUpdateResponse*>(
               &_ExecutionUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ExecutionUpdateResponse* other);
  friend void swap(ExecutionUpdateResponse& a, ExecutionUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionUpdateResponse* New() const final {
    return CreateMaybeMessage<ExecutionUpdateResponse>(nullptr);
  }

  ExecutionUpdateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionUpdateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionUpdateResponse& from);
  void MergeFrom(const ExecutionUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.ExecutionUpdateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class WorkflowExecutionGetMetricsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.WorkflowExecutionGetMetricsRequest) */ {
 public:
  WorkflowExecutionGetMetricsRequest();
  virtual ~WorkflowExecutionGetMetricsRequest();

  WorkflowExecutionGetMetricsRequest(const WorkflowExecutionGetMetricsRequest& from);

  inline WorkflowExecutionGetMetricsRequest& operator=(const WorkflowExecutionGetMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionGetMetricsRequest(WorkflowExecutionGetMetricsRequest&& from) noexcept
    : WorkflowExecutionGetMetricsRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionGetMetricsRequest& operator=(WorkflowExecutionGetMetricsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowExecutionGetMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionGetMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionGetMetricsRequest*>(
               &_WorkflowExecutionGetMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(WorkflowExecutionGetMetricsRequest* other);
  friend void swap(WorkflowExecutionGetMetricsRequest& a, WorkflowExecutionGetMetricsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionGetMetricsRequest* New() const final {
    return CreateMaybeMessage<WorkflowExecutionGetMetricsRequest>(nullptr);
  }

  WorkflowExecutionGetMetricsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowExecutionGetMetricsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowExecutionGetMetricsRequest& from);
  void MergeFrom(const WorkflowExecutionGetMetricsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecutionGetMetricsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& id() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_id();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id);

  // int32 depth = 2;
  void clear_depth();
  static const int kDepthFieldNumber = 2;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.WorkflowExecutionGetMetricsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* id_;
  ::google::protobuf::int32 depth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class WorkflowExecutionGetMetricsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.WorkflowExecutionGetMetricsResponse) */ {
 public:
  WorkflowExecutionGetMetricsResponse();
  virtual ~WorkflowExecutionGetMetricsResponse();

  WorkflowExecutionGetMetricsResponse(const WorkflowExecutionGetMetricsResponse& from);

  inline WorkflowExecutionGetMetricsResponse& operator=(const WorkflowExecutionGetMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionGetMetricsResponse(WorkflowExecutionGetMetricsResponse&& from) noexcept
    : WorkflowExecutionGetMetricsResponse() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionGetMetricsResponse& operator=(WorkflowExecutionGetMetricsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowExecutionGetMetricsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionGetMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionGetMetricsResponse*>(
               &_WorkflowExecutionGetMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(WorkflowExecutionGetMetricsResponse* other);
  friend void swap(WorkflowExecutionGetMetricsResponse& a, WorkflowExecutionGetMetricsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionGetMetricsResponse* New() const final {
    return CreateMaybeMessage<WorkflowExecutionGetMetricsResponse>(nullptr);
  }

  WorkflowExecutionGetMetricsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowExecutionGetMetricsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowExecutionGetMetricsResponse& from);
  void MergeFrom(const WorkflowExecutionGetMetricsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecutionGetMetricsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.Span span = 1;
  bool has_span() const;
  void clear_span();
  static const int kSpanFieldNumber = 1;
  const ::nebulaidl::core::Span& span() const;
  ::nebulaidl::core::Span* release_span();
  ::nebulaidl::core::Span* mutable_span();
  void set_allocated_span(::nebulaidl::core::Span* span);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.WorkflowExecutionGetMetricsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::core::Span* span_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fexecution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecutionCreateRequest

// string project = 1;
inline void ExecutionCreateRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionCreateRequest::project() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionCreateRequest.project)
  return project_.GetNoArena();
}
inline void ExecutionCreateRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionCreateRequest.project)
}
#if LANG_CXX11
inline void ExecutionCreateRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.ExecutionCreateRequest.project)
}
#endif
inline void ExecutionCreateRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.ExecutionCreateRequest.project)
}
inline void ExecutionCreateRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.ExecutionCreateRequest.project)
}
inline ::std::string* ExecutionCreateRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionCreateRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionCreateRequest::release_project() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionCreateRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionCreateRequest::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionCreateRequest.project)
}

// string domain = 2;
inline void ExecutionCreateRequest::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionCreateRequest::domain() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionCreateRequest.domain)
  return domain_.GetNoArena();
}
inline void ExecutionCreateRequest::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionCreateRequest.domain)
}
#if LANG_CXX11
inline void ExecutionCreateRequest::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.ExecutionCreateRequest.domain)
}
#endif
inline void ExecutionCreateRequest::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.ExecutionCreateRequest.domain)
}
inline void ExecutionCreateRequest::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.ExecutionCreateRequest.domain)
}
inline ::std::string* ExecutionCreateRequest::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionCreateRequest.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionCreateRequest::release_domain() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionCreateRequest.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionCreateRequest::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionCreateRequest.domain)
}

// string name = 3;
inline void ExecutionCreateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionCreateRequest::name() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionCreateRequest.name)
  return name_.GetNoArena();
}
inline void ExecutionCreateRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionCreateRequest.name)
}
#if LANG_CXX11
inline void ExecutionCreateRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.ExecutionCreateRequest.name)
}
#endif
inline void ExecutionCreateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.ExecutionCreateRequest.name)
}
inline void ExecutionCreateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.ExecutionCreateRequest.name)
}
inline ::std::string* ExecutionCreateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionCreateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionCreateRequest::release_name() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionCreateRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionCreateRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionCreateRequest.name)
}

// .nebulaidl.admin.ExecutionSpec spec = 4;
inline bool ExecutionCreateRequest::has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline void ExecutionCreateRequest::clear_spec() {
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::nebulaidl::admin::ExecutionSpec& ExecutionCreateRequest::spec() const {
  const ::nebulaidl::admin::ExecutionSpec* p = spec_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionCreateRequest.spec)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::ExecutionSpec*>(
      &::nebulaidl::admin::_ExecutionSpec_default_instance_);
}
inline ::nebulaidl::admin::ExecutionSpec* ExecutionCreateRequest::release_spec() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionCreateRequest.spec)
  
  ::nebulaidl::admin::ExecutionSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::ExecutionSpec* ExecutionCreateRequest::mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::ExecutionSpec>(GetArenaNoVirtual());
    spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionCreateRequest.spec)
  return spec_;
}
inline void ExecutionCreateRequest::set_allocated_spec(::nebulaidl::admin::ExecutionSpec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionCreateRequest.spec)
}

// .nebulaidl.core.LiteralMap inputs = 5;
inline bool ExecutionCreateRequest::has_inputs() const {
  return this != internal_default_instance() && inputs_ != nullptr;
}
inline const ::nebulaidl::core::LiteralMap& ExecutionCreateRequest::inputs() const {
  const ::nebulaidl::core::LiteralMap* p = inputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionCreateRequest.inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::LiteralMap*>(
      &::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* ExecutionCreateRequest::release_inputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionCreateRequest.inputs)
  
  ::nebulaidl::core::LiteralMap* temp = inputs_;
  inputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::LiteralMap* ExecutionCreateRequest::mutable_inputs() {
  
  if (inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::LiteralMap>(GetArenaNoVirtual());
    inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionCreateRequest.inputs)
  return inputs_;
}
inline void ExecutionCreateRequest::set_allocated_inputs(::nebulaidl::core::LiteralMap* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionCreateRequest.inputs)
}

// -------------------------------------------------------------------

// ExecutionRelaunchRequest

// .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
inline bool ExecutionRelaunchRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& ExecutionRelaunchRequest::id() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionRelaunchRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionRelaunchRequest::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionRelaunchRequest.id)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionRelaunchRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionRelaunchRequest.id)
  return id_;
}
inline void ExecutionRelaunchRequest::set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionRelaunchRequest.id)
}

// string name = 3;
inline void ExecutionRelaunchRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionRelaunchRequest::name() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionRelaunchRequest.name)
  return name_.GetNoArena();
}
inline void ExecutionRelaunchRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionRelaunchRequest.name)
}
#if LANG_CXX11
inline void ExecutionRelaunchRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.ExecutionRelaunchRequest.name)
}
#endif
inline void ExecutionRelaunchRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.ExecutionRelaunchRequest.name)
}
inline void ExecutionRelaunchRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.ExecutionRelaunchRequest.name)
}
inline ::std::string* ExecutionRelaunchRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionRelaunchRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionRelaunchRequest::release_name() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionRelaunchRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionRelaunchRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionRelaunchRequest.name)
}

// bool overwrite_cache = 4;
inline void ExecutionRelaunchRequest::clear_overwrite_cache() {
  overwrite_cache_ = false;
}
inline bool ExecutionRelaunchRequest::overwrite_cache() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionRelaunchRequest.overwrite_cache)
  return overwrite_cache_;
}
inline void ExecutionRelaunchRequest::set_overwrite_cache(bool value) {
  
  overwrite_cache_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionRelaunchRequest.overwrite_cache)
}

// -------------------------------------------------------------------

// ExecutionRecoverRequest

// .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
inline bool ExecutionRecoverRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& ExecutionRecoverRequest::id() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionRecoverRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionRecoverRequest::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionRecoverRequest.id)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionRecoverRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionRecoverRequest.id)
  return id_;
}
inline void ExecutionRecoverRequest::set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionRecoverRequest.id)
}

// string name = 2;
inline void ExecutionRecoverRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionRecoverRequest::name() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionRecoverRequest.name)
  return name_.GetNoArena();
}
inline void ExecutionRecoverRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionRecoverRequest.name)
}
#if LANG_CXX11
inline void ExecutionRecoverRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.ExecutionRecoverRequest.name)
}
#endif
inline void ExecutionRecoverRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.ExecutionRecoverRequest.name)
}
inline void ExecutionRecoverRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.ExecutionRecoverRequest.name)
}
inline ::std::string* ExecutionRecoverRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionRecoverRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionRecoverRequest::release_name() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionRecoverRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionRecoverRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionRecoverRequest.name)
}

// .nebulaidl.admin.ExecutionMetadata metadata = 3;
inline bool ExecutionRecoverRequest::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void ExecutionRecoverRequest::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::nebulaidl::admin::ExecutionMetadata& ExecutionRecoverRequest::metadata() const {
  const ::nebulaidl::admin::ExecutionMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionRecoverRequest.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::ExecutionMetadata*>(
      &::nebulaidl::admin::_ExecutionMetadata_default_instance_);
}
inline ::nebulaidl::admin::ExecutionMetadata* ExecutionRecoverRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionRecoverRequest.metadata)
  
  ::nebulaidl::admin::ExecutionMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::ExecutionMetadata* ExecutionRecoverRequest::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::ExecutionMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionRecoverRequest.metadata)
  return metadata_;
}
inline void ExecutionRecoverRequest::set_allocated_metadata(::nebulaidl::admin::ExecutionMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionRecoverRequest.metadata)
}

// -------------------------------------------------------------------

// ExecutionCreateResponse

// .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
inline bool ExecutionCreateResponse::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& ExecutionCreateResponse::id() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionCreateResponse.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionCreateResponse::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionCreateResponse.id)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionCreateResponse::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionCreateResponse.id)
  return id_;
}
inline void ExecutionCreateResponse::set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionCreateResponse.id)
}

// -------------------------------------------------------------------

// WorkflowExecutionGetRequest

// .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
inline bool WorkflowExecutionGetRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& WorkflowExecutionGetRequest::id() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.WorkflowExecutionGetRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* WorkflowExecutionGetRequest::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.WorkflowExecutionGetRequest.id)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* WorkflowExecutionGetRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.WorkflowExecutionGetRequest.id)
  return id_;
}
inline void WorkflowExecutionGetRequest::set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.WorkflowExecutionGetRequest.id)
}

// -------------------------------------------------------------------

// Execution

// .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
inline bool Execution::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& Execution::id() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.Execution.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* Execution::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.Execution.id)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* Execution::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.Execution.id)
  return id_;
}
inline void Execution::set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.Execution.id)
}

// .nebulaidl.admin.ExecutionSpec spec = 2;
inline bool Execution::has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline void Execution::clear_spec() {
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::nebulaidl::admin::ExecutionSpec& Execution::spec() const {
  const ::nebulaidl::admin::ExecutionSpec* p = spec_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.Execution.spec)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::ExecutionSpec*>(
      &::nebulaidl::admin::_ExecutionSpec_default_instance_);
}
inline ::nebulaidl::admin::ExecutionSpec* Execution::release_spec() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.Execution.spec)
  
  ::nebulaidl::admin::ExecutionSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::ExecutionSpec* Execution::mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::ExecutionSpec>(GetArenaNoVirtual());
    spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.Execution.spec)
  return spec_;
}
inline void Execution::set_allocated_spec(::nebulaidl::admin::ExecutionSpec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.Execution.spec)
}

// .nebulaidl.admin.ExecutionClosure closure = 3;
inline bool Execution::has_closure() const {
  return this != internal_default_instance() && closure_ != nullptr;
}
inline void Execution::clear_closure() {
  if (GetArenaNoVirtual() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
}
inline const ::nebulaidl::admin::ExecutionClosure& Execution::closure() const {
  const ::nebulaidl::admin::ExecutionClosure* p = closure_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.Execution.closure)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::ExecutionClosure*>(
      &::nebulaidl::admin::_ExecutionClosure_default_instance_);
}
inline ::nebulaidl::admin::ExecutionClosure* Execution::release_closure() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.Execution.closure)
  
  ::nebulaidl::admin::ExecutionClosure* temp = closure_;
  closure_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::ExecutionClosure* Execution::mutable_closure() {
  
  if (closure_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::ExecutionClosure>(GetArenaNoVirtual());
    closure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.Execution.closure)
  return closure_;
}
inline void Execution::set_allocated_closure(::nebulaidl::admin::ExecutionClosure* closure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete closure_;
  }
  if (closure) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      closure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, closure, submessage_arena);
    }
    
  } else {
    
  }
  closure_ = closure;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.Execution.closure)
}

// -------------------------------------------------------------------

// ExecutionList

// repeated .nebulaidl.admin.Execution executions = 1;
inline int ExecutionList::executions_size() const {
  return executions_.size();
}
inline void ExecutionList::clear_executions() {
  executions_.Clear();
}
inline ::nebulaidl::admin::Execution* ExecutionList::mutable_executions(int index) {
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionList.executions)
  return executions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Execution >*
ExecutionList::mutable_executions() {
  // @@protoc_insertion_point(field_mutable_list:nebulaidl.admin.ExecutionList.executions)
  return &executions_;
}
inline const ::nebulaidl::admin::Execution& ExecutionList::executions(int index) const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionList.executions)
  return executions_.Get(index);
}
inline ::nebulaidl::admin::Execution* ExecutionList::add_executions() {
  // @@protoc_insertion_point(field_add:nebulaidl.admin.ExecutionList.executions)
  return executions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Execution >&
ExecutionList::executions() const {
  // @@protoc_insertion_point(field_list:nebulaidl.admin.ExecutionList.executions)
  return executions_;
}

// string token = 2;
inline void ExecutionList::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionList::token() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionList.token)
  return token_.GetNoArena();
}
inline void ExecutionList::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionList.token)
}
#if LANG_CXX11
inline void ExecutionList::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.ExecutionList.token)
}
#endif
inline void ExecutionList::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.ExecutionList.token)
}
inline void ExecutionList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.ExecutionList.token)
}
inline ::std::string* ExecutionList::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionList.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionList::release_token() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionList.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionList::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionList.token)
}

// -------------------------------------------------------------------

// LiteralMapBlob

// .nebulaidl.core.LiteralMap values = 1 [deprecated = true];
inline bool LiteralMapBlob::has_values() const {
  return data_case() == kValues;
}
inline void LiteralMapBlob::set_has_values() {
  _oneof_case_[0] = kValues;
}
inline ::nebulaidl::core::LiteralMap* LiteralMapBlob::release_values() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.LiteralMapBlob.values)
  if (has_values()) {
    clear_has_data();
      ::nebulaidl::core::LiteralMap* temp = data_.values_;
    data_.values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulaidl::core::LiteralMap& LiteralMapBlob::values() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.LiteralMapBlob.values)
  return has_values()
      ? *data_.values_
      : *reinterpret_cast< ::nebulaidl::core::LiteralMap*>(&::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* LiteralMapBlob::mutable_values() {
  if (!has_values()) {
    clear_data();
    set_has_values();
    data_.values_ = CreateMaybeMessage< ::nebulaidl::core::LiteralMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.LiteralMapBlob.values)
  return data_.values_;
}

// string uri = 2;
inline bool LiteralMapBlob::has_uri() const {
  return data_case() == kUri;
}
inline void LiteralMapBlob::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void LiteralMapBlob::clear_uri() {
  if (has_uri()) {
    data_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& LiteralMapBlob::uri() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.LiteralMapBlob.uri)
  if (has_uri()) {
    return data_.uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void LiteralMapBlob::set_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nebulaidl.admin.LiteralMapBlob.uri)
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.LiteralMapBlob.uri)
}
#if LANG_CXX11
inline void LiteralMapBlob::set_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:nebulaidl.admin.LiteralMapBlob.uri)
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.LiteralMapBlob.uri)
}
#endif
inline void LiteralMapBlob::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.LiteralMapBlob.uri)
}
inline void LiteralMapBlob::set_uri(const char* value, size_t size) {
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.LiteralMapBlob.uri)
}
inline ::std::string* LiteralMapBlob::mutable_uri() {
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.LiteralMapBlob.uri)
  return data_.uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiteralMapBlob::release_uri() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.LiteralMapBlob.uri)
  if (has_uri()) {
    clear_has_data();
    return data_.uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void LiteralMapBlob::set_allocated_uri(::std::string* uri) {
  if (has_data()) {
    clear_data();
  }
  if (uri != nullptr) {
    set_has_uri();
    data_.uri_.UnsafeSetDefault(uri);
  }
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.LiteralMapBlob.uri)
}

inline bool LiteralMapBlob::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void LiteralMapBlob::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline LiteralMapBlob::DataCase LiteralMapBlob::data_case() const {
  return LiteralMapBlob::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AbortMetadata

// string cause = 1;
inline void AbortMetadata::clear_cause() {
  cause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AbortMetadata::cause() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.AbortMetadata.cause)
  return cause_.GetNoArena();
}
inline void AbortMetadata::set_cause(const ::std::string& value) {
  
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.AbortMetadata.cause)
}
#if LANG_CXX11
inline void AbortMetadata::set_cause(::std::string&& value) {
  
  cause_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.AbortMetadata.cause)
}
#endif
inline void AbortMetadata::set_cause(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.AbortMetadata.cause)
}
inline void AbortMetadata::set_cause(const char* value, size_t size) {
  
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.AbortMetadata.cause)
}
inline ::std::string* AbortMetadata::mutable_cause() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.AbortMetadata.cause)
  return cause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbortMetadata::release_cause() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.AbortMetadata.cause)
  
  return cause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbortMetadata::set_allocated_cause(::std::string* cause) {
  if (cause != nullptr) {
    
  } else {
    
  }
  cause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cause);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.AbortMetadata.cause)
}

// string principal = 2;
inline void AbortMetadata::clear_principal() {
  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AbortMetadata::principal() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.AbortMetadata.principal)
  return principal_.GetNoArena();
}
inline void AbortMetadata::set_principal(const ::std::string& value) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.AbortMetadata.principal)
}
#if LANG_CXX11
inline void AbortMetadata::set_principal(::std::string&& value) {
  
  principal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.AbortMetadata.principal)
}
#endif
inline void AbortMetadata::set_principal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.AbortMetadata.principal)
}
inline void AbortMetadata::set_principal(const char* value, size_t size) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.AbortMetadata.principal)
}
inline ::std::string* AbortMetadata::mutable_principal() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.AbortMetadata.principal)
  return principal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbortMetadata::release_principal() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.AbortMetadata.principal)
  
  return principal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbortMetadata::set_allocated_principal(::std::string* principal) {
  if (principal != nullptr) {
    
  } else {
    
  }
  principal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), principal);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.AbortMetadata.principal)
}

// -------------------------------------------------------------------

// ExecutionClosure

// .nebulaidl.admin.LiteralMapBlob outputs = 1 [deprecated = true];
inline bool ExecutionClosure::has_outputs() const {
  return output_result_case() == kOutputs;
}
inline void ExecutionClosure::set_has_outputs() {
  _oneof_case_[0] = kOutputs;
}
inline void ExecutionClosure::clear_outputs() {
  if (has_outputs()) {
    delete output_result_.outputs_;
    clear_has_output_result();
  }
}
inline ::nebulaidl::admin::LiteralMapBlob* ExecutionClosure::release_outputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.outputs)
  if (has_outputs()) {
    clear_has_output_result();
      ::nebulaidl::admin::LiteralMapBlob* temp = output_result_.outputs_;
    output_result_.outputs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulaidl::admin::LiteralMapBlob& ExecutionClosure::outputs() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.outputs)
  return has_outputs()
      ? *output_result_.outputs_
      : *reinterpret_cast< ::nebulaidl::admin::LiteralMapBlob*>(&::nebulaidl::admin::_LiteralMapBlob_default_instance_);
}
inline ::nebulaidl::admin::LiteralMapBlob* ExecutionClosure::mutable_outputs() {
  if (!has_outputs()) {
    clear_output_result();
    set_has_outputs();
    output_result_.outputs_ = CreateMaybeMessage< ::nebulaidl::admin::LiteralMapBlob >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.outputs)
  return output_result_.outputs_;
}

// .nebulaidl.core.ExecutionError error = 2;
inline bool ExecutionClosure::has_error() const {
  return output_result_case() == kError;
}
inline void ExecutionClosure::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::nebulaidl::core::ExecutionError* ExecutionClosure::release_error() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.error)
  if (has_error()) {
    clear_has_output_result();
      ::nebulaidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulaidl::core::ExecutionError& ExecutionClosure::error() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.error)
  return has_error()
      ? *output_result_.error_
      : *reinterpret_cast< ::nebulaidl::core::ExecutionError*>(&::nebulaidl::core::_ExecutionError_default_instance_);
}
inline ::nebulaidl::core::ExecutionError* ExecutionClosure::mutable_error() {
  if (!has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::nebulaidl::core::ExecutionError >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.error)
  return output_result_.error_;
}

// string abort_cause = 10 [deprecated = true];
inline bool ExecutionClosure::has_abort_cause() const {
  return output_result_case() == kAbortCause;
}
inline void ExecutionClosure::set_has_abort_cause() {
  _oneof_case_[0] = kAbortCause;
}
inline void ExecutionClosure::clear_abort_cause() {
  if (has_abort_cause()) {
    output_result_.abort_cause_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_output_result();
  }
}
inline const ::std::string& ExecutionClosure::abort_cause() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.abort_cause)
  if (has_abort_cause()) {
    return output_result_.abort_cause_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ExecutionClosure::set_abort_cause(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionClosure.abort_cause)
  if (!has_abort_cause()) {
    clear_output_result();
    set_has_abort_cause();
    output_result_.abort_cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.abort_cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionClosure.abort_cause)
}
#if LANG_CXX11
inline void ExecutionClosure::set_abort_cause(::std::string&& value) {
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionClosure.abort_cause)
  if (!has_abort_cause()) {
    clear_output_result();
    set_has_abort_cause();
    output_result_.abort_cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.abort_cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.ExecutionClosure.abort_cause)
}
#endif
inline void ExecutionClosure::set_abort_cause(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_abort_cause()) {
    clear_output_result();
    set_has_abort_cause();
    output_result_.abort_cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.abort_cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.ExecutionClosure.abort_cause)
}
inline void ExecutionClosure::set_abort_cause(const char* value, size_t size) {
  if (!has_abort_cause()) {
    clear_output_result();
    set_has_abort_cause();
    output_result_.abort_cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.abort_cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.ExecutionClosure.abort_cause)
}
inline ::std::string* ExecutionClosure::mutable_abort_cause() {
  if (!has_abort_cause()) {
    clear_output_result();
    set_has_abort_cause();
    output_result_.abort_cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.abort_cause)
  return output_result_.abort_cause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionClosure::release_abort_cause() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.abort_cause)
  if (has_abort_cause()) {
    clear_has_output_result();
    return output_result_.abort_cause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ExecutionClosure::set_allocated_abort_cause(::std::string* abort_cause) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (abort_cause != nullptr) {
    set_has_abort_cause();
    output_result_.abort_cause_.UnsafeSetDefault(abort_cause);
  }
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionClosure.abort_cause)
}

// .nebulaidl.admin.AbortMetadata abort_metadata = 12;
inline bool ExecutionClosure::has_abort_metadata() const {
  return output_result_case() == kAbortMetadata;
}
inline void ExecutionClosure::set_has_abort_metadata() {
  _oneof_case_[0] = kAbortMetadata;
}
inline void ExecutionClosure::clear_abort_metadata() {
  if (has_abort_metadata()) {
    delete output_result_.abort_metadata_;
    clear_has_output_result();
  }
}
inline ::nebulaidl::admin::AbortMetadata* ExecutionClosure::release_abort_metadata() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.abort_metadata)
  if (has_abort_metadata()) {
    clear_has_output_result();
      ::nebulaidl::admin::AbortMetadata* temp = output_result_.abort_metadata_;
    output_result_.abort_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulaidl::admin::AbortMetadata& ExecutionClosure::abort_metadata() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.abort_metadata)
  return has_abort_metadata()
      ? *output_result_.abort_metadata_
      : *reinterpret_cast< ::nebulaidl::admin::AbortMetadata*>(&::nebulaidl::admin::_AbortMetadata_default_instance_);
}
inline ::nebulaidl::admin::AbortMetadata* ExecutionClosure::mutable_abort_metadata() {
  if (!has_abort_metadata()) {
    clear_output_result();
    set_has_abort_metadata();
    output_result_.abort_metadata_ = CreateMaybeMessage< ::nebulaidl::admin::AbortMetadata >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.abort_metadata)
  return output_result_.abort_metadata_;
}

// .nebulaidl.core.LiteralMap output_data = 13 [deprecated = true];
inline bool ExecutionClosure::has_output_data() const {
  return output_result_case() == kOutputData;
}
inline void ExecutionClosure::set_has_output_data() {
  _oneof_case_[0] = kOutputData;
}
inline ::nebulaidl::core::LiteralMap* ExecutionClosure::release_output_data() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.output_data)
  if (has_output_data()) {
    clear_has_output_result();
      ::nebulaidl::core::LiteralMap* temp = output_result_.output_data_;
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulaidl::core::LiteralMap& ExecutionClosure::output_data() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.output_data)
  return has_output_data()
      ? *output_result_.output_data_
      : *reinterpret_cast< ::nebulaidl::core::LiteralMap*>(&::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* ExecutionClosure::mutable_output_data() {
  if (!has_output_data()) {
    clear_output_result();
    set_has_output_data();
    output_result_.output_data_ = CreateMaybeMessage< ::nebulaidl::core::LiteralMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.output_data)
  return output_result_.output_data_;
}

// .nebulaidl.core.LiteralMap computed_inputs = 3 [deprecated = true];
inline bool ExecutionClosure::has_computed_inputs() const {
  return this != internal_default_instance() && computed_inputs_ != nullptr;
}
inline const ::nebulaidl::core::LiteralMap& ExecutionClosure::computed_inputs() const {
  const ::nebulaidl::core::LiteralMap* p = computed_inputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.computed_inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::LiteralMap*>(
      &::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* ExecutionClosure::release_computed_inputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.computed_inputs)
  
  ::nebulaidl::core::LiteralMap* temp = computed_inputs_;
  computed_inputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::LiteralMap* ExecutionClosure::mutable_computed_inputs() {
  
  if (computed_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::LiteralMap>(GetArenaNoVirtual());
    computed_inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.computed_inputs)
  return computed_inputs_;
}
inline void ExecutionClosure::set_allocated_computed_inputs(::nebulaidl::core::LiteralMap* computed_inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(computed_inputs_);
  }
  if (computed_inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      computed_inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, computed_inputs, submessage_arena);
    }
    
  } else {
    
  }
  computed_inputs_ = computed_inputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionClosure.computed_inputs)
}

// .nebulaidl.core.WorkflowExecution.Phase phase = 4;
inline void ExecutionClosure::clear_phase() {
  phase_ = 0;
}
inline ::nebulaidl::core::WorkflowExecution_Phase ExecutionClosure::phase() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.phase)
  return static_cast< ::nebulaidl::core::WorkflowExecution_Phase >(phase_);
}
inline void ExecutionClosure::set_phase(::nebulaidl::core::WorkflowExecution_Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionClosure.phase)
}

// .google.protobuf.Timestamp started_at = 5;
inline bool ExecutionClosure::has_started_at() const {
  return this != internal_default_instance() && started_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ExecutionClosure::started_at() const {
  const ::google::protobuf::Timestamp* p = started_at_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.started_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ExecutionClosure::release_started_at() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.started_at)
  
  ::google::protobuf::Timestamp* temp = started_at_;
  started_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ExecutionClosure::mutable_started_at() {
  
  if (started_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    started_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.started_at)
  return started_at_;
}
inline void ExecutionClosure::set_allocated_started_at(::google::protobuf::Timestamp* started_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(started_at_);
  }
  if (started_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(started_at)->GetArena();
    if (message_arena != submessage_arena) {
      started_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, started_at, submessage_arena);
    }
    
  } else {
    
  }
  started_at_ = started_at;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionClosure.started_at)
}

// .google.protobuf.Duration duration = 6;
inline bool ExecutionClosure::has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline const ::google::protobuf::Duration& ExecutionClosure::duration() const {
  const ::google::protobuf::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* ExecutionClosure::release_duration() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.duration)
  
  ::google::protobuf::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* ExecutionClosure::mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.duration)
  return duration_;
}
inline void ExecutionClosure::set_allocated_duration(::google::protobuf::Duration* duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(duration_);
  }
  if (duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionClosure.duration)
}

// .google.protobuf.Timestamp created_at = 7;
inline bool ExecutionClosure::has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ExecutionClosure::created_at() const {
  const ::google::protobuf::Timestamp* p = created_at_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.created_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ExecutionClosure::release_created_at() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ExecutionClosure::mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.created_at)
  return created_at_;
}
inline void ExecutionClosure::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionClosure.created_at)
}

// .google.protobuf.Timestamp updated_at = 8;
inline bool ExecutionClosure::has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ExecutionClosure::updated_at() const {
  const ::google::protobuf::Timestamp* p = updated_at_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.updated_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ExecutionClosure::release_updated_at() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.updated_at)
  
  ::google::protobuf::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ExecutionClosure::mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    updated_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.updated_at)
  return updated_at_;
}
inline void ExecutionClosure::set_allocated_updated_at(::google::protobuf::Timestamp* updated_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionClosure.updated_at)
}

// repeated .nebulaidl.admin.Notification notifications = 9;
inline int ExecutionClosure::notifications_size() const {
  return notifications_.size();
}
inline ::nebulaidl::admin::Notification* ExecutionClosure::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.notifications)
  return notifications_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Notification >*
ExecutionClosure::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:nebulaidl.admin.ExecutionClosure.notifications)
  return &notifications_;
}
inline const ::nebulaidl::admin::Notification& ExecutionClosure::notifications(int index) const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.notifications)
  return notifications_.Get(index);
}
inline ::nebulaidl::admin::Notification* ExecutionClosure::add_notifications() {
  // @@protoc_insertion_point(field_add:nebulaidl.admin.ExecutionClosure.notifications)
  return notifications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Notification >&
ExecutionClosure::notifications() const {
  // @@protoc_insertion_point(field_list:nebulaidl.admin.ExecutionClosure.notifications)
  return notifications_;
}

// .nebulaidl.core.Identifier workflow_id = 11;
inline bool ExecutionClosure::has_workflow_id() const {
  return this != internal_default_instance() && workflow_id_ != nullptr;
}
inline const ::nebulaidl::core::Identifier& ExecutionClosure::workflow_id() const {
  const ::nebulaidl::core::Identifier* p = workflow_id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.workflow_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::Identifier*>(
      &::nebulaidl::core::_Identifier_default_instance_);
}
inline ::nebulaidl::core::Identifier* ExecutionClosure::release_workflow_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.workflow_id)
  
  ::nebulaidl::core::Identifier* temp = workflow_id_;
  workflow_id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::Identifier* ExecutionClosure::mutable_workflow_id() {
  
  if (workflow_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::Identifier>(GetArenaNoVirtual());
    workflow_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.workflow_id)
  return workflow_id_;
}
inline void ExecutionClosure::set_allocated_workflow_id(::nebulaidl::core::Identifier* workflow_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(workflow_id_);
  }
  if (workflow_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_id, submessage_arena);
    }
    
  } else {
    
  }
  workflow_id_ = workflow_id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionClosure.workflow_id)
}

// .nebulaidl.admin.ExecutionStateChangeDetails state_change_details = 14;
inline bool ExecutionClosure::has_state_change_details() const {
  return this != internal_default_instance() && state_change_details_ != nullptr;
}
inline void ExecutionClosure::clear_state_change_details() {
  if (GetArenaNoVirtual() == nullptr && state_change_details_ != nullptr) {
    delete state_change_details_;
  }
  state_change_details_ = nullptr;
}
inline const ::nebulaidl::admin::ExecutionStateChangeDetails& ExecutionClosure::state_change_details() const {
  const ::nebulaidl::admin::ExecutionStateChangeDetails* p = state_change_details_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionClosure.state_change_details)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::ExecutionStateChangeDetails*>(
      &::nebulaidl::admin::_ExecutionStateChangeDetails_default_instance_);
}
inline ::nebulaidl::admin::ExecutionStateChangeDetails* ExecutionClosure::release_state_change_details() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionClosure.state_change_details)
  
  ::nebulaidl::admin::ExecutionStateChangeDetails* temp = state_change_details_;
  state_change_details_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::ExecutionStateChangeDetails* ExecutionClosure::mutable_state_change_details() {
  
  if (state_change_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::ExecutionStateChangeDetails>(GetArenaNoVirtual());
    state_change_details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionClosure.state_change_details)
  return state_change_details_;
}
inline void ExecutionClosure::set_allocated_state_change_details(::nebulaidl::admin::ExecutionStateChangeDetails* state_change_details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_change_details_;
  }
  if (state_change_details) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state_change_details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state_change_details, submessage_arena);
    }
    
  } else {
    
  }
  state_change_details_ = state_change_details;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionClosure.state_change_details)
}

inline bool ExecutionClosure::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void ExecutionClosure::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline ExecutionClosure::OutputResultCase ExecutionClosure::output_result_case() const {
  return ExecutionClosure::OutputResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SystemMetadata

// string execution_cluster = 1;
inline void SystemMetadata::clear_execution_cluster() {
  execution_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemMetadata::execution_cluster() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.SystemMetadata.execution_cluster)
  return execution_cluster_.GetNoArena();
}
inline void SystemMetadata::set_execution_cluster(const ::std::string& value) {
  
  execution_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.SystemMetadata.execution_cluster)
}
#if LANG_CXX11
inline void SystemMetadata::set_execution_cluster(::std::string&& value) {
  
  execution_cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.SystemMetadata.execution_cluster)
}
#endif
inline void SystemMetadata::set_execution_cluster(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  execution_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.SystemMetadata.execution_cluster)
}
inline void SystemMetadata::set_execution_cluster(const char* value, size_t size) {
  
  execution_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.SystemMetadata.execution_cluster)
}
inline ::std::string* SystemMetadata::mutable_execution_cluster() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.SystemMetadata.execution_cluster)
  return execution_cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemMetadata::release_execution_cluster() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.SystemMetadata.execution_cluster)
  
  return execution_cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemMetadata::set_allocated_execution_cluster(::std::string* execution_cluster) {
  if (execution_cluster != nullptr) {
    
  } else {
    
  }
  execution_cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), execution_cluster);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.SystemMetadata.execution_cluster)
}

// string namespace = 2;
inline void SystemMetadata::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemMetadata::namespace_() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.SystemMetadata.namespace)
  return namespace__.GetNoArena();
}
inline void SystemMetadata::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.SystemMetadata.namespace)
}
#if LANG_CXX11
inline void SystemMetadata::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.SystemMetadata.namespace)
}
#endif
inline void SystemMetadata::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.SystemMetadata.namespace)
}
inline void SystemMetadata::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.SystemMetadata.namespace)
}
inline ::std::string* SystemMetadata::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.SystemMetadata.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemMetadata::release_namespace_() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.SystemMetadata.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemMetadata::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.SystemMetadata.namespace)
}

// -------------------------------------------------------------------

// ExecutionMetadata

// .nebulaidl.admin.ExecutionMetadata.ExecutionMode mode = 1;
inline void ExecutionMetadata::clear_mode() {
  mode_ = 0;
}
inline ::nebulaidl::admin::ExecutionMetadata_ExecutionMode ExecutionMetadata::mode() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionMetadata.mode)
  return static_cast< ::nebulaidl::admin::ExecutionMetadata_ExecutionMode >(mode_);
}
inline void ExecutionMetadata::set_mode(::nebulaidl::admin::ExecutionMetadata_ExecutionMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionMetadata.mode)
}

// string principal = 2;
inline void ExecutionMetadata::clear_principal() {
  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionMetadata::principal() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionMetadata.principal)
  return principal_.GetNoArena();
}
inline void ExecutionMetadata::set_principal(const ::std::string& value) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionMetadata.principal)
}
#if LANG_CXX11
inline void ExecutionMetadata::set_principal(::std::string&& value) {
  
  principal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.ExecutionMetadata.principal)
}
#endif
inline void ExecutionMetadata::set_principal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.ExecutionMetadata.principal)
}
inline void ExecutionMetadata::set_principal(const char* value, size_t size) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.ExecutionMetadata.principal)
}
inline ::std::string* ExecutionMetadata::mutable_principal() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionMetadata.principal)
  return principal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionMetadata::release_principal() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionMetadata.principal)
  
  return principal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionMetadata::set_allocated_principal(::std::string* principal) {
  if (principal != nullptr) {
    
  } else {
    
  }
  principal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), principal);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionMetadata.principal)
}

// uint32 nesting = 3;
inline void ExecutionMetadata::clear_nesting() {
  nesting_ = 0u;
}
inline ::google::protobuf::uint32 ExecutionMetadata::nesting() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionMetadata.nesting)
  return nesting_;
}
inline void ExecutionMetadata::set_nesting(::google::protobuf::uint32 value) {
  
  nesting_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionMetadata.nesting)
}

// .google.protobuf.Timestamp scheduled_at = 4;
inline bool ExecutionMetadata::has_scheduled_at() const {
  return this != internal_default_instance() && scheduled_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ExecutionMetadata::scheduled_at() const {
  const ::google::protobuf::Timestamp* p = scheduled_at_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionMetadata.scheduled_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ExecutionMetadata::release_scheduled_at() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionMetadata.scheduled_at)
  
  ::google::protobuf::Timestamp* temp = scheduled_at_;
  scheduled_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ExecutionMetadata::mutable_scheduled_at() {
  
  if (scheduled_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    scheduled_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionMetadata.scheduled_at)
  return scheduled_at_;
}
inline void ExecutionMetadata::set_allocated_scheduled_at(::google::protobuf::Timestamp* scheduled_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scheduled_at_);
  }
  if (scheduled_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(scheduled_at)->GetArena();
    if (message_arena != submessage_arena) {
      scheduled_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduled_at, submessage_arena);
    }
    
  } else {
    
  }
  scheduled_at_ = scheduled_at;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionMetadata.scheduled_at)
}

// .nebulaidl.core.NodeExecutionIdentifier parent_node_execution = 5;
inline bool ExecutionMetadata::has_parent_node_execution() const {
  return this != internal_default_instance() && parent_node_execution_ != nullptr;
}
inline const ::nebulaidl::core::NodeExecutionIdentifier& ExecutionMetadata::parent_node_execution() const {
  const ::nebulaidl::core::NodeExecutionIdentifier* p = parent_node_execution_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionMetadata.parent_node_execution)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::NodeExecutionIdentifier*>(
      &::nebulaidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::NodeExecutionIdentifier* ExecutionMetadata::release_parent_node_execution() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionMetadata.parent_node_execution)
  
  ::nebulaidl::core::NodeExecutionIdentifier* temp = parent_node_execution_;
  parent_node_execution_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::NodeExecutionIdentifier* ExecutionMetadata::mutable_parent_node_execution() {
  
  if (parent_node_execution_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::NodeExecutionIdentifier>(GetArenaNoVirtual());
    parent_node_execution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionMetadata.parent_node_execution)
  return parent_node_execution_;
}
inline void ExecutionMetadata::set_allocated_parent_node_execution(::nebulaidl::core::NodeExecutionIdentifier* parent_node_execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parent_node_execution_);
  }
  if (parent_node_execution) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_node_execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent_node_execution, submessage_arena);
    }
    
  } else {
    
  }
  parent_node_execution_ = parent_node_execution;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionMetadata.parent_node_execution)
}

// .nebulaidl.core.WorkflowExecutionIdentifier reference_execution = 16;
inline bool ExecutionMetadata::has_reference_execution() const {
  return this != internal_default_instance() && reference_execution_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& ExecutionMetadata::reference_execution() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = reference_execution_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionMetadata.reference_execution)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionMetadata::release_reference_execution() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionMetadata.reference_execution)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = reference_execution_;
  reference_execution_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionMetadata::mutable_reference_execution() {
  
  if (reference_execution_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    reference_execution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionMetadata.reference_execution)
  return reference_execution_;
}
inline void ExecutionMetadata::set_allocated_reference_execution(::nebulaidl::core::WorkflowExecutionIdentifier* reference_execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reference_execution_);
  }
  if (reference_execution) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reference_execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference_execution, submessage_arena);
    }
    
  } else {
    
  }
  reference_execution_ = reference_execution;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionMetadata.reference_execution)
}

// .nebulaidl.admin.SystemMetadata system_metadata = 17;
inline bool ExecutionMetadata::has_system_metadata() const {
  return this != internal_default_instance() && system_metadata_ != nullptr;
}
inline void ExecutionMetadata::clear_system_metadata() {
  if (GetArenaNoVirtual() == nullptr && system_metadata_ != nullptr) {
    delete system_metadata_;
  }
  system_metadata_ = nullptr;
}
inline const ::nebulaidl::admin::SystemMetadata& ExecutionMetadata::system_metadata() const {
  const ::nebulaidl::admin::SystemMetadata* p = system_metadata_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionMetadata.system_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::SystemMetadata*>(
      &::nebulaidl::admin::_SystemMetadata_default_instance_);
}
inline ::nebulaidl::admin::SystemMetadata* ExecutionMetadata::release_system_metadata() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionMetadata.system_metadata)
  
  ::nebulaidl::admin::SystemMetadata* temp = system_metadata_;
  system_metadata_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::SystemMetadata* ExecutionMetadata::mutable_system_metadata() {
  
  if (system_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::SystemMetadata>(GetArenaNoVirtual());
    system_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionMetadata.system_metadata)
  return system_metadata_;
}
inline void ExecutionMetadata::set_allocated_system_metadata(::nebulaidl::admin::SystemMetadata* system_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete system_metadata_;
  }
  if (system_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      system_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system_metadata, submessage_arena);
    }
    
  } else {
    
  }
  system_metadata_ = system_metadata;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionMetadata.system_metadata)
}

// -------------------------------------------------------------------

// NotificationList

// repeated .nebulaidl.admin.Notification notifications = 1;
inline int NotificationList::notifications_size() const {
  return notifications_.size();
}
inline ::nebulaidl::admin::Notification* NotificationList::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NotificationList.notifications)
  return notifications_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Notification >*
NotificationList::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:nebulaidl.admin.NotificationList.notifications)
  return &notifications_;
}
inline const ::nebulaidl::admin::Notification& NotificationList::notifications(int index) const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NotificationList.notifications)
  return notifications_.Get(index);
}
inline ::nebulaidl::admin::Notification* NotificationList::add_notifications() {
  // @@protoc_insertion_point(field_add:nebulaidl.admin.NotificationList.notifications)
  return notifications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::Notification >&
NotificationList::notifications() const {
  // @@protoc_insertion_point(field_list:nebulaidl.admin.NotificationList.notifications)
  return notifications_;
}

// -------------------------------------------------------------------

// ExecutionSpec

// .nebulaidl.core.Identifier launch_plan = 1;
inline bool ExecutionSpec::has_launch_plan() const {
  return this != internal_default_instance() && launch_plan_ != nullptr;
}
inline const ::nebulaidl::core::Identifier& ExecutionSpec::launch_plan() const {
  const ::nebulaidl::core::Identifier* p = launch_plan_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.launch_plan)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::Identifier*>(
      &::nebulaidl::core::_Identifier_default_instance_);
}
inline ::nebulaidl::core::Identifier* ExecutionSpec::release_launch_plan() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.launch_plan)
  
  ::nebulaidl::core::Identifier* temp = launch_plan_;
  launch_plan_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::Identifier* ExecutionSpec::mutable_launch_plan() {
  
  if (launch_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::Identifier>(GetArenaNoVirtual());
    launch_plan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.launch_plan)
  return launch_plan_;
}
inline void ExecutionSpec::set_allocated_launch_plan(::nebulaidl::core::Identifier* launch_plan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(launch_plan_);
  }
  if (launch_plan) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launch_plan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launch_plan, submessage_arena);
    }
    
  } else {
    
  }
  launch_plan_ = launch_plan;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.launch_plan)
}

// .nebulaidl.core.LiteralMap inputs = 2 [deprecated = true];
inline bool ExecutionSpec::has_inputs() const {
  return this != internal_default_instance() && inputs_ != nullptr;
}
inline const ::nebulaidl::core::LiteralMap& ExecutionSpec::inputs() const {
  const ::nebulaidl::core::LiteralMap* p = inputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::LiteralMap*>(
      &::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* ExecutionSpec::release_inputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.inputs)
  
  ::nebulaidl::core::LiteralMap* temp = inputs_;
  inputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::LiteralMap* ExecutionSpec::mutable_inputs() {
  
  if (inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::LiteralMap>(GetArenaNoVirtual());
    inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.inputs)
  return inputs_;
}
inline void ExecutionSpec::set_allocated_inputs(::nebulaidl::core::LiteralMap* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.inputs)
}

// .nebulaidl.admin.ExecutionMetadata metadata = 3;
inline bool ExecutionSpec::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void ExecutionSpec::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::nebulaidl::admin::ExecutionMetadata& ExecutionSpec::metadata() const {
  const ::nebulaidl::admin::ExecutionMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::ExecutionMetadata*>(
      &::nebulaidl::admin::_ExecutionMetadata_default_instance_);
}
inline ::nebulaidl::admin::ExecutionMetadata* ExecutionSpec::release_metadata() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.metadata)
  
  ::nebulaidl::admin::ExecutionMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::ExecutionMetadata* ExecutionSpec::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::ExecutionMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.metadata)
  return metadata_;
}
inline void ExecutionSpec::set_allocated_metadata(::nebulaidl::admin::ExecutionMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.metadata)
}

// .nebulaidl.admin.NotificationList notifications = 5;
inline bool ExecutionSpec::has_notifications() const {
  return notification_overrides_case() == kNotifications;
}
inline void ExecutionSpec::set_has_notifications() {
  _oneof_case_[0] = kNotifications;
}
inline void ExecutionSpec::clear_notifications() {
  if (has_notifications()) {
    delete notification_overrides_.notifications_;
    clear_has_notification_overrides();
  }
}
inline ::nebulaidl::admin::NotificationList* ExecutionSpec::release_notifications() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.notifications)
  if (has_notifications()) {
    clear_has_notification_overrides();
      ::nebulaidl::admin::NotificationList* temp = notification_overrides_.notifications_;
    notification_overrides_.notifications_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulaidl::admin::NotificationList& ExecutionSpec::notifications() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.notifications)
  return has_notifications()
      ? *notification_overrides_.notifications_
      : *reinterpret_cast< ::nebulaidl::admin::NotificationList*>(&::nebulaidl::admin::_NotificationList_default_instance_);
}
inline ::nebulaidl::admin::NotificationList* ExecutionSpec::mutable_notifications() {
  if (!has_notifications()) {
    clear_notification_overrides();
    set_has_notifications();
    notification_overrides_.notifications_ = CreateMaybeMessage< ::nebulaidl::admin::NotificationList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.notifications)
  return notification_overrides_.notifications_;
}

// bool disable_all = 6;
inline bool ExecutionSpec::has_disable_all() const {
  return notification_overrides_case() == kDisableAll;
}
inline void ExecutionSpec::set_has_disable_all() {
  _oneof_case_[0] = kDisableAll;
}
inline void ExecutionSpec::clear_disable_all() {
  if (has_disable_all()) {
    notification_overrides_.disable_all_ = false;
    clear_has_notification_overrides();
  }
}
inline bool ExecutionSpec::disable_all() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.disable_all)
  if (has_disable_all()) {
    return notification_overrides_.disable_all_;
  }
  return false;
}
inline void ExecutionSpec::set_disable_all(bool value) {
  if (!has_disable_all()) {
    clear_notification_overrides();
    set_has_disable_all();
  }
  notification_overrides_.disable_all_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionSpec.disable_all)
}

// .nebulaidl.admin.Labels labels = 7;
inline bool ExecutionSpec::has_labels() const {
  return this != internal_default_instance() && labels_ != nullptr;
}
inline const ::nebulaidl::admin::Labels& ExecutionSpec::labels() const {
  const ::nebulaidl::admin::Labels* p = labels_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.labels)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::Labels*>(
      &::nebulaidl::admin::_Labels_default_instance_);
}
inline ::nebulaidl::admin::Labels* ExecutionSpec::release_labels() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.labels)
  
  ::nebulaidl::admin::Labels* temp = labels_;
  labels_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::Labels* ExecutionSpec::mutable_labels() {
  
  if (labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::Labels>(GetArenaNoVirtual());
    labels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.labels)
  return labels_;
}
inline void ExecutionSpec::set_allocated_labels(::nebulaidl::admin::Labels* labels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(labels_);
  }
  if (labels) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      labels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, labels, submessage_arena);
    }
    
  } else {
    
  }
  labels_ = labels;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.labels)
}

// .nebulaidl.admin.Annotations annotations = 8;
inline bool ExecutionSpec::has_annotations() const {
  return this != internal_default_instance() && annotations_ != nullptr;
}
inline const ::nebulaidl::admin::Annotations& ExecutionSpec::annotations() const {
  const ::nebulaidl::admin::Annotations* p = annotations_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.annotations)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::Annotations*>(
      &::nebulaidl::admin::_Annotations_default_instance_);
}
inline ::nebulaidl::admin::Annotations* ExecutionSpec::release_annotations() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.annotations)
  
  ::nebulaidl::admin::Annotations* temp = annotations_;
  annotations_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::Annotations* ExecutionSpec::mutable_annotations() {
  
  if (annotations_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::Annotations>(GetArenaNoVirtual());
    annotations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.annotations)
  return annotations_;
}
inline void ExecutionSpec::set_allocated_annotations(::nebulaidl::admin::Annotations* annotations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(annotations_);
  }
  if (annotations) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.annotations)
}

// .nebulaidl.core.SecurityContext security_context = 10;
inline bool ExecutionSpec::has_security_context() const {
  return this != internal_default_instance() && security_context_ != nullptr;
}
inline const ::nebulaidl::core::SecurityContext& ExecutionSpec::security_context() const {
  const ::nebulaidl::core::SecurityContext* p = security_context_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.security_context)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::SecurityContext*>(
      &::nebulaidl::core::_SecurityContext_default_instance_);
}
inline ::nebulaidl::core::SecurityContext* ExecutionSpec::release_security_context() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.security_context)
  
  ::nebulaidl::core::SecurityContext* temp = security_context_;
  security_context_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::SecurityContext* ExecutionSpec::mutable_security_context() {
  
  if (security_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::SecurityContext>(GetArenaNoVirtual());
    security_context_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.security_context)
  return security_context_;
}
inline void ExecutionSpec::set_allocated_security_context(::nebulaidl::core::SecurityContext* security_context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(security_context_);
  }
  if (security_context) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      security_context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, security_context, submessage_arena);
    }
    
  } else {
    
  }
  security_context_ = security_context;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.security_context)
}

// .nebulaidl.admin.AuthRole auth_role = 16 [deprecated = true];
inline bool ExecutionSpec::has_auth_role() const {
  return this != internal_default_instance() && auth_role_ != nullptr;
}
inline const ::nebulaidl::admin::AuthRole& ExecutionSpec::auth_role() const {
  const ::nebulaidl::admin::AuthRole* p = auth_role_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.auth_role)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::AuthRole*>(
      &::nebulaidl::admin::_AuthRole_default_instance_);
}
inline ::nebulaidl::admin::AuthRole* ExecutionSpec::release_auth_role() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.auth_role)
  
  ::nebulaidl::admin::AuthRole* temp = auth_role_;
  auth_role_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::AuthRole* ExecutionSpec::mutable_auth_role() {
  
  if (auth_role_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::AuthRole>(GetArenaNoVirtual());
    auth_role_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.auth_role)
  return auth_role_;
}
inline void ExecutionSpec::set_allocated_auth_role(::nebulaidl::admin::AuthRole* auth_role) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auth_role_);
  }
  if (auth_role) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_role = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth_role, submessage_arena);
    }
    
  } else {
    
  }
  auth_role_ = auth_role;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.auth_role)
}

// .nebulaidl.core.QualityOfService quality_of_service = 17;
inline bool ExecutionSpec::has_quality_of_service() const {
  return this != internal_default_instance() && quality_of_service_ != nullptr;
}
inline const ::nebulaidl::core::QualityOfService& ExecutionSpec::quality_of_service() const {
  const ::nebulaidl::core::QualityOfService* p = quality_of_service_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.quality_of_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::QualityOfService*>(
      &::nebulaidl::core::_QualityOfService_default_instance_);
}
inline ::nebulaidl::core::QualityOfService* ExecutionSpec::release_quality_of_service() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.quality_of_service)
  
  ::nebulaidl::core::QualityOfService* temp = quality_of_service_;
  quality_of_service_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::QualityOfService* ExecutionSpec::mutable_quality_of_service() {
  
  if (quality_of_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::QualityOfService>(GetArenaNoVirtual());
    quality_of_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.quality_of_service)
  return quality_of_service_;
}
inline void ExecutionSpec::set_allocated_quality_of_service(::nebulaidl::core::QualityOfService* quality_of_service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_of_service_);
  }
  if (quality_of_service) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_of_service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_of_service, submessage_arena);
    }
    
  } else {
    
  }
  quality_of_service_ = quality_of_service;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.quality_of_service)
}

// int32 max_parallelism = 18;
inline void ExecutionSpec::clear_max_parallelism() {
  max_parallelism_ = 0;
}
inline ::google::protobuf::int32 ExecutionSpec::max_parallelism() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.max_parallelism)
  return max_parallelism_;
}
inline void ExecutionSpec::set_max_parallelism(::google::protobuf::int32 value) {
  
  max_parallelism_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionSpec.max_parallelism)
}

// .nebulaidl.admin.RawOutputDataConfig raw_output_data_config = 19;
inline bool ExecutionSpec::has_raw_output_data_config() const {
  return this != internal_default_instance() && raw_output_data_config_ != nullptr;
}
inline const ::nebulaidl::admin::RawOutputDataConfig& ExecutionSpec::raw_output_data_config() const {
  const ::nebulaidl::admin::RawOutputDataConfig* p = raw_output_data_config_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.raw_output_data_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::RawOutputDataConfig*>(
      &::nebulaidl::admin::_RawOutputDataConfig_default_instance_);
}
inline ::nebulaidl::admin::RawOutputDataConfig* ExecutionSpec::release_raw_output_data_config() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.raw_output_data_config)
  
  ::nebulaidl::admin::RawOutputDataConfig* temp = raw_output_data_config_;
  raw_output_data_config_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::RawOutputDataConfig* ExecutionSpec::mutable_raw_output_data_config() {
  
  if (raw_output_data_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::RawOutputDataConfig>(GetArenaNoVirtual());
    raw_output_data_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.raw_output_data_config)
  return raw_output_data_config_;
}
inline void ExecutionSpec::set_allocated_raw_output_data_config(::nebulaidl::admin::RawOutputDataConfig* raw_output_data_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raw_output_data_config_);
  }
  if (raw_output_data_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_output_data_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_output_data_config, submessage_arena);
    }
    
  } else {
    
  }
  raw_output_data_config_ = raw_output_data_config;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.raw_output_data_config)
}

// .nebulaidl.admin.ClusterAssignment cluster_assignment = 20;
inline bool ExecutionSpec::has_cluster_assignment() const {
  return this != internal_default_instance() && cluster_assignment_ != nullptr;
}
inline const ::nebulaidl::admin::ClusterAssignment& ExecutionSpec::cluster_assignment() const {
  const ::nebulaidl::admin::ClusterAssignment* p = cluster_assignment_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.cluster_assignment)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::ClusterAssignment*>(
      &::nebulaidl::admin::_ClusterAssignment_default_instance_);
}
inline ::nebulaidl::admin::ClusterAssignment* ExecutionSpec::release_cluster_assignment() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.cluster_assignment)
  
  ::nebulaidl::admin::ClusterAssignment* temp = cluster_assignment_;
  cluster_assignment_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::ClusterAssignment* ExecutionSpec::mutable_cluster_assignment() {
  
  if (cluster_assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::ClusterAssignment>(GetArenaNoVirtual());
    cluster_assignment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.cluster_assignment)
  return cluster_assignment_;
}
inline void ExecutionSpec::set_allocated_cluster_assignment(::nebulaidl::admin::ClusterAssignment* cluster_assignment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cluster_assignment_);
  }
  if (cluster_assignment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cluster_assignment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cluster_assignment, submessage_arena);
    }
    
  } else {
    
  }
  cluster_assignment_ = cluster_assignment;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.cluster_assignment)
}

// .google.protobuf.BoolValue interruptible = 21;
inline bool ExecutionSpec::has_interruptible() const {
  return this != internal_default_instance() && interruptible_ != nullptr;
}
inline const ::google::protobuf::BoolValue& ExecutionSpec::interruptible() const {
  const ::google::protobuf::BoolValue* p = interruptible_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.interruptible)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* ExecutionSpec::release_interruptible() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.interruptible)
  
  ::google::protobuf::BoolValue* temp = interruptible_;
  interruptible_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* ExecutionSpec::mutable_interruptible() {
  
  if (interruptible_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    interruptible_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.interruptible)
  return interruptible_;
}
inline void ExecutionSpec::set_allocated_interruptible(::google::protobuf::BoolValue* interruptible) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interruptible_);
  }
  if (interruptible) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(interruptible)->GetArena();
    if (message_arena != submessage_arena) {
      interruptible = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interruptible, submessage_arena);
    }
    
  } else {
    
  }
  interruptible_ = interruptible;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.interruptible)
}

// bool overwrite_cache = 22;
inline void ExecutionSpec::clear_overwrite_cache() {
  overwrite_cache_ = false;
}
inline bool ExecutionSpec::overwrite_cache() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.overwrite_cache)
  return overwrite_cache_;
}
inline void ExecutionSpec::set_overwrite_cache(bool value) {
  
  overwrite_cache_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionSpec.overwrite_cache)
}

// .nebulaidl.admin.Envs envs = 23;
inline bool ExecutionSpec::has_envs() const {
  return this != internal_default_instance() && envs_ != nullptr;
}
inline const ::nebulaidl::admin::Envs& ExecutionSpec::envs() const {
  const ::nebulaidl::admin::Envs* p = envs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.envs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::Envs*>(
      &::nebulaidl::admin::_Envs_default_instance_);
}
inline ::nebulaidl::admin::Envs* ExecutionSpec::release_envs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionSpec.envs)
  
  ::nebulaidl::admin::Envs* temp = envs_;
  envs_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::Envs* ExecutionSpec::mutable_envs() {
  
  if (envs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::Envs>(GetArenaNoVirtual());
    envs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.envs)
  return envs_;
}
inline void ExecutionSpec::set_allocated_envs(::nebulaidl::admin::Envs* envs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envs_);
  }
  if (envs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      envs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envs, submessage_arena);
    }
    
  } else {
    
  }
  envs_ = envs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionSpec.envs)
}

// repeated string tags = 24;
inline int ExecutionSpec::tags_size() const {
  return tags_.size();
}
inline void ExecutionSpec::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& ExecutionSpec::tags(int index) const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionSpec.tags)
  return tags_.Get(index);
}
inline ::std::string* ExecutionSpec::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionSpec.tags)
  return tags_.Mutable(index);
}
inline void ExecutionSpec::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionSpec.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ExecutionSpec::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionSpec.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ExecutionSpec::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.ExecutionSpec.tags)
}
inline void ExecutionSpec::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.ExecutionSpec.tags)
}
inline ::std::string* ExecutionSpec::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:nebulaidl.admin.ExecutionSpec.tags)
  return tags_.Add();
}
inline void ExecutionSpec::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nebulaidl.admin.ExecutionSpec.tags)
}
#if LANG_CXX11
inline void ExecutionSpec::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nebulaidl.admin.ExecutionSpec.tags)
}
#endif
inline void ExecutionSpec::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nebulaidl.admin.ExecutionSpec.tags)
}
inline void ExecutionSpec::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nebulaidl.admin.ExecutionSpec.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ExecutionSpec::tags() const {
  // @@protoc_insertion_point(field_list:nebulaidl.admin.ExecutionSpec.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ExecutionSpec::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:nebulaidl.admin.ExecutionSpec.tags)
  return &tags_;
}

inline bool ExecutionSpec::has_notification_overrides() const {
  return notification_overrides_case() != NOTIFICATION_OVERRIDES_NOT_SET;
}
inline void ExecutionSpec::clear_has_notification_overrides() {
  _oneof_case_[0] = NOTIFICATION_OVERRIDES_NOT_SET;
}
inline ExecutionSpec::NotificationOverridesCase ExecutionSpec::notification_overrides_case() const {
  return ExecutionSpec::NotificationOverridesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExecutionTerminateRequest

// .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
inline bool ExecutionTerminateRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& ExecutionTerminateRequest::id() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionTerminateRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionTerminateRequest::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionTerminateRequest.id)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionTerminateRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionTerminateRequest.id)
  return id_;
}
inline void ExecutionTerminateRequest::set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionTerminateRequest.id)
}

// string cause = 2;
inline void ExecutionTerminateRequest::clear_cause() {
  cause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionTerminateRequest::cause() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionTerminateRequest.cause)
  return cause_.GetNoArena();
}
inline void ExecutionTerminateRequest::set_cause(const ::std::string& value) {
  
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionTerminateRequest.cause)
}
#if LANG_CXX11
inline void ExecutionTerminateRequest::set_cause(::std::string&& value) {
  
  cause_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.ExecutionTerminateRequest.cause)
}
#endif
inline void ExecutionTerminateRequest::set_cause(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.ExecutionTerminateRequest.cause)
}
inline void ExecutionTerminateRequest::set_cause(const char* value, size_t size) {
  
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.ExecutionTerminateRequest.cause)
}
inline ::std::string* ExecutionTerminateRequest::mutable_cause() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionTerminateRequest.cause)
  return cause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionTerminateRequest::release_cause() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionTerminateRequest.cause)
  
  return cause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionTerminateRequest::set_allocated_cause(::std::string* cause) {
  if (cause != nullptr) {
    
  } else {
    
  }
  cause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cause);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionTerminateRequest.cause)
}

// -------------------------------------------------------------------

// ExecutionTerminateResponse

// -------------------------------------------------------------------

// WorkflowExecutionGetDataRequest

// .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
inline bool WorkflowExecutionGetDataRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& WorkflowExecutionGetDataRequest::id() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.WorkflowExecutionGetDataRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* WorkflowExecutionGetDataRequest::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.WorkflowExecutionGetDataRequest.id)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* WorkflowExecutionGetDataRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.WorkflowExecutionGetDataRequest.id)
  return id_;
}
inline void WorkflowExecutionGetDataRequest::set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.WorkflowExecutionGetDataRequest.id)
}

// -------------------------------------------------------------------

// WorkflowExecutionGetDataResponse

// .nebulaidl.admin.UrlBlob outputs = 1 [deprecated = true];
inline bool WorkflowExecutionGetDataResponse::has_outputs() const {
  return this != internal_default_instance() && outputs_ != nullptr;
}
inline const ::nebulaidl::admin::UrlBlob& WorkflowExecutionGetDataResponse::outputs() const {
  const ::nebulaidl::admin::UrlBlob* p = outputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.WorkflowExecutionGetDataResponse.outputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::UrlBlob*>(
      &::nebulaidl::admin::_UrlBlob_default_instance_);
}
inline ::nebulaidl::admin::UrlBlob* WorkflowExecutionGetDataResponse::release_outputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.WorkflowExecutionGetDataResponse.outputs)
  
  ::nebulaidl::admin::UrlBlob* temp = outputs_;
  outputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::UrlBlob* WorkflowExecutionGetDataResponse::mutable_outputs() {
  
  if (outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::UrlBlob>(GetArenaNoVirtual());
    outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.WorkflowExecutionGetDataResponse.outputs)
  return outputs_;
}
inline void WorkflowExecutionGetDataResponse::set_allocated_outputs(::nebulaidl::admin::UrlBlob* outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(outputs_);
  }
  if (outputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    
  } else {
    
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.WorkflowExecutionGetDataResponse.outputs)
}

// .nebulaidl.admin.UrlBlob inputs = 2 [deprecated = true];
inline bool WorkflowExecutionGetDataResponse::has_inputs() const {
  return this != internal_default_instance() && inputs_ != nullptr;
}
inline const ::nebulaidl::admin::UrlBlob& WorkflowExecutionGetDataResponse::inputs() const {
  const ::nebulaidl::admin::UrlBlob* p = inputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.WorkflowExecutionGetDataResponse.inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::UrlBlob*>(
      &::nebulaidl::admin::_UrlBlob_default_instance_);
}
inline ::nebulaidl::admin::UrlBlob* WorkflowExecutionGetDataResponse::release_inputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.WorkflowExecutionGetDataResponse.inputs)
  
  ::nebulaidl::admin::UrlBlob* temp = inputs_;
  inputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::UrlBlob* WorkflowExecutionGetDataResponse::mutable_inputs() {
  
  if (inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::UrlBlob>(GetArenaNoVirtual());
    inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.WorkflowExecutionGetDataResponse.inputs)
  return inputs_;
}
inline void WorkflowExecutionGetDataResponse::set_allocated_inputs(::nebulaidl::admin::UrlBlob* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.WorkflowExecutionGetDataResponse.inputs)
}

// .nebulaidl.core.LiteralMap full_inputs = 3;
inline bool WorkflowExecutionGetDataResponse::has_full_inputs() const {
  return this != internal_default_instance() && full_inputs_ != nullptr;
}
inline const ::nebulaidl::core::LiteralMap& WorkflowExecutionGetDataResponse::full_inputs() const {
  const ::nebulaidl::core::LiteralMap* p = full_inputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.WorkflowExecutionGetDataResponse.full_inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::LiteralMap*>(
      &::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* WorkflowExecutionGetDataResponse::release_full_inputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.WorkflowExecutionGetDataResponse.full_inputs)
  
  ::nebulaidl::core::LiteralMap* temp = full_inputs_;
  full_inputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::LiteralMap* WorkflowExecutionGetDataResponse::mutable_full_inputs() {
  
  if (full_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::LiteralMap>(GetArenaNoVirtual());
    full_inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.WorkflowExecutionGetDataResponse.full_inputs)
  return full_inputs_;
}
inline void WorkflowExecutionGetDataResponse::set_allocated_full_inputs(::nebulaidl::core::LiteralMap* full_inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(full_inputs_);
  }
  if (full_inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      full_inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, full_inputs, submessage_arena);
    }
    
  } else {
    
  }
  full_inputs_ = full_inputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.WorkflowExecutionGetDataResponse.full_inputs)
}

// .nebulaidl.core.LiteralMap full_outputs = 4;
inline bool WorkflowExecutionGetDataResponse::has_full_outputs() const {
  return this != internal_default_instance() && full_outputs_ != nullptr;
}
inline const ::nebulaidl::core::LiteralMap& WorkflowExecutionGetDataResponse::full_outputs() const {
  const ::nebulaidl::core::LiteralMap* p = full_outputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.WorkflowExecutionGetDataResponse.full_outputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::LiteralMap*>(
      &::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* WorkflowExecutionGetDataResponse::release_full_outputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.WorkflowExecutionGetDataResponse.full_outputs)
  
  ::nebulaidl::core::LiteralMap* temp = full_outputs_;
  full_outputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::LiteralMap* WorkflowExecutionGetDataResponse::mutable_full_outputs() {
  
  if (full_outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::LiteralMap>(GetArenaNoVirtual());
    full_outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.WorkflowExecutionGetDataResponse.full_outputs)
  return full_outputs_;
}
inline void WorkflowExecutionGetDataResponse::set_allocated_full_outputs(::nebulaidl::core::LiteralMap* full_outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(full_outputs_);
  }
  if (full_outputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      full_outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, full_outputs, submessage_arena);
    }
    
  } else {
    
  }
  full_outputs_ = full_outputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.WorkflowExecutionGetDataResponse.full_outputs)
}

// -------------------------------------------------------------------

// ExecutionUpdateRequest

// .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
inline bool ExecutionUpdateRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& ExecutionUpdateRequest::id() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionUpdateRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionUpdateRequest::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionUpdateRequest.id)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* ExecutionUpdateRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionUpdateRequest.id)
  return id_;
}
inline void ExecutionUpdateRequest::set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionUpdateRequest.id)
}

// .nebulaidl.admin.ExecutionState state = 2;
inline void ExecutionUpdateRequest::clear_state() {
  state_ = 0;
}
inline ::nebulaidl::admin::ExecutionState ExecutionUpdateRequest::state() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionUpdateRequest.state)
  return static_cast< ::nebulaidl::admin::ExecutionState >(state_);
}
inline void ExecutionUpdateRequest::set_state(::nebulaidl::admin::ExecutionState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionUpdateRequest.state)
}

// -------------------------------------------------------------------

// ExecutionStateChangeDetails

// .nebulaidl.admin.ExecutionState state = 1;
inline void ExecutionStateChangeDetails::clear_state() {
  state_ = 0;
}
inline ::nebulaidl::admin::ExecutionState ExecutionStateChangeDetails::state() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionStateChangeDetails.state)
  return static_cast< ::nebulaidl::admin::ExecutionState >(state_);
}
inline void ExecutionStateChangeDetails::set_state(::nebulaidl::admin::ExecutionState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionStateChangeDetails.state)
}

// .google.protobuf.Timestamp occurred_at = 2;
inline bool ExecutionStateChangeDetails::has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ExecutionStateChangeDetails::occurred_at() const {
  const ::google::protobuf::Timestamp* p = occurred_at_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionStateChangeDetails.occurred_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ExecutionStateChangeDetails::release_occurred_at() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionStateChangeDetails.occurred_at)
  
  ::google::protobuf::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ExecutionStateChangeDetails::mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    occurred_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionStateChangeDetails.occurred_at)
  return occurred_at_;
}
inline void ExecutionStateChangeDetails::set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(occurred_at)->GetArena();
    if (message_arena != submessage_arena) {
      occurred_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionStateChangeDetails.occurred_at)
}

// string principal = 3;
inline void ExecutionStateChangeDetails::clear_principal() {
  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionStateChangeDetails::principal() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.ExecutionStateChangeDetails.principal)
  return principal_.GetNoArena();
}
inline void ExecutionStateChangeDetails::set_principal(const ::std::string& value) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.ExecutionStateChangeDetails.principal)
}
#if LANG_CXX11
inline void ExecutionStateChangeDetails::set_principal(::std::string&& value) {
  
  principal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.ExecutionStateChangeDetails.principal)
}
#endif
inline void ExecutionStateChangeDetails::set_principal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.ExecutionStateChangeDetails.principal)
}
inline void ExecutionStateChangeDetails::set_principal(const char* value, size_t size) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.ExecutionStateChangeDetails.principal)
}
inline ::std::string* ExecutionStateChangeDetails::mutable_principal() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.ExecutionStateChangeDetails.principal)
  return principal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionStateChangeDetails::release_principal() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.ExecutionStateChangeDetails.principal)
  
  return principal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionStateChangeDetails::set_allocated_principal(::std::string* principal) {
  if (principal != nullptr) {
    
  } else {
    
  }
  principal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), principal);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.ExecutionStateChangeDetails.principal)
}

// -------------------------------------------------------------------

// ExecutionUpdateResponse

// -------------------------------------------------------------------

// WorkflowExecutionGetMetricsRequest

// .nebulaidl.core.WorkflowExecutionIdentifier id = 1;
inline bool WorkflowExecutionGetMetricsRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& WorkflowExecutionGetMetricsRequest::id() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.WorkflowExecutionGetMetricsRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* WorkflowExecutionGetMetricsRequest::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.WorkflowExecutionGetMetricsRequest.id)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* WorkflowExecutionGetMetricsRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.WorkflowExecutionGetMetricsRequest.id)
  return id_;
}
inline void WorkflowExecutionGetMetricsRequest::set_allocated_id(::nebulaidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.WorkflowExecutionGetMetricsRequest.id)
}

// int32 depth = 2;
inline void WorkflowExecutionGetMetricsRequest::clear_depth() {
  depth_ = 0;
}
inline ::google::protobuf::int32 WorkflowExecutionGetMetricsRequest::depth() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.WorkflowExecutionGetMetricsRequest.depth)
  return depth_;
}
inline void WorkflowExecutionGetMetricsRequest::set_depth(::google::protobuf::int32 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.WorkflowExecutionGetMetricsRequest.depth)
}

// -------------------------------------------------------------------

// WorkflowExecutionGetMetricsResponse

// .nebulaidl.core.Span span = 1;
inline bool WorkflowExecutionGetMetricsResponse::has_span() const {
  return this != internal_default_instance() && span_ != nullptr;
}
inline const ::nebulaidl::core::Span& WorkflowExecutionGetMetricsResponse::span() const {
  const ::nebulaidl::core::Span* p = span_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.WorkflowExecutionGetMetricsResponse.span)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::Span*>(
      &::nebulaidl::core::_Span_default_instance_);
}
inline ::nebulaidl::core::Span* WorkflowExecutionGetMetricsResponse::release_span() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.WorkflowExecutionGetMetricsResponse.span)
  
  ::nebulaidl::core::Span* temp = span_;
  span_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::Span* WorkflowExecutionGetMetricsResponse::mutable_span() {
  
  if (span_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::Span>(GetArenaNoVirtual());
    span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.WorkflowExecutionGetMetricsResponse.span)
  return span_;
}
inline void WorkflowExecutionGetMetricsResponse::set_allocated_span(::nebulaidl::core::Span* span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(span_);
  }
  if (span) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.WorkflowExecutionGetMetricsResponse.span)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace nebulaidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::nebulaidl::admin::ExecutionMetadata_ExecutionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nebulaidl::admin::ExecutionMetadata_ExecutionMode>() {
  return ::nebulaidl::admin::ExecutionMetadata_ExecutionMode_descriptor();
}
template <> struct is_proto_enum< ::nebulaidl::admin::ExecutionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nebulaidl::admin::ExecutionState>() {
  return ::nebulaidl::admin::ExecutionState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_nebulaidl_2fadmin_2fexecution_2eproto
