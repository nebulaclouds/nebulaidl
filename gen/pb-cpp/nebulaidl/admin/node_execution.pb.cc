// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulaidl/admin/node_execution.proto

#include "nebulaidl/admin/node_execution.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NebulaURLs_nebulaidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sort_nebulaidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UrlBlob_nebulaidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fnode_5fexecution_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeExecutionMetaData_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fnode_5fexecution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TaskNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fnode_5fexecution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fnode_5fexecution_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DynamicWorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fnode_5fexecution_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_NodeExecution_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fnode_5fexecution_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_NodeExecutionClosure_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2fcatalog_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CatalogMetadata_nebulaidl_2fcore_2fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2fcompiler_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CompiledWorkflowClosure_nebulaidl_2fcore_2fcompiler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExecutionError_nebulaidl_2fcore_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_nebulaidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TaskExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Literal_nebulaidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace nebulaidl {
namespace admin {
class NodeExecutionGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeExecutionGetRequest> _instance;
} _NodeExecutionGetRequest_default_instance_;
class NodeExecutionListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeExecutionListRequest> _instance;
} _NodeExecutionListRequest_default_instance_;
class NodeExecutionForTaskListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeExecutionForTaskListRequest> _instance;
} _NodeExecutionForTaskListRequest_default_instance_;
class NodeExecutionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeExecution> _instance;
} _NodeExecution_default_instance_;
class NodeExecutionMetaDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeExecutionMetaData> _instance;
} _NodeExecutionMetaData_default_instance_;
class NodeExecutionListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeExecutionList> _instance;
} _NodeExecutionList_default_instance_;
class NodeExecutionClosureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeExecutionClosure> _instance;
  ::google::protobuf::internal::ArenaStringPtr output_uri_;
  const ::nebulaidl::core::ExecutionError* error_;
  const ::nebulaidl::core::LiteralMap* output_data_;
  const ::nebulaidl::admin::WorkflowNodeMetadata* workflow_node_metadata_;
  const ::nebulaidl::admin::TaskNodeMetadata* task_node_metadata_;
} _NodeExecutionClosure_default_instance_;
class WorkflowNodeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowNodeMetadata> _instance;
} _WorkflowNodeMetadata_default_instance_;
class TaskNodeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskNodeMetadata> _instance;
} _TaskNodeMetadata_default_instance_;
class DynamicWorkflowNodeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DynamicWorkflowNodeMetadata> _instance;
} _DynamicWorkflowNodeMetadata_default_instance_;
class NodeExecutionGetDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeExecutionGetDataRequest> _instance;
} _NodeExecutionGetDataRequest_default_instance_;
class NodeExecutionGetDataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeExecutionGetDataResponse> _instance;
} _NodeExecutionGetDataResponse_default_instance_;
}  // namespace admin
}  // namespace nebulaidl
static void InitDefaultsNodeExecutionGetRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_NodeExecutionGetRequest_default_instance_;
    new (ptr) ::nebulaidl::admin::NodeExecutionGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::NodeExecutionGetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NodeExecutionGetRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNodeExecutionGetRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {
      &scc_info_NodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsNodeExecutionListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_NodeExecutionListRequest_default_instance_;
    new (ptr) ::nebulaidl::admin::NodeExecutionListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::NodeExecutionListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NodeExecutionListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNodeExecutionListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_Sort_nebulaidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsNodeExecutionForTaskListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_NodeExecutionForTaskListRequest_default_instance_;
    new (ptr) ::nebulaidl::admin::NodeExecutionForTaskListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::NodeExecutionForTaskListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NodeExecutionForTaskListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNodeExecutionForTaskListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {
      &scc_info_TaskExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_Sort_nebulaidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsNodeExecution_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_NodeExecution_default_instance_;
    new (ptr) ::nebulaidl::admin::NodeExecution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::NodeExecution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_NodeExecution_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsNodeExecution_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {
      &scc_info_NodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_NodeExecutionClosure_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base,
      &scc_info_NodeExecutionMetaData_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base,}};

static void InitDefaultsNodeExecutionMetaData_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_NodeExecutionMetaData_default_instance_;
    new (ptr) ::nebulaidl::admin::NodeExecutionMetaData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::NodeExecutionMetaData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeExecutionMetaData_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeExecutionMetaData_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {}};

static void InitDefaultsNodeExecutionList_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_NodeExecutionList_default_instance_;
    new (ptr) ::nebulaidl::admin::NodeExecutionList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::NodeExecutionList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NodeExecutionList_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNodeExecutionList_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {
      &scc_info_NodeExecution_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base,}};

static void InitDefaultsNodeExecutionClosure_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_NodeExecutionClosure_default_instance_;
    new (ptr) ::nebulaidl::admin::NodeExecutionClosure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::NodeExecutionClosure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_NodeExecutionClosure_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsNodeExecutionClosure_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {
      &scc_info_ExecutionError_nebulaidl_2fcore_2fexecution_2eproto.base,
      &scc_info_Literal_nebulaidl_2fcore_2fliterals_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_WorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base,
      &scc_info_TaskNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base,}};

static void InitDefaultsWorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_WorkflowNodeMetadata_default_instance_;
    new (ptr) ::nebulaidl::admin::WorkflowNodeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::WorkflowNodeMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsTaskNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_TaskNodeMetadata_default_instance_;
    new (ptr) ::nebulaidl::admin::TaskNodeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::TaskNodeMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TaskNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTaskNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {
      &scc_info_CatalogMetadata_nebulaidl_2fcore_2fcatalog_2eproto.base,}};

static void InitDefaultsDynamicWorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_DynamicWorkflowNodeMetadata_default_instance_;
    new (ptr) ::nebulaidl::admin::DynamicWorkflowNodeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::DynamicWorkflowNodeMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DynamicWorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDynamicWorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {
      &scc_info_Identifier_nebulaidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_CompiledWorkflowClosure_nebulaidl_2fcore_2fcompiler_2eproto.base,}};

static void InitDefaultsNodeExecutionGetDataRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_NodeExecutionGetDataRequest_default_instance_;
    new (ptr) ::nebulaidl::admin::NodeExecutionGetDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::NodeExecutionGetDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NodeExecutionGetDataRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNodeExecutionGetDataRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {
      &scc_info_NodeExecutionIdentifier_nebulaidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsNodeExecutionGetDataResponse_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulaidl::admin::_NodeExecutionGetDataResponse_default_instance_;
    new (ptr) ::nebulaidl::admin::NodeExecutionGetDataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulaidl::admin::NodeExecutionGetDataResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_NodeExecutionGetDataResponse_nebulaidl_2fadmin_2fnode_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsNodeExecutionGetDataResponse_nebulaidl_2fadmin_2fnode_5fexecution_2eproto}, {
      &scc_info_UrlBlob_nebulaidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_Literal_nebulaidl_2fcore_2fliterals_2eproto.base,
      &scc_info_DynamicWorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base,
      &scc_info_NebulaURLs_nebulaidl_2fadmin_2fcommon_2eproto.base,}};

void InitDefaults_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_NodeExecutionGetRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeExecutionListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeExecutionForTaskListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeExecution_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeExecutionMetaData_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeExecutionList_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeExecutionClosure_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DynamicWorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeExecutionGetDataRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeExecutionGetDataResponse_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[12];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_nebulaidl_2fadmin_2fnode_5fexecution_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_nebulaidl_2fadmin_2fnode_5fexecution_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionGetRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionListRequest, workflow_execution_id_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionListRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionListRequest, sort_by_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionListRequest, unique_parent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionForTaskListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionForTaskListRequest, task_execution_id_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionForTaskListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionForTaskListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionForTaskListRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionForTaskListRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecution, id_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecution, input_uri_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecution, closure_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecution, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionMetaData, retry_group_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionMetaData, is_parent_node_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionMetaData, spec_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionMetaData, is_dynamic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionList, node_executions_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionClosure, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::nebulaidl::admin::NodeExecutionClosureDefaultTypeInternal, output_uri_),
  offsetof(::nebulaidl::admin::NodeExecutionClosureDefaultTypeInternal, error_),
  offsetof(::nebulaidl::admin::NodeExecutionClosureDefaultTypeInternal, output_data_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionClosure, phase_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionClosure, started_at_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionClosure, duration_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionClosure, created_at_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionClosure, updated_at_),
  offsetof(::nebulaidl::admin::NodeExecutionClosureDefaultTypeInternal, workflow_node_metadata_),
  offsetof(::nebulaidl::admin::NodeExecutionClosureDefaultTypeInternal, task_node_metadata_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionClosure, deck_uri_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionClosure, dynamic_job_spec_uri_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionClosure, output_result_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionClosure, target_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::WorkflowNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::WorkflowNodeMetadata, executionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::TaskNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::TaskNodeMetadata, cache_status_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::TaskNodeMetadata, catalog_key_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::TaskNodeMetadata, checkpoint_uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::DynamicWorkflowNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::DynamicWorkflowNodeMetadata, id_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::DynamicWorkflowNodeMetadata, compiled_workflow_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::DynamicWorkflowNodeMetadata, dynamic_job_spec_uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionGetDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionGetDataRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionGetDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionGetDataResponse, inputs_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionGetDataResponse, outputs_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionGetDataResponse, full_inputs_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionGetDataResponse, full_outputs_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionGetDataResponse, dynamic_workflow_),
  PROTOBUF_FIELD_OFFSET(::nebulaidl::admin::NodeExecutionGetDataResponse, nebula_urls_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nebulaidl::admin::NodeExecutionGetRequest)},
  { 6, -1, sizeof(::nebulaidl::admin::NodeExecutionListRequest)},
  { 17, -1, sizeof(::nebulaidl::admin::NodeExecutionForTaskListRequest)},
  { 27, -1, sizeof(::nebulaidl::admin::NodeExecution)},
  { 36, -1, sizeof(::nebulaidl::admin::NodeExecutionMetaData)},
  { 45, -1, sizeof(::nebulaidl::admin::NodeExecutionList)},
  { 52, -1, sizeof(::nebulaidl::admin::NodeExecutionClosure)},
  { 71, -1, sizeof(::nebulaidl::admin::WorkflowNodeMetadata)},
  { 77, -1, sizeof(::nebulaidl::admin::TaskNodeMetadata)},
  { 85, -1, sizeof(::nebulaidl::admin::DynamicWorkflowNodeMetadata)},
  { 93, -1, sizeof(::nebulaidl::admin::NodeExecutionGetDataRequest)},
  { 99, -1, sizeof(::nebulaidl::admin::NodeExecutionGetDataResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_NodeExecutionGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_NodeExecutionListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_NodeExecutionForTaskListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_NodeExecution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_NodeExecutionMetaData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_NodeExecutionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_NodeExecutionClosure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_WorkflowNodeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_TaskNodeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_DynamicWorkflowNodeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_NodeExecutionGetDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulaidl::admin::_NodeExecutionGetDataResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto = {
  {}, AddDescriptors_nebulaidl_2fadmin_2fnode_5fexecution_2eproto, "nebulaidl/admin/node_execution.proto", schemas,
  file_default_instances, TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto::offsets,
  file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto, 12, file_level_enum_descriptors_nebulaidl_2fadmin_2fnode_5fexecution_2eproto, file_level_service_descriptors_nebulaidl_2fadmin_2fnode_5fexecution_2eproto,
};

const char descriptor_table_protodef_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[] =
  "\n#nebulaidl/admin/node_execution.proto\022\016f"
  "lyteidl.admin\032\033nebulaidl/admin/common.pro"
  "to\032\035nebulaidl/core/execution.proto\032\033nebula"
  "idl/core/catalog.proto\032\034nebulaidl/core/co"
  "mpiler.proto\032\036nebulaidl/core/identifier.p"
  "roto\032\034nebulaidl/core/literals.proto\032\037goog"
  "le/protobuf/timestamp.proto\032\036google/prot"
  "obuf/duration.proto\"M\n\027NodeExecutionGetR"
  "equest\0222\n\002id\030\001 \001(\0132&.nebulaidl.core.NodeE"
  "xecutionIdentifier\"\325\001\n\030NodeExecutionList"
  "Request\022I\n\025workflow_execution_id\030\001 \001(\0132*"
  ".nebulaidl.core.WorkflowExecutionIdentifi"
  "er\022\r\n\005limit\030\002 \001(\r\022\r\n\005token\030\003 \001(\t\022\017\n\007filt"
  "ers\030\004 \001(\t\022%\n\007sort_by\030\005 \001(\0132\024.nebulaidl.ad"
  "min.Sort\022\030\n\020unique_parent_id\030\006 \001(\t\"\272\001\n\037N"
  "odeExecutionForTaskListRequest\022A\n\021task_e"
  "xecution_id\030\001 \001(\0132&.nebulaidl.core.TaskEx"
  "ecutionIdentifier\022\r\n\005limit\030\002 \001(\r\022\r\n\005toke"
  "n\030\003 \001(\t\022\017\n\007filters\030\004 \001(\t\022%\n\007sort_by\030\005 \001("
  "\0132\024.nebulaidl.admin.Sort\"\306\001\n\rNodeExecutio"
  "n\0222\n\002id\030\001 \001(\0132&.nebulaidl.core.NodeExecut"
  "ionIdentifier\022\021\n\tinput_uri\030\002 \001(\t\0225\n\007clos"
  "ure\030\003 \001(\0132$.nebulaidl.admin.NodeExecution"
  "Closure\0227\n\010metadata\030\004 \001(\0132%.nebulaidl.adm"
  "in.NodeExecutionMetaData\"n\n\025NodeExecutio"
  "nMetaData\022\023\n\013retry_group\030\001 \001(\t\022\026\n\016is_par"
  "ent_node\030\002 \001(\010\022\024\n\014spec_node_id\030\003 \001(\t\022\022\n\n"
  "is_dynamic\030\004 \001(\010\"Z\n\021NodeExecutionList\0226\n"
  "\017node_executions\030\001 \003(\0132\035.nebulaidl.admin."
  "NodeExecution\022\r\n\005token\030\002 \001(\t\"\342\004\n\024NodeExe"
  "cutionClosure\022\030\n\noutput_uri\030\001 \001(\tB\002\030\001H\000\022"
  ".\n\005error\030\002 \001(\0132\035.nebulaidl.core.Execution"
  "ErrorH\000\0224\n\013output_data\030\n \001(\0132\031.nebulaidl."
  "core.LiteralMapB\002\030\001H\000\0221\n\005phase\030\003 \001(\0162\".f"
  "lyteidl.core.NodeExecution.Phase\022.\n\nstar"
  "ted_at\030\004 \001(\0132\032.google.protobuf.Timestamp"
  "\022+\n\010duration\030\005 \001(\0132\031.google.protobuf.Dur"
  "ation\022.\n\ncreated_at\030\006 \001(\0132\032.google.proto"
  "buf.Timestamp\022.\n\nupdated_at\030\007 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022F\n\026workflow_node_m"
  "etadata\030\010 \001(\0132$.nebulaidl.admin.WorkflowN"
  "odeMetadataH\001\022>\n\022task_node_metadata\030\t \001("
  "\0132 .nebulaidl.admin.TaskNodeMetadataH\001\022\020\n"
  "\010deck_uri\030\013 \001(\t\022\034\n\024dynamic_job_spec_uri\030"
  "\014 \001(\tB\017\n\routput_resultB\021\n\017target_metadat"
  "a\"W\n\024WorkflowNodeMetadata\022\?\n\013executionId"
  "\030\001 \001(\0132*.nebulaidl.core.WorkflowExecution"
  "Identifier\"\230\001\n\020TaskNodeMetadata\0227\n\014cache"
  "_status\030\001 \001(\0162!.nebulaidl.core.CatalogCac"
  "heStatus\0223\n\013catalog_key\030\002 \001(\0132\036.nebulaidl"
  ".core.CatalogMetadata\022\026\n\016checkpoint_uri\030"
  "\004 \001(\t\"\245\001\n\033DynamicWorkflowNodeMetadata\022%\n"
  "\002id\030\001 \001(\0132\031.nebulaidl.core.Identifier\022A\n\021"
  "compiled_workflow\030\002 \001(\0132&.nebulaidl.core."
  "CompiledWorkflowClosure\022\034\n\024dynamic_job_s"
  "pec_uri\030\003 \001(\t\"Q\n\033NodeExecutionGetDataReq"
  "uest\0222\n\002id\030\001 \001(\0132&.nebulaidl.core.NodeExe"
  "cutionIdentifier\"\320\002\n\034NodeExecutionGetDat"
  "aResponse\022+\n\006inputs\030\001 \001(\0132\027.nebulaidl.adm"
  "in.UrlBlobB\002\030\001\022,\n\007outputs\030\002 \001(\0132\027.nebulai"
  "dl.admin.UrlBlobB\002\030\001\022.\n\013full_inputs\030\003 \001("
  "\0132\031.nebulaidl.core.LiteralMap\022/\n\014full_out"
  "puts\030\004 \001(\0132\031.nebulaidl.core.LiteralMap\022E\n"
  "\020dynamic_workflow\030\020 \001(\0132+.nebulaidl.admin"
  ".DynamicWorkflowNodeMetadata\022-\n\nnebula_ur"
  "ls\030\021 \001(\0132\031.nebulaidl.admin.NebulaURLsB7Z5g"
  "ithub.com/nebulaclouds/nebulaidl/gen/pb-go/fl"
  "yteidl/adminb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto = {
  false, InitDefaults_nebulaidl_2fadmin_2fnode_5fexecution_2eproto,
  descriptor_table_protodef_nebulaidl_2fadmin_2fnode_5fexecution_2eproto,
  "nebulaidl/admin/node_execution.proto", &assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto, 2700,
};

void AddDescriptors_nebulaidl_2fadmin_2fnode_5fexecution_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[8] =
  {
    ::AddDescriptors_nebulaidl_2fadmin_2fcommon_2eproto,
    ::AddDescriptors_nebulaidl_2fcore_2fexecution_2eproto,
    ::AddDescriptors_nebulaidl_2fcore_2fcatalog_2eproto,
    ::AddDescriptors_nebulaidl_2fcore_2fcompiler_2eproto,
    ::AddDescriptors_nebulaidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_nebulaidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fduration_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto, deps, 8);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nebulaidl_2fadmin_2fnode_5fexecution_2eproto = []() { AddDescriptors_nebulaidl_2fadmin_2fnode_5fexecution_2eproto(); return true; }();
namespace nebulaidl {
namespace admin {

// ===================================================================

void NodeExecutionGetRequest::InitAsDefaultInstance() {
  ::nebulaidl::admin::_NodeExecutionGetRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::nebulaidl::core::NodeExecutionIdentifier*>(
      ::nebulaidl::core::NodeExecutionIdentifier::internal_default_instance());
}
class NodeExecutionGetRequest::HasBitSetters {
 public:
  static const ::nebulaidl::core::NodeExecutionIdentifier& id(const NodeExecutionGetRequest* msg);
};

const ::nebulaidl::core::NodeExecutionIdentifier&
NodeExecutionGetRequest::HasBitSetters::id(const NodeExecutionGetRequest* msg) {
  return *msg->id_;
}
void NodeExecutionGetRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecutionGetRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecutionGetRequest::NodeExecutionGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.NodeExecutionGetRequest)
}
NodeExecutionGetRequest::NodeExecutionGetRequest(const NodeExecutionGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::nebulaidl::core::NodeExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.NodeExecutionGetRequest)
}

void NodeExecutionGetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeExecutionGetRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  id_ = nullptr;
}

NodeExecutionGetRequest::~NodeExecutionGetRequest() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.NodeExecutionGetRequest)
  SharedDtor();
}

void NodeExecutionGetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void NodeExecutionGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeExecutionGetRequest& NodeExecutionGetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeExecutionGetRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void NodeExecutionGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.NodeExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeExecutionGetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeExecutionGetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.core.NodeExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::NodeExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeExecutionGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.NodeExecutionGetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.core.NodeExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.NodeExecutionGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.NodeExecutionGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeExecutionGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.NodeExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.NodeExecutionGetRequest)
}

::google::protobuf::uint8* NodeExecutionGetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.NodeExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.NodeExecutionGetRequest)
  return target;
}

size_t NodeExecutionGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.NodeExecutionGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExecutionGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.NodeExecutionGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecutionGetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NodeExecutionGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.NodeExecutionGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.NodeExecutionGetRequest)
    MergeFrom(*source);
  }
}

void NodeExecutionGetRequest::MergeFrom(const NodeExecutionGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.NodeExecutionGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::nebulaidl::core::NodeExecutionIdentifier::MergeFrom(from.id());
  }
}

void NodeExecutionGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.NodeExecutionGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecutionGetRequest::CopyFrom(const NodeExecutionGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.NodeExecutionGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecutionGetRequest::IsInitialized() const {
  return true;
}

void NodeExecutionGetRequest::Swap(NodeExecutionGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeExecutionGetRequest::InternalSwap(NodeExecutionGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata NodeExecutionGetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeExecutionListRequest::InitAsDefaultInstance() {
  ::nebulaidl::admin::_NodeExecutionListRequest_default_instance_._instance.get_mutable()->workflow_execution_id_ = const_cast< ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      ::nebulaidl::core::WorkflowExecutionIdentifier::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionListRequest_default_instance_._instance.get_mutable()->sort_by_ = const_cast< ::nebulaidl::admin::Sort*>(
      ::nebulaidl::admin::Sort::internal_default_instance());
}
class NodeExecutionListRequest::HasBitSetters {
 public:
  static const ::nebulaidl::core::WorkflowExecutionIdentifier& workflow_execution_id(const NodeExecutionListRequest* msg);
  static const ::nebulaidl::admin::Sort& sort_by(const NodeExecutionListRequest* msg);
};

const ::nebulaidl::core::WorkflowExecutionIdentifier&
NodeExecutionListRequest::HasBitSetters::workflow_execution_id(const NodeExecutionListRequest* msg) {
  return *msg->workflow_execution_id_;
}
const ::nebulaidl::admin::Sort&
NodeExecutionListRequest::HasBitSetters::sort_by(const NodeExecutionListRequest* msg) {
  return *msg->sort_by_;
}
void NodeExecutionListRequest::clear_workflow_execution_id() {
  if (GetArenaNoVirtual() == nullptr && workflow_execution_id_ != nullptr) {
    delete workflow_execution_id_;
  }
  workflow_execution_id_ = nullptr;
}
void NodeExecutionListRequest::clear_sort_by() {
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecutionListRequest::kWorkflowExecutionIdFieldNumber;
const int NodeExecutionListRequest::kLimitFieldNumber;
const int NodeExecutionListRequest::kTokenFieldNumber;
const int NodeExecutionListRequest::kFiltersFieldNumber;
const int NodeExecutionListRequest::kSortByFieldNumber;
const int NodeExecutionListRequest::kUniqueParentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecutionListRequest::NodeExecutionListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.NodeExecutionListRequest)
}
NodeExecutionListRequest::NodeExecutionListRequest(const NodeExecutionListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filters().size() > 0) {
    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  unique_parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unique_parent_id().size() > 0) {
    unique_parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unique_parent_id_);
  }
  if (from.has_workflow_execution_id()) {
    workflow_execution_id_ = new ::nebulaidl::core::WorkflowExecutionIdentifier(*from.workflow_execution_id_);
  } else {
    workflow_execution_id_ = nullptr;
  }
  if (from.has_sort_by()) {
    sort_by_ = new ::nebulaidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.NodeExecutionListRequest)
}

void NodeExecutionListRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeExecutionListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unique_parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&workflow_execution_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&workflow_execution_id_)) + sizeof(limit_));
}

NodeExecutionListRequest::~NodeExecutionListRequest() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.NodeExecutionListRequest)
  SharedDtor();
}

void NodeExecutionListRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unique_parent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete workflow_execution_id_;
  if (this != internal_default_instance()) delete sort_by_;
}

void NodeExecutionListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeExecutionListRequest& NodeExecutionListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeExecutionListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void NodeExecutionListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.NodeExecutionListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unique_parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && workflow_execution_id_ != nullptr) {
    delete workflow_execution_id_;
  }
  workflow_execution_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
  limit_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeExecutionListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeExecutionListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_workflow_execution_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecutionListRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filters = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecutionListRequest.filters");
        object = msg->mutable_filters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .nebulaidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::admin::Sort::_InternalParse;
        object = msg->mutable_sort_by();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string unique_parent_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecutionListRequest.unique_parent_id");
        object = msg->mutable_unique_parent_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeExecutionListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.NodeExecutionListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecutionListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filters().data(), static_cast<int>(this->filters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecutionListRequest.filters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sort_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unique_parent_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_parent_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unique_parent_id().data(), static_cast<int>(this->unique_parent_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecutionListRequest.unique_parent_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.NodeExecutionListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.NodeExecutionListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeExecutionListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.NodeExecutionListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
  if (this->has_workflow_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::workflow_execution_id(this), output);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionListRequest.filters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filters(), output);
  }

  // .nebulaidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::sort_by(this), output);
  }

  // string unique_parent_id = 6;
  if (this->unique_parent_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_parent_id().data(), static_cast<int>(this->unique_parent_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionListRequest.unique_parent_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->unique_parent_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.NodeExecutionListRequest)
}

::google::protobuf::uint8* NodeExecutionListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.NodeExecutionListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
  if (this->has_workflow_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::workflow_execution_id(this), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionListRequest.filters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filters(), target);
  }

  // .nebulaidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::sort_by(this), target);
  }

  // string unique_parent_id = 6;
  if (this->unique_parent_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_parent_id().data(), static_cast<int>(this->unique_parent_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionListRequest.unique_parent_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->unique_parent_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.NodeExecutionListRequest)
  return target;
}

size_t NodeExecutionListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.NodeExecutionListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filters());
  }

  // string unique_parent_id = 6;
  if (this->unique_parent_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unique_parent_id());
  }

  // .nebulaidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
  if (this->has_workflow_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *workflow_execution_id_);
  }

  // .nebulaidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sort_by_);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExecutionListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.NodeExecutionListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecutionListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NodeExecutionListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.NodeExecutionListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.NodeExecutionListRequest)
    MergeFrom(*source);
  }
}

void NodeExecutionListRequest::MergeFrom(const NodeExecutionListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.NodeExecutionListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.filters().size() > 0) {

    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.unique_parent_id().size() > 0) {

    unique_parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unique_parent_id_);
  }
  if (from.has_workflow_execution_id()) {
    mutable_workflow_execution_id()->::nebulaidl::core::WorkflowExecutionIdentifier::MergeFrom(from.workflow_execution_id());
  }
  if (from.has_sort_by()) {
    mutable_sort_by()->::nebulaidl::admin::Sort::MergeFrom(from.sort_by());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void NodeExecutionListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.NodeExecutionListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecutionListRequest::CopyFrom(const NodeExecutionListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.NodeExecutionListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecutionListRequest::IsInitialized() const {
  return true;
}

void NodeExecutionListRequest::Swap(NodeExecutionListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeExecutionListRequest::InternalSwap(NodeExecutionListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filters_.Swap(&other->filters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unique_parent_id_.Swap(&other->unique_parent_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(workflow_execution_id_, other->workflow_execution_id_);
  swap(sort_by_, other->sort_by_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata NodeExecutionListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeExecutionForTaskListRequest::InitAsDefaultInstance() {
  ::nebulaidl::admin::_NodeExecutionForTaskListRequest_default_instance_._instance.get_mutable()->task_execution_id_ = const_cast< ::nebulaidl::core::TaskExecutionIdentifier*>(
      ::nebulaidl::core::TaskExecutionIdentifier::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionForTaskListRequest_default_instance_._instance.get_mutable()->sort_by_ = const_cast< ::nebulaidl::admin::Sort*>(
      ::nebulaidl::admin::Sort::internal_default_instance());
}
class NodeExecutionForTaskListRequest::HasBitSetters {
 public:
  static const ::nebulaidl::core::TaskExecutionIdentifier& task_execution_id(const NodeExecutionForTaskListRequest* msg);
  static const ::nebulaidl::admin::Sort& sort_by(const NodeExecutionForTaskListRequest* msg);
};

const ::nebulaidl::core::TaskExecutionIdentifier&
NodeExecutionForTaskListRequest::HasBitSetters::task_execution_id(const NodeExecutionForTaskListRequest* msg) {
  return *msg->task_execution_id_;
}
const ::nebulaidl::admin::Sort&
NodeExecutionForTaskListRequest::HasBitSetters::sort_by(const NodeExecutionForTaskListRequest* msg) {
  return *msg->sort_by_;
}
void NodeExecutionForTaskListRequest::clear_task_execution_id() {
  if (GetArenaNoVirtual() == nullptr && task_execution_id_ != nullptr) {
    delete task_execution_id_;
  }
  task_execution_id_ = nullptr;
}
void NodeExecutionForTaskListRequest::clear_sort_by() {
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecutionForTaskListRequest::kTaskExecutionIdFieldNumber;
const int NodeExecutionForTaskListRequest::kLimitFieldNumber;
const int NodeExecutionForTaskListRequest::kTokenFieldNumber;
const int NodeExecutionForTaskListRequest::kFiltersFieldNumber;
const int NodeExecutionForTaskListRequest::kSortByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecutionForTaskListRequest::NodeExecutionForTaskListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.NodeExecutionForTaskListRequest)
}
NodeExecutionForTaskListRequest::NodeExecutionForTaskListRequest(const NodeExecutionForTaskListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filters().size() > 0) {
    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_task_execution_id()) {
    task_execution_id_ = new ::nebulaidl::core::TaskExecutionIdentifier(*from.task_execution_id_);
  } else {
    task_execution_id_ = nullptr;
  }
  if (from.has_sort_by()) {
    sort_by_ = new ::nebulaidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.NodeExecutionForTaskListRequest)
}

void NodeExecutionForTaskListRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeExecutionForTaskListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_execution_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&task_execution_id_)) + sizeof(limit_));
}

NodeExecutionForTaskListRequest::~NodeExecutionForTaskListRequest() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.NodeExecutionForTaskListRequest)
  SharedDtor();
}

void NodeExecutionForTaskListRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_execution_id_;
  if (this != internal_default_instance()) delete sort_by_;
}

void NodeExecutionForTaskListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeExecutionForTaskListRequest& NodeExecutionForTaskListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeExecutionForTaskListRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void NodeExecutionForTaskListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.NodeExecutionForTaskListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && task_execution_id_ != nullptr) {
    delete task_execution_id_;
  }
  task_execution_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
  limit_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeExecutionForTaskListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeExecutionForTaskListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.core.TaskExecutionIdentifier task_execution_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::TaskExecutionIdentifier::_InternalParse;
        object = msg->mutable_task_execution_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecutionForTaskListRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filters = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecutionForTaskListRequest.filters");
        object = msg->mutable_filters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .nebulaidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::admin::Sort::_InternalParse;
        object = msg->mutable_sort_by();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeExecutionForTaskListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.NodeExecutionForTaskListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.core.TaskExecutionIdentifier task_execution_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecutionForTaskListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filters().data(), static_cast<int>(this->filters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecutionForTaskListRequest.filters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sort_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.NodeExecutionForTaskListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.NodeExecutionForTaskListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeExecutionForTaskListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.NodeExecutionForTaskListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.TaskExecutionIdentifier task_execution_id = 1;
  if (this->has_task_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::task_execution_id(this), output);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionForTaskListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionForTaskListRequest.filters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filters(), output);
  }

  // .nebulaidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::sort_by(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.NodeExecutionForTaskListRequest)
}

::google::protobuf::uint8* NodeExecutionForTaskListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.NodeExecutionForTaskListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.TaskExecutionIdentifier task_execution_id = 1;
  if (this->has_task_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::task_execution_id(this), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionForTaskListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionForTaskListRequest.filters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filters(), target);
  }

  // .nebulaidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::sort_by(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.NodeExecutionForTaskListRequest)
  return target;
}

size_t NodeExecutionForTaskListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.NodeExecutionForTaskListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filters());
  }

  // .nebulaidl.core.TaskExecutionIdentifier task_execution_id = 1;
  if (this->has_task_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_execution_id_);
  }

  // .nebulaidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sort_by_);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExecutionForTaskListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.NodeExecutionForTaskListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecutionForTaskListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NodeExecutionForTaskListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.NodeExecutionForTaskListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.NodeExecutionForTaskListRequest)
    MergeFrom(*source);
  }
}

void NodeExecutionForTaskListRequest::MergeFrom(const NodeExecutionForTaskListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.NodeExecutionForTaskListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.filters().size() > 0) {

    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_task_execution_id()) {
    mutable_task_execution_id()->::nebulaidl::core::TaskExecutionIdentifier::MergeFrom(from.task_execution_id());
  }
  if (from.has_sort_by()) {
    mutable_sort_by()->::nebulaidl::admin::Sort::MergeFrom(from.sort_by());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void NodeExecutionForTaskListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.NodeExecutionForTaskListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecutionForTaskListRequest::CopyFrom(const NodeExecutionForTaskListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.NodeExecutionForTaskListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecutionForTaskListRequest::IsInitialized() const {
  return true;
}

void NodeExecutionForTaskListRequest::Swap(NodeExecutionForTaskListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeExecutionForTaskListRequest::InternalSwap(NodeExecutionForTaskListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filters_.Swap(&other->filters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(task_execution_id_, other->task_execution_id_);
  swap(sort_by_, other->sort_by_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata NodeExecutionForTaskListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeExecution::InitAsDefaultInstance() {
  ::nebulaidl::admin::_NodeExecution_default_instance_._instance.get_mutable()->id_ = const_cast< ::nebulaidl::core::NodeExecutionIdentifier*>(
      ::nebulaidl::core::NodeExecutionIdentifier::internal_default_instance());
  ::nebulaidl::admin::_NodeExecution_default_instance_._instance.get_mutable()->closure_ = const_cast< ::nebulaidl::admin::NodeExecutionClosure*>(
      ::nebulaidl::admin::NodeExecutionClosure::internal_default_instance());
  ::nebulaidl::admin::_NodeExecution_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::nebulaidl::admin::NodeExecutionMetaData*>(
      ::nebulaidl::admin::NodeExecutionMetaData::internal_default_instance());
}
class NodeExecution::HasBitSetters {
 public:
  static const ::nebulaidl::core::NodeExecutionIdentifier& id(const NodeExecution* msg);
  static const ::nebulaidl::admin::NodeExecutionClosure& closure(const NodeExecution* msg);
  static const ::nebulaidl::admin::NodeExecutionMetaData& metadata(const NodeExecution* msg);
};

const ::nebulaidl::core::NodeExecutionIdentifier&
NodeExecution::HasBitSetters::id(const NodeExecution* msg) {
  return *msg->id_;
}
const ::nebulaidl::admin::NodeExecutionClosure&
NodeExecution::HasBitSetters::closure(const NodeExecution* msg) {
  return *msg->closure_;
}
const ::nebulaidl::admin::NodeExecutionMetaData&
NodeExecution::HasBitSetters::metadata(const NodeExecution* msg) {
  return *msg->metadata_;
}
void NodeExecution::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecution::kIdFieldNumber;
const int NodeExecution::kInputUriFieldNumber;
const int NodeExecution::kClosureFieldNumber;
const int NodeExecution::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecution::NodeExecution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.NodeExecution)
}
NodeExecution::NodeExecution(const NodeExecution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_uri().size() > 0) {
    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_id()) {
    id_ = new ::nebulaidl::core::NodeExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_closure()) {
    closure_ = new ::nebulaidl::admin::NodeExecutionClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::nebulaidl::admin::NodeExecutionMetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.NodeExecution)
}

void NodeExecution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeExecution_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&id_)) + sizeof(metadata_));
}

NodeExecution::~NodeExecution() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.NodeExecution)
  SharedDtor();
}

void NodeExecution::SharedDtor() {
  input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete closure_;
  if (this != internal_default_instance()) delete metadata_;
}

void NodeExecution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeExecution& NodeExecution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeExecution_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void NodeExecution::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.NodeExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeExecution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeExecution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.core.NodeExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::NodeExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string input_uri = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecution.input_uri");
        object = msg->mutable_input_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .nebulaidl.admin.NodeExecutionClosure closure = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::admin::NodeExecutionClosure::_InternalParse;
        object = msg->mutable_closure();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.admin.NodeExecutionMetaData metadata = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::admin::NodeExecutionMetaData::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeExecution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.NodeExecution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.core.NodeExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string input_uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_uri().data(), static_cast<int>(this->input_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecution.input_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.admin.NodeExecutionClosure closure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.admin.NodeExecutionMetaData metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.NodeExecution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.NodeExecution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeExecution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.NodeExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // string input_uri = 2;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecution.input_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->input_uri(), output);
  }

  // .nebulaidl.admin.NodeExecutionClosure closure = 3;
  if (this->has_closure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::closure(this), output);
  }

  // .nebulaidl.admin.NodeExecutionMetaData metadata = 4;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::metadata(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.NodeExecution)
}

::google::protobuf::uint8* NodeExecution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.NodeExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // string input_uri = 2;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecution.input_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input_uri(), target);
  }

  // .nebulaidl.admin.NodeExecutionClosure closure = 3;
  if (this->has_closure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::closure(this), target);
  }

  // .nebulaidl.admin.NodeExecutionMetaData metadata = 4;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::metadata(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.NodeExecution)
  return target;
}

size_t NodeExecution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.NodeExecution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_uri = 2;
  if (this->input_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_uri());
  }

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .nebulaidl.admin.NodeExecutionClosure closure = 3;
  if (this->has_closure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *closure_);
  }

  // .nebulaidl.admin.NodeExecutionMetaData metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExecution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.NodeExecution)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecution* source =
      ::google::protobuf::DynamicCastToGenerated<NodeExecution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.NodeExecution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.NodeExecution)
    MergeFrom(*source);
  }
}

void NodeExecution::MergeFrom(const NodeExecution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.NodeExecution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_uri().size() > 0) {

    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_id()) {
    mutable_id()->::nebulaidl::core::NodeExecutionIdentifier::MergeFrom(from.id());
  }
  if (from.has_closure()) {
    mutable_closure()->::nebulaidl::admin::NodeExecutionClosure::MergeFrom(from.closure());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::nebulaidl::admin::NodeExecutionMetaData::MergeFrom(from.metadata());
  }
}

void NodeExecution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.NodeExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecution::CopyFrom(const NodeExecution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.NodeExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecution::IsInitialized() const {
  return true;
}

void NodeExecution::Swap(NodeExecution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeExecution::InternalSwap(NodeExecution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_uri_.Swap(&other->input_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(closure_, other->closure_);
  swap(metadata_, other->metadata_);
}

::google::protobuf::Metadata NodeExecution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeExecutionMetaData::InitAsDefaultInstance() {
}
class NodeExecutionMetaData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecutionMetaData::kRetryGroupFieldNumber;
const int NodeExecutionMetaData::kIsParentNodeFieldNumber;
const int NodeExecutionMetaData::kSpecNodeIdFieldNumber;
const int NodeExecutionMetaData::kIsDynamicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecutionMetaData::NodeExecutionMetaData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.NodeExecutionMetaData)
}
NodeExecutionMetaData::NodeExecutionMetaData(const NodeExecutionMetaData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retry_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.retry_group().size() > 0) {
    retry_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retry_group_);
  }
  spec_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spec_node_id().size() > 0) {
    spec_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spec_node_id_);
  }
  ::memcpy(&is_parent_node_, &from.is_parent_node_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dynamic_) -
    reinterpret_cast<char*>(&is_parent_node_)) + sizeof(is_dynamic_));
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.NodeExecutionMetaData)
}

void NodeExecutionMetaData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeExecutionMetaData_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  retry_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spec_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_parent_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dynamic_) -
      reinterpret_cast<char*>(&is_parent_node_)) + sizeof(is_dynamic_));
}

NodeExecutionMetaData::~NodeExecutionMetaData() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.NodeExecutionMetaData)
  SharedDtor();
}

void NodeExecutionMetaData::SharedDtor() {
  retry_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spec_node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeExecutionMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeExecutionMetaData& NodeExecutionMetaData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeExecutionMetaData_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void NodeExecutionMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.NodeExecutionMetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retry_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spec_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_parent_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dynamic_) -
      reinterpret_cast<char*>(&is_parent_node_)) + sizeof(is_dynamic_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeExecutionMetaData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeExecutionMetaData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string retry_group = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecutionMetaData.retry_group");
        object = msg->mutable_retry_group();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool is_parent_node = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_parent_node(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string spec_node_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecutionMetaData.spec_node_id");
        object = msg->mutable_spec_node_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool is_dynamic = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_dynamic(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeExecutionMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.NodeExecutionMetaData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string retry_group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retry_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->retry_group().data(), static_cast<int>(this->retry_group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecutionMetaData.retry_group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_parent_node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_parent_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string spec_node_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spec_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spec_node_id().data(), static_cast<int>(this->spec_node_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecutionMetaData.spec_node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dynamic = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dynamic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.NodeExecutionMetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.NodeExecutionMetaData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeExecutionMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.NodeExecutionMetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string retry_group = 1;
  if (this->retry_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_group().data(), static_cast<int>(this->retry_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionMetaData.retry_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->retry_group(), output);
  }

  // bool is_parent_node = 2;
  if (this->is_parent_node() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_parent_node(), output);
  }

  // string spec_node_id = 3;
  if (this->spec_node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spec_node_id().data(), static_cast<int>(this->spec_node_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionMetaData.spec_node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->spec_node_id(), output);
  }

  // bool is_dynamic = 4;
  if (this->is_dynamic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_dynamic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.NodeExecutionMetaData)
}

::google::protobuf::uint8* NodeExecutionMetaData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.NodeExecutionMetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string retry_group = 1;
  if (this->retry_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_group().data(), static_cast<int>(this->retry_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionMetaData.retry_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->retry_group(), target);
  }

  // bool is_parent_node = 2;
  if (this->is_parent_node() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_parent_node(), target);
  }

  // string spec_node_id = 3;
  if (this->spec_node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spec_node_id().data(), static_cast<int>(this->spec_node_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionMetaData.spec_node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->spec_node_id(), target);
  }

  // bool is_dynamic = 4;
  if (this->is_dynamic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_dynamic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.NodeExecutionMetaData)
  return target;
}

size_t NodeExecutionMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.NodeExecutionMetaData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string retry_group = 1;
  if (this->retry_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->retry_group());
  }

  // string spec_node_id = 3;
  if (this->spec_node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spec_node_id());
  }

  // bool is_parent_node = 2;
  if (this->is_parent_node() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dynamic = 4;
  if (this->is_dynamic() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExecutionMetaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.NodeExecutionMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecutionMetaData* source =
      ::google::protobuf::DynamicCastToGenerated<NodeExecutionMetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.NodeExecutionMetaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.NodeExecutionMetaData)
    MergeFrom(*source);
  }
}

void NodeExecutionMetaData::MergeFrom(const NodeExecutionMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.NodeExecutionMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retry_group().size() > 0) {

    retry_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retry_group_);
  }
  if (from.spec_node_id().size() > 0) {

    spec_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spec_node_id_);
  }
  if (from.is_parent_node() != 0) {
    set_is_parent_node(from.is_parent_node());
  }
  if (from.is_dynamic() != 0) {
    set_is_dynamic(from.is_dynamic());
  }
}

void NodeExecutionMetaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.NodeExecutionMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecutionMetaData::CopyFrom(const NodeExecutionMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.NodeExecutionMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecutionMetaData::IsInitialized() const {
  return true;
}

void NodeExecutionMetaData::Swap(NodeExecutionMetaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeExecutionMetaData::InternalSwap(NodeExecutionMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  retry_group_.Swap(&other->retry_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spec_node_id_.Swap(&other->spec_node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_parent_node_, other->is_parent_node_);
  swap(is_dynamic_, other->is_dynamic_);
}

::google::protobuf::Metadata NodeExecutionMetaData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeExecutionList::InitAsDefaultInstance() {
}
class NodeExecutionList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecutionList::kNodeExecutionsFieldNumber;
const int NodeExecutionList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecutionList::NodeExecutionList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.NodeExecutionList)
}
NodeExecutionList::NodeExecutionList(const NodeExecutionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      node_executions_(from.node_executions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.NodeExecutionList)
}

void NodeExecutionList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeExecutionList_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NodeExecutionList::~NodeExecutionList() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.NodeExecutionList)
  SharedDtor();
}

void NodeExecutionList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeExecutionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeExecutionList& NodeExecutionList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeExecutionList_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void NodeExecutionList::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.NodeExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_executions_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeExecutionList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeExecutionList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .nebulaidl.admin.NodeExecution node_executions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::nebulaidl::admin::NodeExecution::_InternalParse;
          object = msg->add_node_executions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecutionList.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeExecutionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.NodeExecutionList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nebulaidl.admin.NodeExecution node_executions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node_executions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecutionList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.NodeExecutionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.NodeExecutionList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeExecutionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.NodeExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulaidl.admin.NodeExecution node_executions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_executions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->node_executions(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.NodeExecutionList)
}

::google::protobuf::uint8* NodeExecutionList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.NodeExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulaidl.admin.NodeExecution node_executions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_executions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node_executions(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.NodeExecutionList)
  return target;
}

size_t NodeExecutionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.NodeExecutionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulaidl.admin.NodeExecution node_executions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_executions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node_executions(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExecutionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.NodeExecutionList)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecutionList* source =
      ::google::protobuf::DynamicCastToGenerated<NodeExecutionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.NodeExecutionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.NodeExecutionList)
    MergeFrom(*source);
  }
}

void NodeExecutionList::MergeFrom(const NodeExecutionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.NodeExecutionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_executions_.MergeFrom(from.node_executions_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void NodeExecutionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.NodeExecutionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecutionList::CopyFrom(const NodeExecutionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.NodeExecutionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecutionList::IsInitialized() const {
  return true;
}

void NodeExecutionList::Swap(NodeExecutionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeExecutionList::InternalSwap(NodeExecutionList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&node_executions_)->InternalSwap(CastToBase(&other->node_executions_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata NodeExecutionList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeExecutionClosure::InitAsDefaultInstance() {
  ::nebulaidl::admin::_NodeExecutionClosure_default_instance_.output_uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::nebulaidl::admin::_NodeExecutionClosure_default_instance_.error_ = const_cast< ::nebulaidl::core::ExecutionError*>(
      ::nebulaidl::core::ExecutionError::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionClosure_default_instance_.output_data_ = const_cast< ::nebulaidl::core::LiteralMap*>(
      ::nebulaidl::core::LiteralMap::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionClosure_default_instance_._instance.get_mutable()->started_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionClosure_default_instance_._instance.get_mutable()->duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionClosure_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionClosure_default_instance_._instance.get_mutable()->updated_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionClosure_default_instance_.workflow_node_metadata_ = const_cast< ::nebulaidl::admin::WorkflowNodeMetadata*>(
      ::nebulaidl::admin::WorkflowNodeMetadata::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionClosure_default_instance_.task_node_metadata_ = const_cast< ::nebulaidl::admin::TaskNodeMetadata*>(
      ::nebulaidl::admin::TaskNodeMetadata::internal_default_instance());
}
class NodeExecutionClosure::HasBitSetters {
 public:
  static const ::nebulaidl::core::ExecutionError& error(const NodeExecutionClosure* msg);
  static const ::nebulaidl::core::LiteralMap& output_data(const NodeExecutionClosure* msg);
  static const ::google::protobuf::Timestamp& started_at(const NodeExecutionClosure* msg);
  static const ::google::protobuf::Duration& duration(const NodeExecutionClosure* msg);
  static const ::google::protobuf::Timestamp& created_at(const NodeExecutionClosure* msg);
  static const ::google::protobuf::Timestamp& updated_at(const NodeExecutionClosure* msg);
  static const ::nebulaidl::admin::WorkflowNodeMetadata& workflow_node_metadata(const NodeExecutionClosure* msg);
  static const ::nebulaidl::admin::TaskNodeMetadata& task_node_metadata(const NodeExecutionClosure* msg);
};

const ::nebulaidl::core::ExecutionError&
NodeExecutionClosure::HasBitSetters::error(const NodeExecutionClosure* msg) {
  return *msg->output_result_.error_;
}
const ::nebulaidl::core::LiteralMap&
NodeExecutionClosure::HasBitSetters::output_data(const NodeExecutionClosure* msg) {
  return *msg->output_result_.output_data_;
}
const ::google::protobuf::Timestamp&
NodeExecutionClosure::HasBitSetters::started_at(const NodeExecutionClosure* msg) {
  return *msg->started_at_;
}
const ::google::protobuf::Duration&
NodeExecutionClosure::HasBitSetters::duration(const NodeExecutionClosure* msg) {
  return *msg->duration_;
}
const ::google::protobuf::Timestamp&
NodeExecutionClosure::HasBitSetters::created_at(const NodeExecutionClosure* msg) {
  return *msg->created_at_;
}
const ::google::protobuf::Timestamp&
NodeExecutionClosure::HasBitSetters::updated_at(const NodeExecutionClosure* msg) {
  return *msg->updated_at_;
}
const ::nebulaidl::admin::WorkflowNodeMetadata&
NodeExecutionClosure::HasBitSetters::workflow_node_metadata(const NodeExecutionClosure* msg) {
  return *msg->target_metadata_.workflow_node_metadata_;
}
const ::nebulaidl::admin::TaskNodeMetadata&
NodeExecutionClosure::HasBitSetters::task_node_metadata(const NodeExecutionClosure* msg) {
  return *msg->target_metadata_.task_node_metadata_;
}
void NodeExecutionClosure::set_allocated_error(::nebulaidl::core::ExecutionError* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionClosure.error)
}
void NodeExecutionClosure::clear_error() {
  if (has_error()) {
    delete output_result_.error_;
    clear_has_output_result();
  }
}
void NodeExecutionClosure::set_allocated_output_data(::nebulaidl::core::LiteralMap* output_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (output_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionClosure.output_data)
}
void NodeExecutionClosure::clear_output_data() {
  if (has_output_data()) {
    delete output_result_.output_data_;
    clear_has_output_result();
  }
}
void NodeExecutionClosure::clear_started_at() {
  if (GetArenaNoVirtual() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
}
void NodeExecutionClosure::clear_duration() {
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
void NodeExecutionClosure::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void NodeExecutionClosure::clear_updated_at() {
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void NodeExecutionClosure::set_allocated_workflow_node_metadata(::nebulaidl::admin::WorkflowNodeMetadata* workflow_node_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target_metadata();
  if (workflow_node_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_node_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_node_metadata, submessage_arena);
    }
    set_has_workflow_node_metadata();
    target_metadata_.workflow_node_metadata_ = workflow_node_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionClosure.workflow_node_metadata)
}
void NodeExecutionClosure::set_allocated_task_node_metadata(::nebulaidl::admin::TaskNodeMetadata* task_node_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target_metadata();
  if (task_node_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_node_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_node_metadata, submessage_arena);
    }
    set_has_task_node_metadata();
    target_metadata_.task_node_metadata_ = task_node_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionClosure.task_node_metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecutionClosure::kOutputUriFieldNumber;
const int NodeExecutionClosure::kErrorFieldNumber;
const int NodeExecutionClosure::kOutputDataFieldNumber;
const int NodeExecutionClosure::kPhaseFieldNumber;
const int NodeExecutionClosure::kStartedAtFieldNumber;
const int NodeExecutionClosure::kDurationFieldNumber;
const int NodeExecutionClosure::kCreatedAtFieldNumber;
const int NodeExecutionClosure::kUpdatedAtFieldNumber;
const int NodeExecutionClosure::kWorkflowNodeMetadataFieldNumber;
const int NodeExecutionClosure::kTaskNodeMetadataFieldNumber;
const int NodeExecutionClosure::kDeckUriFieldNumber;
const int NodeExecutionClosure::kDynamicJobSpecUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecutionClosure::NodeExecutionClosure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.NodeExecutionClosure)
}
NodeExecutionClosure::NodeExecutionClosure(const NodeExecutionClosure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deck_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deck_uri().size() > 0) {
    deck_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deck_uri_);
  }
  dynamic_job_spec_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynamic_job_spec_uri().size() > 0) {
    dynamic_job_spec_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamic_job_spec_uri_);
  }
  if (from.has_started_at()) {
    started_at_ = new ::google::protobuf::Timestamp(*from.started_at_);
  } else {
    started_at_ = nullptr;
  }
  if (from.has_duration()) {
    duration_ = new ::google::protobuf::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from.has_updated_at()) {
    updated_at_ = new ::google::protobuf::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  phase_ = from.phase_;
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::nebulaidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case kOutputData: {
      mutable_output_data()->::nebulaidl::core::LiteralMap::MergeFrom(from.output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  clear_has_target_metadata();
  switch (from.target_metadata_case()) {
    case kWorkflowNodeMetadata: {
      mutable_workflow_node_metadata()->::nebulaidl::admin::WorkflowNodeMetadata::MergeFrom(from.workflow_node_metadata());
      break;
    }
    case kTaskNodeMetadata: {
      mutable_task_node_metadata()->::nebulaidl::admin::TaskNodeMetadata::MergeFrom(from.task_node_metadata());
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.NodeExecutionClosure)
}

void NodeExecutionClosure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeExecutionClosure_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  deck_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamic_job_spec_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&started_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&started_at_)) + sizeof(phase_));
  clear_has_output_result();
  clear_has_target_metadata();
}

NodeExecutionClosure::~NodeExecutionClosure() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.NodeExecutionClosure)
  SharedDtor();
}

void NodeExecutionClosure::SharedDtor() {
  deck_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamic_job_spec_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete started_at_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
  if (has_output_result()) {
    clear_output_result();
  }
  if (has_target_metadata()) {
    clear_target_metadata();
  }
}

void NodeExecutionClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeExecutionClosure& NodeExecutionClosure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeExecutionClosure_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void NodeExecutionClosure::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:nebulaidl.admin.NodeExecutionClosure)
  switch (output_result_case()) {
    case kOutputUri: {
      output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kError: {
      delete output_result_.error_;
      break;
    }
    case kOutputData: {
      delete output_result_.output_data_;
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}

void NodeExecutionClosure::clear_target_metadata() {
// @@protoc_insertion_point(one_of_clear_start:nebulaidl.admin.NodeExecutionClosure)
  switch (target_metadata_case()) {
    case kWorkflowNodeMetadata: {
      delete target_metadata_.workflow_node_metadata_;
      break;
    }
    case kTaskNodeMetadata: {
      delete target_metadata_.task_node_metadata_;
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TARGET_METADATA_NOT_SET;
}


void NodeExecutionClosure::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.NodeExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deck_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamic_job_spec_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  phase_ = 0;
  clear_output_result();
  clear_target_metadata();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeExecutionClosure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeExecutionClosure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string output_uri = 1 [deprecated = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecutionClosure.output_uri");
        object = msg->mutable_output_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .nebulaidl.core.ExecutionError error = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::ExecutionError::_InternalParse;
        object = msg->mutable_error();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.core.NodeExecution.Phase phase = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_phase(static_cast<::nebulaidl::core::NodeExecution_Phase>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Timestamp started_at = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_started_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Duration duration = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_duration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp created_at = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp updated_at = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_updated_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.admin.WorkflowNodeMetadata workflow_node_metadata = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::admin::WorkflowNodeMetadata::_InternalParse;
        object = msg->mutable_workflow_node_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.admin.TaskNodeMetadata task_node_metadata = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::admin::TaskNodeMetadata::_InternalParse;
        object = msg->mutable_task_node_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.core.LiteralMap output_data = 10 [deprecated = true];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_output_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string deck_uri = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecutionClosure.deck_uri");
        object = msg->mutable_deck_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string dynamic_job_spec_uri = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri");
        object = msg->mutable_dynamic_job_spec_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeExecutionClosure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.NodeExecutionClosure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string output_uri = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_uri().data(), static_cast<int>(this->output_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecutionClosure.output_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.core.ExecutionError error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.core.NodeExecution.Phase phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phase(static_cast< ::nebulaidl::core::NodeExecution_Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp started_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_started_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp updated_at = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updated_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.admin.WorkflowNodeMetadata workflow_node_metadata = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_node_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.admin.TaskNodeMetadata task_node_metadata = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_node_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.core.LiteralMap output_data = 10 [deprecated = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deck_uri = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deck_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deck_uri().data(), static_cast<int>(this->deck_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecutionClosure.deck_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dynamic_job_spec_uri = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamic_job_spec_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynamic_job_spec_uri().data(), static_cast<int>(this->dynamic_job_spec_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.NodeExecutionClosure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.NodeExecutionClosure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeExecutionClosure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.NodeExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_uri = 1 [deprecated = true];
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionClosure.output_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->output_uri(), output);
  }

  // .nebulaidl.core.ExecutionError error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::error(this), output);
  }

  // .nebulaidl.core.NodeExecution.Phase phase = 3;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->phase(), output);
  }

  // .google.protobuf.Timestamp started_at = 4;
  if (this->has_started_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::started_at(this), output);
  }

  // .google.protobuf.Duration duration = 5;
  if (this->has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::duration(this), output);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::created_at(this), output);
  }

  // .google.protobuf.Timestamp updated_at = 7;
  if (this->has_updated_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::updated_at(this), output);
  }

  // .nebulaidl.admin.WorkflowNodeMetadata workflow_node_metadata = 8;
  if (has_workflow_node_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::workflow_node_metadata(this), output);
  }

  // .nebulaidl.admin.TaskNodeMetadata task_node_metadata = 9;
  if (has_task_node_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::task_node_metadata(this), output);
  }

  // .nebulaidl.core.LiteralMap output_data = 10 [deprecated = true];
  if (has_output_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::output_data(this), output);
  }

  // string deck_uri = 11;
  if (this->deck_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deck_uri().data(), static_cast<int>(this->deck_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionClosure.deck_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->deck_uri(), output);
  }

  // string dynamic_job_spec_uri = 12;
  if (this->dynamic_job_spec_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamic_job_spec_uri().data(), static_cast<int>(this->dynamic_job_spec_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->dynamic_job_spec_uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.NodeExecutionClosure)
}

::google::protobuf::uint8* NodeExecutionClosure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.NodeExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_uri = 1 [deprecated = true];
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionClosure.output_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->output_uri(), target);
  }

  // .nebulaidl.core.ExecutionError error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::error(this), target);
  }

  // .nebulaidl.core.NodeExecution.Phase phase = 3;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->phase(), target);
  }

  // .google.protobuf.Timestamp started_at = 4;
  if (this->has_started_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::started_at(this), target);
  }

  // .google.protobuf.Duration duration = 5;
  if (this->has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::duration(this), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::created_at(this), target);
  }

  // .google.protobuf.Timestamp updated_at = 7;
  if (this->has_updated_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::updated_at(this), target);
  }

  // .nebulaidl.admin.WorkflowNodeMetadata workflow_node_metadata = 8;
  if (has_workflow_node_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::workflow_node_metadata(this), target);
  }

  // .nebulaidl.admin.TaskNodeMetadata task_node_metadata = 9;
  if (has_task_node_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::task_node_metadata(this), target);
  }

  // .nebulaidl.core.LiteralMap output_data = 10 [deprecated = true];
  if (has_output_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::output_data(this), target);
  }

  // string deck_uri = 11;
  if (this->deck_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deck_uri().data(), static_cast<int>(this->deck_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionClosure.deck_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->deck_uri(), target);
  }

  // string dynamic_job_spec_uri = 12;
  if (this->dynamic_job_spec_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamic_job_spec_uri().data(), static_cast<int>(this->dynamic_job_spec_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->dynamic_job_spec_uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.NodeExecutionClosure)
  return target;
}

size_t NodeExecutionClosure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.NodeExecutionClosure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deck_uri = 11;
  if (this->deck_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deck_uri());
  }

  // string dynamic_job_spec_uri = 12;
  if (this->dynamic_job_spec_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dynamic_job_spec_uri());
  }

  // .google.protobuf.Timestamp started_at = 4;
  if (this->has_started_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *started_at_);
  }

  // .google.protobuf.Duration duration = 5;
  if (this->has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 7;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .nebulaidl.core.NodeExecution.Phase phase = 3;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
  }

  switch (output_result_case()) {
    // string output_uri = 1 [deprecated = true];
    case kOutputUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_uri());
      break;
    }
    // .nebulaidl.core.ExecutionError error = 2;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.error_);
      break;
    }
    // .nebulaidl.core.LiteralMap output_data = 10 [deprecated = true];
    case kOutputData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.output_data_);
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  switch (target_metadata_case()) {
    // .nebulaidl.admin.WorkflowNodeMetadata workflow_node_metadata = 8;
    case kWorkflowNodeMetadata: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_metadata_.workflow_node_metadata_);
      break;
    }
    // .nebulaidl.admin.TaskNodeMetadata task_node_metadata = 9;
    case kTaskNodeMetadata: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_metadata_.task_node_metadata_);
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExecutionClosure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.NodeExecutionClosure)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecutionClosure* source =
      ::google::protobuf::DynamicCastToGenerated<NodeExecutionClosure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.NodeExecutionClosure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.NodeExecutionClosure)
    MergeFrom(*source);
  }
}

void NodeExecutionClosure::MergeFrom(const NodeExecutionClosure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.NodeExecutionClosure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deck_uri().size() > 0) {

    deck_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deck_uri_);
  }
  if (from.dynamic_job_spec_uri().size() > 0) {

    dynamic_job_spec_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamic_job_spec_uri_);
  }
  if (from.has_started_at()) {
    mutable_started_at()->::google::protobuf::Timestamp::MergeFrom(from.started_at());
  }
  if (from.has_duration()) {
    mutable_duration()->::google::protobuf::Duration::MergeFrom(from.duration());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
  if (from.has_updated_at()) {
    mutable_updated_at()->::google::protobuf::Timestamp::MergeFrom(from.updated_at());
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::nebulaidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case kOutputData: {
      mutable_output_data()->::nebulaidl::core::LiteralMap::MergeFrom(from.output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  switch (from.target_metadata_case()) {
    case kWorkflowNodeMetadata: {
      mutable_workflow_node_metadata()->::nebulaidl::admin::WorkflowNodeMetadata::MergeFrom(from.workflow_node_metadata());
      break;
    }
    case kTaskNodeMetadata: {
      mutable_task_node_metadata()->::nebulaidl::admin::TaskNodeMetadata::MergeFrom(from.task_node_metadata());
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
}

void NodeExecutionClosure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.NodeExecutionClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecutionClosure::CopyFrom(const NodeExecutionClosure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.NodeExecutionClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecutionClosure::IsInitialized() const {
  return true;
}

void NodeExecutionClosure::Swap(NodeExecutionClosure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeExecutionClosure::InternalSwap(NodeExecutionClosure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deck_uri_.Swap(&other->deck_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dynamic_job_spec_uri_.Swap(&other->dynamic_job_spec_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(started_at_, other->started_at_);
  swap(duration_, other->duration_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(phase_, other->phase_);
  swap(output_result_, other->output_result_);
  swap(target_metadata_, other->target_metadata_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::google::protobuf::Metadata NodeExecutionClosure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowNodeMetadata::InitAsDefaultInstance() {
  ::nebulaidl::admin::_WorkflowNodeMetadata_default_instance_._instance.get_mutable()->executionid_ = const_cast< ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      ::nebulaidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class WorkflowNodeMetadata::HasBitSetters {
 public:
  static const ::nebulaidl::core::WorkflowExecutionIdentifier& executionid(const WorkflowNodeMetadata* msg);
};

const ::nebulaidl::core::WorkflowExecutionIdentifier&
WorkflowNodeMetadata::HasBitSetters::executionid(const WorkflowNodeMetadata* msg) {
  return *msg->executionid_;
}
void WorkflowNodeMetadata::clear_executionid() {
  if (GetArenaNoVirtual() == nullptr && executionid_ != nullptr) {
    delete executionid_;
  }
  executionid_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowNodeMetadata::kExecutionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowNodeMetadata::WorkflowNodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.WorkflowNodeMetadata)
}
WorkflowNodeMetadata::WorkflowNodeMetadata(const WorkflowNodeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_executionid()) {
    executionid_ = new ::nebulaidl::core::WorkflowExecutionIdentifier(*from.executionid_);
  } else {
    executionid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.WorkflowNodeMetadata)
}

void WorkflowNodeMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  executionid_ = nullptr;
}

WorkflowNodeMetadata::~WorkflowNodeMetadata() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.WorkflowNodeMetadata)
  SharedDtor();
}

void WorkflowNodeMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete executionid_;
}

void WorkflowNodeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowNodeMetadata& WorkflowNodeMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void WorkflowNodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.WorkflowNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && executionid_ != nullptr) {
    delete executionid_;
  }
  executionid_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowNodeMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowNodeMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.core.WorkflowExecutionIdentifier executionId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_executionid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowNodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.WorkflowNodeMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.core.WorkflowExecutionIdentifier executionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_executionid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.WorkflowNodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.WorkflowNodeMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowNodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.WorkflowNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.WorkflowExecutionIdentifier executionId = 1;
  if (this->has_executionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::executionid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.WorkflowNodeMetadata)
}

::google::protobuf::uint8* WorkflowNodeMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.WorkflowNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.WorkflowExecutionIdentifier executionId = 1;
  if (this->has_executionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::executionid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.WorkflowNodeMetadata)
  return target;
}

size_t WorkflowNodeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.WorkflowNodeMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulaidl.core.WorkflowExecutionIdentifier executionId = 1;
  if (this->has_executionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *executionid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowNodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.WorkflowNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowNodeMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowNodeMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.WorkflowNodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.WorkflowNodeMetadata)
    MergeFrom(*source);
  }
}

void WorkflowNodeMetadata::MergeFrom(const WorkflowNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.WorkflowNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_executionid()) {
    mutable_executionid()->::nebulaidl::core::WorkflowExecutionIdentifier::MergeFrom(from.executionid());
  }
}

void WorkflowNodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.WorkflowNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowNodeMetadata::CopyFrom(const WorkflowNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.WorkflowNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowNodeMetadata::IsInitialized() const {
  return true;
}

void WorkflowNodeMetadata::Swap(WorkflowNodeMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowNodeMetadata::InternalSwap(WorkflowNodeMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(executionid_, other->executionid_);
}

::google::protobuf::Metadata WorkflowNodeMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskNodeMetadata::InitAsDefaultInstance() {
  ::nebulaidl::admin::_TaskNodeMetadata_default_instance_._instance.get_mutable()->catalog_key_ = const_cast< ::nebulaidl::core::CatalogMetadata*>(
      ::nebulaidl::core::CatalogMetadata::internal_default_instance());
}
class TaskNodeMetadata::HasBitSetters {
 public:
  static const ::nebulaidl::core::CatalogMetadata& catalog_key(const TaskNodeMetadata* msg);
};

const ::nebulaidl::core::CatalogMetadata&
TaskNodeMetadata::HasBitSetters::catalog_key(const TaskNodeMetadata* msg) {
  return *msg->catalog_key_;
}
void TaskNodeMetadata::clear_catalog_key() {
  if (GetArenaNoVirtual() == nullptr && catalog_key_ != nullptr) {
    delete catalog_key_;
  }
  catalog_key_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskNodeMetadata::kCacheStatusFieldNumber;
const int TaskNodeMetadata::kCatalogKeyFieldNumber;
const int TaskNodeMetadata::kCheckpointUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskNodeMetadata::TaskNodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.TaskNodeMetadata)
}
TaskNodeMetadata::TaskNodeMetadata(const TaskNodeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  checkpoint_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.checkpoint_uri().size() > 0) {
    checkpoint_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checkpoint_uri_);
  }
  if (from.has_catalog_key()) {
    catalog_key_ = new ::nebulaidl::core::CatalogMetadata(*from.catalog_key_);
  } else {
    catalog_key_ = nullptr;
  }
  cache_status_ = from.cache_status_;
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.TaskNodeMetadata)
}

void TaskNodeMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  checkpoint_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&catalog_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_status_) -
      reinterpret_cast<char*>(&catalog_key_)) + sizeof(cache_status_));
}

TaskNodeMetadata::~TaskNodeMetadata() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.TaskNodeMetadata)
  SharedDtor();
}

void TaskNodeMetadata::SharedDtor() {
  checkpoint_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete catalog_key_;
}

void TaskNodeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskNodeMetadata& TaskNodeMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void TaskNodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.TaskNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkpoint_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && catalog_key_ != nullptr) {
    delete catalog_key_;
  }
  catalog_key_ = nullptr;
  cache_status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskNodeMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskNodeMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.core.CatalogCacheStatus cache_status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_cache_status(static_cast<::nebulaidl::core::CatalogCacheStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .nebulaidl.core.CatalogMetadata catalog_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::CatalogMetadata::_InternalParse;
        object = msg->mutable_catalog_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string checkpoint_uri = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.TaskNodeMetadata.checkpoint_uri");
        object = msg->mutable_checkpoint_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskNodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.TaskNodeMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.core.CatalogCacheStatus cache_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cache_status(static_cast< ::nebulaidl::core::CatalogCacheStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.core.CatalogMetadata catalog_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_catalog_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string checkpoint_uri = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpoint_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->checkpoint_uri().data(), static_cast<int>(this->checkpoint_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.TaskNodeMetadata.checkpoint_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.TaskNodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.TaskNodeMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskNodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.TaskNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.CatalogCacheStatus cache_status = 1;
  if (this->cache_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cache_status(), output);
  }

  // .nebulaidl.core.CatalogMetadata catalog_key = 2;
  if (this->has_catalog_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::catalog_key(this), output);
  }

  // string checkpoint_uri = 4;
  if (this->checkpoint_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint_uri().data(), static_cast<int>(this->checkpoint_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.TaskNodeMetadata.checkpoint_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->checkpoint_uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.TaskNodeMetadata)
}

::google::protobuf::uint8* TaskNodeMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.TaskNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.CatalogCacheStatus cache_status = 1;
  if (this->cache_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cache_status(), target);
  }

  // .nebulaidl.core.CatalogMetadata catalog_key = 2;
  if (this->has_catalog_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::catalog_key(this), target);
  }

  // string checkpoint_uri = 4;
  if (this->checkpoint_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint_uri().data(), static_cast<int>(this->checkpoint_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.TaskNodeMetadata.checkpoint_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->checkpoint_uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.TaskNodeMetadata)
  return target;
}

size_t TaskNodeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.TaskNodeMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string checkpoint_uri = 4;
  if (this->checkpoint_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checkpoint_uri());
  }

  // .nebulaidl.core.CatalogMetadata catalog_key = 2;
  if (this->has_catalog_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *catalog_key_);
  }

  // .nebulaidl.core.CatalogCacheStatus cache_status = 1;
  if (this->cache_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cache_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskNodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.TaskNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskNodeMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<TaskNodeMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.TaskNodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.TaskNodeMetadata)
    MergeFrom(*source);
  }
}

void TaskNodeMetadata::MergeFrom(const TaskNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.TaskNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.checkpoint_uri().size() > 0) {

    checkpoint_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checkpoint_uri_);
  }
  if (from.has_catalog_key()) {
    mutable_catalog_key()->::nebulaidl::core::CatalogMetadata::MergeFrom(from.catalog_key());
  }
  if (from.cache_status() != 0) {
    set_cache_status(from.cache_status());
  }
}

void TaskNodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.TaskNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskNodeMetadata::CopyFrom(const TaskNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.TaskNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskNodeMetadata::IsInitialized() const {
  return true;
}

void TaskNodeMetadata::Swap(TaskNodeMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskNodeMetadata::InternalSwap(TaskNodeMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  checkpoint_uri_.Swap(&other->checkpoint_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(catalog_key_, other->catalog_key_);
  swap(cache_status_, other->cache_status_);
}

::google::protobuf::Metadata TaskNodeMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DynamicWorkflowNodeMetadata::InitAsDefaultInstance() {
  ::nebulaidl::admin::_DynamicWorkflowNodeMetadata_default_instance_._instance.get_mutable()->id_ = const_cast< ::nebulaidl::core::Identifier*>(
      ::nebulaidl::core::Identifier::internal_default_instance());
  ::nebulaidl::admin::_DynamicWorkflowNodeMetadata_default_instance_._instance.get_mutable()->compiled_workflow_ = const_cast< ::nebulaidl::core::CompiledWorkflowClosure*>(
      ::nebulaidl::core::CompiledWorkflowClosure::internal_default_instance());
}
class DynamicWorkflowNodeMetadata::HasBitSetters {
 public:
  static const ::nebulaidl::core::Identifier& id(const DynamicWorkflowNodeMetadata* msg);
  static const ::nebulaidl::core::CompiledWorkflowClosure& compiled_workflow(const DynamicWorkflowNodeMetadata* msg);
};

const ::nebulaidl::core::Identifier&
DynamicWorkflowNodeMetadata::HasBitSetters::id(const DynamicWorkflowNodeMetadata* msg) {
  return *msg->id_;
}
const ::nebulaidl::core::CompiledWorkflowClosure&
DynamicWorkflowNodeMetadata::HasBitSetters::compiled_workflow(const DynamicWorkflowNodeMetadata* msg) {
  return *msg->compiled_workflow_;
}
void DynamicWorkflowNodeMetadata::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void DynamicWorkflowNodeMetadata::clear_compiled_workflow() {
  if (GetArenaNoVirtual() == nullptr && compiled_workflow_ != nullptr) {
    delete compiled_workflow_;
  }
  compiled_workflow_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicWorkflowNodeMetadata::kIdFieldNumber;
const int DynamicWorkflowNodeMetadata::kCompiledWorkflowFieldNumber;
const int DynamicWorkflowNodeMetadata::kDynamicJobSpecUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicWorkflowNodeMetadata::DynamicWorkflowNodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.DynamicWorkflowNodeMetadata)
}
DynamicWorkflowNodeMetadata::DynamicWorkflowNodeMetadata(const DynamicWorkflowNodeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dynamic_job_spec_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynamic_job_spec_uri().size() > 0) {
    dynamic_job_spec_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamic_job_spec_uri_);
  }
  if (from.has_id()) {
    id_ = new ::nebulaidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_compiled_workflow()) {
    compiled_workflow_ = new ::nebulaidl::core::CompiledWorkflowClosure(*from.compiled_workflow_);
  } else {
    compiled_workflow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.DynamicWorkflowNodeMetadata)
}

void DynamicWorkflowNodeMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DynamicWorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  dynamic_job_spec_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compiled_workflow_) -
      reinterpret_cast<char*>(&id_)) + sizeof(compiled_workflow_));
}

DynamicWorkflowNodeMetadata::~DynamicWorkflowNodeMetadata() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  SharedDtor();
}

void DynamicWorkflowNodeMetadata::SharedDtor() {
  dynamic_job_spec_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete compiled_workflow_;
}

void DynamicWorkflowNodeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicWorkflowNodeMetadata& DynamicWorkflowNodeMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DynamicWorkflowNodeMetadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void DynamicWorkflowNodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dynamic_job_spec_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && compiled_workflow_ != nullptr) {
    delete compiled_workflow_;
  }
  compiled_workflow_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DynamicWorkflowNodeMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DynamicWorkflowNodeMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.core.CompiledWorkflowClosure compiled_workflow = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::CompiledWorkflowClosure::_InternalParse;
        object = msg->mutable_compiled_workflow();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string dynamic_job_spec_uri = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri");
        object = msg->mutable_dynamic_job_spec_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DynamicWorkflowNodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.core.CompiledWorkflowClosure compiled_workflow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compiled_workflow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dynamic_job_spec_uri = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamic_job_spec_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynamic_job_spec_uri().data(), static_cast<int>(this->dynamic_job_spec_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DynamicWorkflowNodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .nebulaidl.core.CompiledWorkflowClosure compiled_workflow = 2;
  if (this->has_compiled_workflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::compiled_workflow(this), output);
  }

  // string dynamic_job_spec_uri = 3;
  if (this->dynamic_job_spec_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamic_job_spec_uri().data(), static_cast<int>(this->dynamic_job_spec_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dynamic_job_spec_uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.DynamicWorkflowNodeMetadata)
}

::google::protobuf::uint8* DynamicWorkflowNodeMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .nebulaidl.core.CompiledWorkflowClosure compiled_workflow = 2;
  if (this->has_compiled_workflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::compiled_workflow(this), target);
  }

  // string dynamic_job_spec_uri = 3;
  if (this->dynamic_job_spec_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamic_job_spec_uri().data(), static_cast<int>(this->dynamic_job_spec_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dynamic_job_spec_uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  return target;
}

size_t DynamicWorkflowNodeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dynamic_job_spec_uri = 3;
  if (this->dynamic_job_spec_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dynamic_job_spec_uri());
  }

  // .nebulaidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .nebulaidl.core.CompiledWorkflowClosure compiled_workflow = 2;
  if (this->has_compiled_workflow()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *compiled_workflow_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicWorkflowNodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicWorkflowNodeMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<DynamicWorkflowNodeMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.DynamicWorkflowNodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.DynamicWorkflowNodeMetadata)
    MergeFrom(*source);
  }
}

void DynamicWorkflowNodeMetadata::MergeFrom(const DynamicWorkflowNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dynamic_job_spec_uri().size() > 0) {

    dynamic_job_spec_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamic_job_spec_uri_);
  }
  if (from.has_id()) {
    mutable_id()->::nebulaidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_compiled_workflow()) {
    mutable_compiled_workflow()->::nebulaidl::core::CompiledWorkflowClosure::MergeFrom(from.compiled_workflow());
  }
}

void DynamicWorkflowNodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicWorkflowNodeMetadata::CopyFrom(const DynamicWorkflowNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.DynamicWorkflowNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicWorkflowNodeMetadata::IsInitialized() const {
  return true;
}

void DynamicWorkflowNodeMetadata::Swap(DynamicWorkflowNodeMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicWorkflowNodeMetadata::InternalSwap(DynamicWorkflowNodeMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dynamic_job_spec_uri_.Swap(&other->dynamic_job_spec_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(compiled_workflow_, other->compiled_workflow_);
}

::google::protobuf::Metadata DynamicWorkflowNodeMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeExecutionGetDataRequest::InitAsDefaultInstance() {
  ::nebulaidl::admin::_NodeExecutionGetDataRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::nebulaidl::core::NodeExecutionIdentifier*>(
      ::nebulaidl::core::NodeExecutionIdentifier::internal_default_instance());
}
class NodeExecutionGetDataRequest::HasBitSetters {
 public:
  static const ::nebulaidl::core::NodeExecutionIdentifier& id(const NodeExecutionGetDataRequest* msg);
};

const ::nebulaidl::core::NodeExecutionIdentifier&
NodeExecutionGetDataRequest::HasBitSetters::id(const NodeExecutionGetDataRequest* msg) {
  return *msg->id_;
}
void NodeExecutionGetDataRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecutionGetDataRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecutionGetDataRequest::NodeExecutionGetDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.NodeExecutionGetDataRequest)
}
NodeExecutionGetDataRequest::NodeExecutionGetDataRequest(const NodeExecutionGetDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::nebulaidl::core::NodeExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.NodeExecutionGetDataRequest)
}

void NodeExecutionGetDataRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeExecutionGetDataRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  id_ = nullptr;
}

NodeExecutionGetDataRequest::~NodeExecutionGetDataRequest() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.NodeExecutionGetDataRequest)
  SharedDtor();
}

void NodeExecutionGetDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void NodeExecutionGetDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeExecutionGetDataRequest& NodeExecutionGetDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeExecutionGetDataRequest_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void NodeExecutionGetDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.NodeExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeExecutionGetDataRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeExecutionGetDataRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.core.NodeExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::NodeExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeExecutionGetDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.NodeExecutionGetDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.core.NodeExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.NodeExecutionGetDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.NodeExecutionGetDataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeExecutionGetDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.NodeExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.NodeExecutionGetDataRequest)
}

::google::protobuf::uint8* NodeExecutionGetDataRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.NodeExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.NodeExecutionGetDataRequest)
  return target;
}

size_t NodeExecutionGetDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.NodeExecutionGetDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExecutionGetDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.NodeExecutionGetDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecutionGetDataRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NodeExecutionGetDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.NodeExecutionGetDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.NodeExecutionGetDataRequest)
    MergeFrom(*source);
  }
}

void NodeExecutionGetDataRequest::MergeFrom(const NodeExecutionGetDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.NodeExecutionGetDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::nebulaidl::core::NodeExecutionIdentifier::MergeFrom(from.id());
  }
}

void NodeExecutionGetDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.NodeExecutionGetDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecutionGetDataRequest::CopyFrom(const NodeExecutionGetDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.NodeExecutionGetDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecutionGetDataRequest::IsInitialized() const {
  return true;
}

void NodeExecutionGetDataRequest::Swap(NodeExecutionGetDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeExecutionGetDataRequest::InternalSwap(NodeExecutionGetDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata NodeExecutionGetDataRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeExecutionGetDataResponse::InitAsDefaultInstance() {
  ::nebulaidl::admin::_NodeExecutionGetDataResponse_default_instance_._instance.get_mutable()->inputs_ = const_cast< ::nebulaidl::admin::UrlBlob*>(
      ::nebulaidl::admin::UrlBlob::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionGetDataResponse_default_instance_._instance.get_mutable()->outputs_ = const_cast< ::nebulaidl::admin::UrlBlob*>(
      ::nebulaidl::admin::UrlBlob::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionGetDataResponse_default_instance_._instance.get_mutable()->full_inputs_ = const_cast< ::nebulaidl::core::LiteralMap*>(
      ::nebulaidl::core::LiteralMap::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionGetDataResponse_default_instance_._instance.get_mutable()->full_outputs_ = const_cast< ::nebulaidl::core::LiteralMap*>(
      ::nebulaidl::core::LiteralMap::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionGetDataResponse_default_instance_._instance.get_mutable()->dynamic_workflow_ = const_cast< ::nebulaidl::admin::DynamicWorkflowNodeMetadata*>(
      ::nebulaidl::admin::DynamicWorkflowNodeMetadata::internal_default_instance());
  ::nebulaidl::admin::_NodeExecutionGetDataResponse_default_instance_._instance.get_mutable()->nebula_urls_ = const_cast< ::nebulaidl::admin::NebulaURLs*>(
      ::nebulaidl::admin::NebulaURLs::internal_default_instance());
}
class NodeExecutionGetDataResponse::HasBitSetters {
 public:
  static const ::nebulaidl::admin::UrlBlob& inputs(const NodeExecutionGetDataResponse* msg);
  static const ::nebulaidl::admin::UrlBlob& outputs(const NodeExecutionGetDataResponse* msg);
  static const ::nebulaidl::core::LiteralMap& full_inputs(const NodeExecutionGetDataResponse* msg);
  static const ::nebulaidl::core::LiteralMap& full_outputs(const NodeExecutionGetDataResponse* msg);
  static const ::nebulaidl::admin::DynamicWorkflowNodeMetadata& dynamic_workflow(const NodeExecutionGetDataResponse* msg);
  static const ::nebulaidl::admin::NebulaURLs& nebula_urls(const NodeExecutionGetDataResponse* msg);
};

const ::nebulaidl::admin::UrlBlob&
NodeExecutionGetDataResponse::HasBitSetters::inputs(const NodeExecutionGetDataResponse* msg) {
  return *msg->inputs_;
}
const ::nebulaidl::admin::UrlBlob&
NodeExecutionGetDataResponse::HasBitSetters::outputs(const NodeExecutionGetDataResponse* msg) {
  return *msg->outputs_;
}
const ::nebulaidl::core::LiteralMap&
NodeExecutionGetDataResponse::HasBitSetters::full_inputs(const NodeExecutionGetDataResponse* msg) {
  return *msg->full_inputs_;
}
const ::nebulaidl::core::LiteralMap&
NodeExecutionGetDataResponse::HasBitSetters::full_outputs(const NodeExecutionGetDataResponse* msg) {
  return *msg->full_outputs_;
}
const ::nebulaidl::admin::DynamicWorkflowNodeMetadata&
NodeExecutionGetDataResponse::HasBitSetters::dynamic_workflow(const NodeExecutionGetDataResponse* msg) {
  return *msg->dynamic_workflow_;
}
const ::nebulaidl::admin::NebulaURLs&
NodeExecutionGetDataResponse::HasBitSetters::nebula_urls(const NodeExecutionGetDataResponse* msg) {
  return *msg->nebula_urls_;
}
void NodeExecutionGetDataResponse::clear_inputs() {
  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
void NodeExecutionGetDataResponse::clear_outputs() {
  if (GetArenaNoVirtual() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
}
void NodeExecutionGetDataResponse::clear_full_inputs() {
  if (GetArenaNoVirtual() == nullptr && full_inputs_ != nullptr) {
    delete full_inputs_;
  }
  full_inputs_ = nullptr;
}
void NodeExecutionGetDataResponse::clear_full_outputs() {
  if (GetArenaNoVirtual() == nullptr && full_outputs_ != nullptr) {
    delete full_outputs_;
  }
  full_outputs_ = nullptr;
}
void NodeExecutionGetDataResponse::clear_nebula_urls() {
  if (GetArenaNoVirtual() == nullptr && nebula_urls_ != nullptr) {
    delete nebula_urls_;
  }
  nebula_urls_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecutionGetDataResponse::kInputsFieldNumber;
const int NodeExecutionGetDataResponse::kOutputsFieldNumber;
const int NodeExecutionGetDataResponse::kFullInputsFieldNumber;
const int NodeExecutionGetDataResponse::kFullOutputsFieldNumber;
const int NodeExecutionGetDataResponse::kDynamicWorkflowFieldNumber;
const int NodeExecutionGetDataResponse::kNebulaUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecutionGetDataResponse::NodeExecutionGetDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulaidl.admin.NodeExecutionGetDataResponse)
}
NodeExecutionGetDataResponse::NodeExecutionGetDataResponse(const NodeExecutionGetDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inputs()) {
    inputs_ = new ::nebulaidl::admin::UrlBlob(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  if (from.has_outputs()) {
    outputs_ = new ::nebulaidl::admin::UrlBlob(*from.outputs_);
  } else {
    outputs_ = nullptr;
  }
  if (from.has_full_inputs()) {
    full_inputs_ = new ::nebulaidl::core::LiteralMap(*from.full_inputs_);
  } else {
    full_inputs_ = nullptr;
  }
  if (from.has_full_outputs()) {
    full_outputs_ = new ::nebulaidl::core::LiteralMap(*from.full_outputs_);
  } else {
    full_outputs_ = nullptr;
  }
  if (from.has_dynamic_workflow()) {
    dynamic_workflow_ = new ::nebulaidl::admin::DynamicWorkflowNodeMetadata(*from.dynamic_workflow_);
  } else {
    dynamic_workflow_ = nullptr;
  }
  if (from.has_nebula_urls()) {
    nebula_urls_ = new ::nebulaidl::admin::NebulaURLs(*from.nebula_urls_);
  } else {
    nebula_urls_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulaidl.admin.NodeExecutionGetDataResponse)
}

void NodeExecutionGetDataResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeExecutionGetDataResponse_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  ::memset(&inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nebula_urls_) -
      reinterpret_cast<char*>(&inputs_)) + sizeof(nebula_urls_));
}

NodeExecutionGetDataResponse::~NodeExecutionGetDataResponse() {
  // @@protoc_insertion_point(destructor:nebulaidl.admin.NodeExecutionGetDataResponse)
  SharedDtor();
}

void NodeExecutionGetDataResponse::SharedDtor() {
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete outputs_;
  if (this != internal_default_instance()) delete full_inputs_;
  if (this != internal_default_instance()) delete full_outputs_;
  if (this != internal_default_instance()) delete dynamic_workflow_;
  if (this != internal_default_instance()) delete nebula_urls_;
}

void NodeExecutionGetDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeExecutionGetDataResponse& NodeExecutionGetDataResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeExecutionGetDataResponse_nebulaidl_2fadmin_2fnode_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void NodeExecutionGetDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulaidl.admin.NodeExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && full_inputs_ != nullptr) {
    delete full_inputs_;
  }
  full_inputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && full_outputs_ != nullptr) {
    delete full_outputs_;
  }
  full_outputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dynamic_workflow_ != nullptr) {
    delete dynamic_workflow_;
  }
  dynamic_workflow_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && nebula_urls_ != nullptr) {
    delete nebula_urls_;
  }
  nebula_urls_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeExecutionGetDataResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeExecutionGetDataResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .nebulaidl.admin.UrlBlob inputs = 1 [deprecated = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::admin::UrlBlob::_InternalParse;
        object = msg->mutable_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.admin.UrlBlob outputs = 2 [deprecated = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::admin::UrlBlob::_InternalParse;
        object = msg->mutable_outputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.core.LiteralMap full_inputs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_full_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.core.LiteralMap full_outputs = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_full_outputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::admin::DynamicWorkflowNodeMetadata::_InternalParse;
        object = msg->mutable_dynamic_workflow();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .nebulaidl.admin.NebulaURLs nebula_urls = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::nebulaidl::admin::NebulaURLs::_InternalParse;
        object = msg->mutable_nebula_urls();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeExecutionGetDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulaidl.admin.NodeExecutionGetDataResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulaidl.admin.UrlBlob inputs = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.admin.UrlBlob outputs = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.core.LiteralMap full_inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_full_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.core.LiteralMap full_outputs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_full_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic_workflow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulaidl.admin.NebulaURLs nebula_urls = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nebula_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulaidl.admin.NodeExecutionGetDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulaidl.admin.NodeExecutionGetDataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeExecutionGetDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulaidl.admin.NodeExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.admin.UrlBlob inputs = 1 [deprecated = true];
  if (this->has_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::inputs(this), output);
  }

  // .nebulaidl.admin.UrlBlob outputs = 2 [deprecated = true];
  if (this->has_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::outputs(this), output);
  }

  // .nebulaidl.core.LiteralMap full_inputs = 3;
  if (this->has_full_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::full_inputs(this), output);
  }

  // .nebulaidl.core.LiteralMap full_outputs = 4;
  if (this->has_full_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::full_outputs(this), output);
  }

  // .nebulaidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 16;
  if (this->has_dynamic_workflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::dynamic_workflow(this), output);
  }

  // .nebulaidl.admin.NebulaURLs nebula_urls = 17;
  if (this->has_nebula_urls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::nebula_urls(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulaidl.admin.NodeExecutionGetDataResponse)
}

::google::protobuf::uint8* NodeExecutionGetDataResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulaidl.admin.NodeExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulaidl.admin.UrlBlob inputs = 1 [deprecated = true];
  if (this->has_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::inputs(this), target);
  }

  // .nebulaidl.admin.UrlBlob outputs = 2 [deprecated = true];
  if (this->has_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::outputs(this), target);
  }

  // .nebulaidl.core.LiteralMap full_inputs = 3;
  if (this->has_full_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::full_inputs(this), target);
  }

  // .nebulaidl.core.LiteralMap full_outputs = 4;
  if (this->has_full_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::full_outputs(this), target);
  }

  // .nebulaidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 16;
  if (this->has_dynamic_workflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::dynamic_workflow(this), target);
  }

  // .nebulaidl.admin.NebulaURLs nebula_urls = 17;
  if (this->has_nebula_urls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::nebula_urls(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulaidl.admin.NodeExecutionGetDataResponse)
  return target;
}

size_t NodeExecutionGetDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulaidl.admin.NodeExecutionGetDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulaidl.admin.UrlBlob inputs = 1 [deprecated = true];
  if (this->has_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inputs_);
  }

  // .nebulaidl.admin.UrlBlob outputs = 2 [deprecated = true];
  if (this->has_outputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *outputs_);
  }

  // .nebulaidl.core.LiteralMap full_inputs = 3;
  if (this->has_full_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *full_inputs_);
  }

  // .nebulaidl.core.LiteralMap full_outputs = 4;
  if (this->has_full_outputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *full_outputs_);
  }

  // .nebulaidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 16;
  if (this->has_dynamic_workflow()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dynamic_workflow_);
  }

  // .nebulaidl.admin.NebulaURLs nebula_urls = 17;
  if (this->has_nebula_urls()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *nebula_urls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExecutionGetDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulaidl.admin.NodeExecutionGetDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecutionGetDataResponse* source =
      ::google::protobuf::DynamicCastToGenerated<NodeExecutionGetDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulaidl.admin.NodeExecutionGetDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulaidl.admin.NodeExecutionGetDataResponse)
    MergeFrom(*source);
  }
}

void NodeExecutionGetDataResponse::MergeFrom(const NodeExecutionGetDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulaidl.admin.NodeExecutionGetDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inputs()) {
    mutable_inputs()->::nebulaidl::admin::UrlBlob::MergeFrom(from.inputs());
  }
  if (from.has_outputs()) {
    mutable_outputs()->::nebulaidl::admin::UrlBlob::MergeFrom(from.outputs());
  }
  if (from.has_full_inputs()) {
    mutable_full_inputs()->::nebulaidl::core::LiteralMap::MergeFrom(from.full_inputs());
  }
  if (from.has_full_outputs()) {
    mutable_full_outputs()->::nebulaidl::core::LiteralMap::MergeFrom(from.full_outputs());
  }
  if (from.has_dynamic_workflow()) {
    mutable_dynamic_workflow()->::nebulaidl::admin::DynamicWorkflowNodeMetadata::MergeFrom(from.dynamic_workflow());
  }
  if (from.has_nebula_urls()) {
    mutable_nebula_urls()->::nebulaidl::admin::NebulaURLs::MergeFrom(from.nebula_urls());
  }
}

void NodeExecutionGetDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulaidl.admin.NodeExecutionGetDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecutionGetDataResponse::CopyFrom(const NodeExecutionGetDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulaidl.admin.NodeExecutionGetDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecutionGetDataResponse::IsInitialized() const {
  return true;
}

void NodeExecutionGetDataResponse::Swap(NodeExecutionGetDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeExecutionGetDataResponse::InternalSwap(NodeExecutionGetDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(inputs_, other->inputs_);
  swap(outputs_, other->outputs_);
  swap(full_inputs_, other->full_inputs_);
  swap(full_outputs_, other->full_outputs_);
  swap(dynamic_workflow_, other->dynamic_workflow_);
  swap(nebula_urls_, other->nebula_urls_);
}

::google::protobuf::Metadata NodeExecutionGetDataResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_nebulaidl_2fadmin_2fnode_5fexecution_2eproto);
  return ::file_level_metadata_nebulaidl_2fadmin_2fnode_5fexecution_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace nebulaidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::NodeExecutionGetRequest* Arena::CreateMaybeMessage< ::nebulaidl::admin::NodeExecutionGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::NodeExecutionGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::NodeExecutionListRequest* Arena::CreateMaybeMessage< ::nebulaidl::admin::NodeExecutionListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::NodeExecutionListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::NodeExecutionForTaskListRequest* Arena::CreateMaybeMessage< ::nebulaidl::admin::NodeExecutionForTaskListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::NodeExecutionForTaskListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::NodeExecution* Arena::CreateMaybeMessage< ::nebulaidl::admin::NodeExecution >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::NodeExecution >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::NodeExecutionMetaData* Arena::CreateMaybeMessage< ::nebulaidl::admin::NodeExecutionMetaData >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::NodeExecutionMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::NodeExecutionList* Arena::CreateMaybeMessage< ::nebulaidl::admin::NodeExecutionList >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::NodeExecutionList >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::NodeExecutionClosure* Arena::CreateMaybeMessage< ::nebulaidl::admin::NodeExecutionClosure >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::NodeExecutionClosure >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::WorkflowNodeMetadata* Arena::CreateMaybeMessage< ::nebulaidl::admin::WorkflowNodeMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::WorkflowNodeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::TaskNodeMetadata* Arena::CreateMaybeMessage< ::nebulaidl::admin::TaskNodeMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::TaskNodeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::DynamicWorkflowNodeMetadata* Arena::CreateMaybeMessage< ::nebulaidl::admin::DynamicWorkflowNodeMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::DynamicWorkflowNodeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::NodeExecutionGetDataRequest* Arena::CreateMaybeMessage< ::nebulaidl::admin::NodeExecutionGetDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::NodeExecutionGetDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulaidl::admin::NodeExecutionGetDataResponse* Arena::CreateMaybeMessage< ::nebulaidl::admin::NodeExecutionGetDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::nebulaidl::admin::NodeExecutionGetDataResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
