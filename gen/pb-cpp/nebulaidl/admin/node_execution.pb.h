// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulaidl/admin/node_execution.proto

#ifndef PROTOBUF_INCLUDED_nebulaidl_2fadmin_2fnode_5fexecution_2eproto
#define PROTOBUF_INCLUDED_nebulaidl_2fadmin_2fnode_5fexecution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "nebulaidl/admin/common.pb.h"
#include "nebulaidl/core/execution.pb.h"
#include "nebulaidl/core/catalog.pb.h"
#include "nebulaidl/core/compiler.pb.h"
#include "nebulaidl/core/identifier.pb.h"
#include "nebulaidl/core/literals.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nebulaidl_2fadmin_2fnode_5fexecution_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_nebulaidl_2fadmin_2fnode_5fexecution_2eproto();
namespace nebulaidl {
namespace admin {
class DynamicWorkflowNodeMetadata;
class DynamicWorkflowNodeMetadataDefaultTypeInternal;
extern DynamicWorkflowNodeMetadataDefaultTypeInternal _DynamicWorkflowNodeMetadata_default_instance_;
class NodeExecution;
class NodeExecutionDefaultTypeInternal;
extern NodeExecutionDefaultTypeInternal _NodeExecution_default_instance_;
class NodeExecutionClosure;
class NodeExecutionClosureDefaultTypeInternal;
extern NodeExecutionClosureDefaultTypeInternal _NodeExecutionClosure_default_instance_;
class NodeExecutionForTaskListRequest;
class NodeExecutionForTaskListRequestDefaultTypeInternal;
extern NodeExecutionForTaskListRequestDefaultTypeInternal _NodeExecutionForTaskListRequest_default_instance_;
class NodeExecutionGetDataRequest;
class NodeExecutionGetDataRequestDefaultTypeInternal;
extern NodeExecutionGetDataRequestDefaultTypeInternal _NodeExecutionGetDataRequest_default_instance_;
class NodeExecutionGetDataResponse;
class NodeExecutionGetDataResponseDefaultTypeInternal;
extern NodeExecutionGetDataResponseDefaultTypeInternal _NodeExecutionGetDataResponse_default_instance_;
class NodeExecutionGetRequest;
class NodeExecutionGetRequestDefaultTypeInternal;
extern NodeExecutionGetRequestDefaultTypeInternal _NodeExecutionGetRequest_default_instance_;
class NodeExecutionList;
class NodeExecutionListDefaultTypeInternal;
extern NodeExecutionListDefaultTypeInternal _NodeExecutionList_default_instance_;
class NodeExecutionListRequest;
class NodeExecutionListRequestDefaultTypeInternal;
extern NodeExecutionListRequestDefaultTypeInternal _NodeExecutionListRequest_default_instance_;
class NodeExecutionMetaData;
class NodeExecutionMetaDataDefaultTypeInternal;
extern NodeExecutionMetaDataDefaultTypeInternal _NodeExecutionMetaData_default_instance_;
class TaskNodeMetadata;
class TaskNodeMetadataDefaultTypeInternal;
extern TaskNodeMetadataDefaultTypeInternal _TaskNodeMetadata_default_instance_;
class WorkflowNodeMetadata;
class WorkflowNodeMetadataDefaultTypeInternal;
extern WorkflowNodeMetadataDefaultTypeInternal _WorkflowNodeMetadata_default_instance_;
}  // namespace admin
}  // namespace nebulaidl
namespace google {
namespace protobuf {
template<> ::nebulaidl::admin::DynamicWorkflowNodeMetadata* Arena::CreateMaybeMessage<::nebulaidl::admin::DynamicWorkflowNodeMetadata>(Arena*);
template<> ::nebulaidl::admin::NodeExecution* Arena::CreateMaybeMessage<::nebulaidl::admin::NodeExecution>(Arena*);
template<> ::nebulaidl::admin::NodeExecutionClosure* Arena::CreateMaybeMessage<::nebulaidl::admin::NodeExecutionClosure>(Arena*);
template<> ::nebulaidl::admin::NodeExecutionForTaskListRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::NodeExecutionForTaskListRequest>(Arena*);
template<> ::nebulaidl::admin::NodeExecutionGetDataRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::NodeExecutionGetDataRequest>(Arena*);
template<> ::nebulaidl::admin::NodeExecutionGetDataResponse* Arena::CreateMaybeMessage<::nebulaidl::admin::NodeExecutionGetDataResponse>(Arena*);
template<> ::nebulaidl::admin::NodeExecutionGetRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::NodeExecutionGetRequest>(Arena*);
template<> ::nebulaidl::admin::NodeExecutionList* Arena::CreateMaybeMessage<::nebulaidl::admin::NodeExecutionList>(Arena*);
template<> ::nebulaidl::admin::NodeExecutionListRequest* Arena::CreateMaybeMessage<::nebulaidl::admin::NodeExecutionListRequest>(Arena*);
template<> ::nebulaidl::admin::NodeExecutionMetaData* Arena::CreateMaybeMessage<::nebulaidl::admin::NodeExecutionMetaData>(Arena*);
template<> ::nebulaidl::admin::TaskNodeMetadata* Arena::CreateMaybeMessage<::nebulaidl::admin::TaskNodeMetadata>(Arena*);
template<> ::nebulaidl::admin::WorkflowNodeMetadata* Arena::CreateMaybeMessage<::nebulaidl::admin::WorkflowNodeMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace nebulaidl {
namespace admin {

// ===================================================================

class NodeExecutionGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.NodeExecutionGetRequest) */ {
 public:
  NodeExecutionGetRequest();
  virtual ~NodeExecutionGetRequest();

  NodeExecutionGetRequest(const NodeExecutionGetRequest& from);

  inline NodeExecutionGetRequest& operator=(const NodeExecutionGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionGetRequest(NodeExecutionGetRequest&& from) noexcept
    : NodeExecutionGetRequest() {
    *this = ::std::move(from);
  }

  inline NodeExecutionGetRequest& operator=(NodeExecutionGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecutionGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionGetRequest* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionGetRequest*>(
               &_NodeExecutionGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NodeExecutionGetRequest* other);
  friend void swap(NodeExecutionGetRequest& a, NodeExecutionGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionGetRequest* New() const final {
    return CreateMaybeMessage<NodeExecutionGetRequest>(nullptr);
  }

  NodeExecutionGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecutionGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecutionGetRequest& from);
  void MergeFrom(const NodeExecutionGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::NodeExecutionIdentifier& id() const;
  ::nebulaidl::core::NodeExecutionIdentifier* release_id();
  ::nebulaidl::core::NodeExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::NodeExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.NodeExecutionGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::core::NodeExecutionIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeExecutionListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.NodeExecutionListRequest) */ {
 public:
  NodeExecutionListRequest();
  virtual ~NodeExecutionListRequest();

  NodeExecutionListRequest(const NodeExecutionListRequest& from);

  inline NodeExecutionListRequest& operator=(const NodeExecutionListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionListRequest(NodeExecutionListRequest&& from) noexcept
    : NodeExecutionListRequest() {
    *this = ::std::move(from);
  }

  inline NodeExecutionListRequest& operator=(NodeExecutionListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecutionListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionListRequest* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionListRequest*>(
               &_NodeExecutionListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NodeExecutionListRequest* other);
  friend void swap(NodeExecutionListRequest& a, NodeExecutionListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionListRequest* New() const final {
    return CreateMaybeMessage<NodeExecutionListRequest>(nullptr);
  }

  NodeExecutionListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecutionListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecutionListRequest& from);
  void MergeFrom(const NodeExecutionListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string filters = 4;
  void clear_filters();
  static const int kFiltersFieldNumber = 4;
  const ::std::string& filters() const;
  void set_filters(const ::std::string& value);
  #if LANG_CXX11
  void set_filters(::std::string&& value);
  #endif
  void set_filters(const char* value);
  void set_filters(const char* value, size_t size);
  ::std::string* mutable_filters();
  ::std::string* release_filters();
  void set_allocated_filters(::std::string* filters);

  // string unique_parent_id = 6;
  void clear_unique_parent_id();
  static const int kUniqueParentIdFieldNumber = 6;
  const ::std::string& unique_parent_id() const;
  void set_unique_parent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_unique_parent_id(::std::string&& value);
  #endif
  void set_unique_parent_id(const char* value);
  void set_unique_parent_id(const char* value, size_t size);
  ::std::string* mutable_unique_parent_id();
  ::std::string* release_unique_parent_id();
  void set_allocated_unique_parent_id(::std::string* unique_parent_id);

  // .nebulaidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
  bool has_workflow_execution_id() const;
  void clear_workflow_execution_id();
  static const int kWorkflowExecutionIdFieldNumber = 1;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& workflow_execution_id() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_workflow_execution_id();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_workflow_execution_id();
  void set_allocated_workflow_execution_id(::nebulaidl::core::WorkflowExecutionIdentifier* workflow_execution_id);

  // .nebulaidl.admin.Sort sort_by = 5;
  bool has_sort_by() const;
  void clear_sort_by();
  static const int kSortByFieldNumber = 5;
  const ::nebulaidl::admin::Sort& sort_by() const;
  ::nebulaidl::admin::Sort* release_sort_by();
  ::nebulaidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::nebulaidl::admin::Sort* sort_by);

  // uint32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.NodeExecutionListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr filters_;
  ::google::protobuf::internal::ArenaStringPtr unique_parent_id_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* workflow_execution_id_;
  ::nebulaidl::admin::Sort* sort_by_;
  ::google::protobuf::uint32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeExecutionForTaskListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.NodeExecutionForTaskListRequest) */ {
 public:
  NodeExecutionForTaskListRequest();
  virtual ~NodeExecutionForTaskListRequest();

  NodeExecutionForTaskListRequest(const NodeExecutionForTaskListRequest& from);

  inline NodeExecutionForTaskListRequest& operator=(const NodeExecutionForTaskListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionForTaskListRequest(NodeExecutionForTaskListRequest&& from) noexcept
    : NodeExecutionForTaskListRequest() {
    *this = ::std::move(from);
  }

  inline NodeExecutionForTaskListRequest& operator=(NodeExecutionForTaskListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecutionForTaskListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionForTaskListRequest* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionForTaskListRequest*>(
               &_NodeExecutionForTaskListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NodeExecutionForTaskListRequest* other);
  friend void swap(NodeExecutionForTaskListRequest& a, NodeExecutionForTaskListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionForTaskListRequest* New() const final {
    return CreateMaybeMessage<NodeExecutionForTaskListRequest>(nullptr);
  }

  NodeExecutionForTaskListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecutionForTaskListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecutionForTaskListRequest& from);
  void MergeFrom(const NodeExecutionForTaskListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionForTaskListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string filters = 4;
  void clear_filters();
  static const int kFiltersFieldNumber = 4;
  const ::std::string& filters() const;
  void set_filters(const ::std::string& value);
  #if LANG_CXX11
  void set_filters(::std::string&& value);
  #endif
  void set_filters(const char* value);
  void set_filters(const char* value, size_t size);
  ::std::string* mutable_filters();
  ::std::string* release_filters();
  void set_allocated_filters(::std::string* filters);

  // .nebulaidl.core.TaskExecutionIdentifier task_execution_id = 1;
  bool has_task_execution_id() const;
  void clear_task_execution_id();
  static const int kTaskExecutionIdFieldNumber = 1;
  const ::nebulaidl::core::TaskExecutionIdentifier& task_execution_id() const;
  ::nebulaidl::core::TaskExecutionIdentifier* release_task_execution_id();
  ::nebulaidl::core::TaskExecutionIdentifier* mutable_task_execution_id();
  void set_allocated_task_execution_id(::nebulaidl::core::TaskExecutionIdentifier* task_execution_id);

  // .nebulaidl.admin.Sort sort_by = 5;
  bool has_sort_by() const;
  void clear_sort_by();
  static const int kSortByFieldNumber = 5;
  const ::nebulaidl::admin::Sort& sort_by() const;
  ::nebulaidl::admin::Sort* release_sort_by();
  ::nebulaidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::nebulaidl::admin::Sort* sort_by);

  // uint32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.NodeExecutionForTaskListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr filters_;
  ::nebulaidl::core::TaskExecutionIdentifier* task_execution_id_;
  ::nebulaidl::admin::Sort* sort_by_;
  ::google::protobuf::uint32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeExecution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.NodeExecution) */ {
 public:
  NodeExecution();
  virtual ~NodeExecution();

  NodeExecution(const NodeExecution& from);

  inline NodeExecution& operator=(const NodeExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecution(NodeExecution&& from) noexcept
    : NodeExecution() {
    *this = ::std::move(from);
  }

  inline NodeExecution& operator=(NodeExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecution* internal_default_instance() {
    return reinterpret_cast<const NodeExecution*>(
               &_NodeExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NodeExecution* other);
  friend void swap(NodeExecution& a, NodeExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecution* New() const final {
    return CreateMaybeMessage<NodeExecution>(nullptr);
  }

  NodeExecution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecution& from);
  void MergeFrom(const NodeExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string input_uri = 2;
  void clear_input_uri();
  static const int kInputUriFieldNumber = 2;
  const ::std::string& input_uri() const;
  void set_input_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_input_uri(::std::string&& value);
  #endif
  void set_input_uri(const char* value);
  void set_input_uri(const char* value, size_t size);
  ::std::string* mutable_input_uri();
  ::std::string* release_input_uri();
  void set_allocated_input_uri(::std::string* input_uri);

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::NodeExecutionIdentifier& id() const;
  ::nebulaidl::core::NodeExecutionIdentifier* release_id();
  ::nebulaidl::core::NodeExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::NodeExecutionIdentifier* id);

  // .nebulaidl.admin.NodeExecutionClosure closure = 3;
  bool has_closure() const;
  void clear_closure();
  static const int kClosureFieldNumber = 3;
  const ::nebulaidl::admin::NodeExecutionClosure& closure() const;
  ::nebulaidl::admin::NodeExecutionClosure* release_closure();
  ::nebulaidl::admin::NodeExecutionClosure* mutable_closure();
  void set_allocated_closure(::nebulaidl::admin::NodeExecutionClosure* closure);

  // .nebulaidl.admin.NodeExecutionMetaData metadata = 4;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::nebulaidl::admin::NodeExecutionMetaData& metadata() const;
  ::nebulaidl::admin::NodeExecutionMetaData* release_metadata();
  ::nebulaidl::admin::NodeExecutionMetaData* mutable_metadata();
  void set_allocated_metadata(::nebulaidl::admin::NodeExecutionMetaData* metadata);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.NodeExecution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr input_uri_;
  ::nebulaidl::core::NodeExecutionIdentifier* id_;
  ::nebulaidl::admin::NodeExecutionClosure* closure_;
  ::nebulaidl::admin::NodeExecutionMetaData* metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeExecutionMetaData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.NodeExecutionMetaData) */ {
 public:
  NodeExecutionMetaData();
  virtual ~NodeExecutionMetaData();

  NodeExecutionMetaData(const NodeExecutionMetaData& from);

  inline NodeExecutionMetaData& operator=(const NodeExecutionMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionMetaData(NodeExecutionMetaData&& from) noexcept
    : NodeExecutionMetaData() {
    *this = ::std::move(from);
  }

  inline NodeExecutionMetaData& operator=(NodeExecutionMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecutionMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionMetaData* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionMetaData*>(
               &_NodeExecutionMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NodeExecutionMetaData* other);
  friend void swap(NodeExecutionMetaData& a, NodeExecutionMetaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionMetaData* New() const final {
    return CreateMaybeMessage<NodeExecutionMetaData>(nullptr);
  }

  NodeExecutionMetaData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecutionMetaData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecutionMetaData& from);
  void MergeFrom(const NodeExecutionMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionMetaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string retry_group = 1;
  void clear_retry_group();
  static const int kRetryGroupFieldNumber = 1;
  const ::std::string& retry_group() const;
  void set_retry_group(const ::std::string& value);
  #if LANG_CXX11
  void set_retry_group(::std::string&& value);
  #endif
  void set_retry_group(const char* value);
  void set_retry_group(const char* value, size_t size);
  ::std::string* mutable_retry_group();
  ::std::string* release_retry_group();
  void set_allocated_retry_group(::std::string* retry_group);

  // string spec_node_id = 3;
  void clear_spec_node_id();
  static const int kSpecNodeIdFieldNumber = 3;
  const ::std::string& spec_node_id() const;
  void set_spec_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_spec_node_id(::std::string&& value);
  #endif
  void set_spec_node_id(const char* value);
  void set_spec_node_id(const char* value, size_t size);
  ::std::string* mutable_spec_node_id();
  ::std::string* release_spec_node_id();
  void set_allocated_spec_node_id(::std::string* spec_node_id);

  // bool is_parent_node = 2;
  void clear_is_parent_node();
  static const int kIsParentNodeFieldNumber = 2;
  bool is_parent_node() const;
  void set_is_parent_node(bool value);

  // bool is_dynamic = 4;
  void clear_is_dynamic();
  static const int kIsDynamicFieldNumber = 4;
  bool is_dynamic() const;
  void set_is_dynamic(bool value);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.NodeExecutionMetaData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr retry_group_;
  ::google::protobuf::internal::ArenaStringPtr spec_node_id_;
  bool is_parent_node_;
  bool is_dynamic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeExecutionList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.NodeExecutionList) */ {
 public:
  NodeExecutionList();
  virtual ~NodeExecutionList();

  NodeExecutionList(const NodeExecutionList& from);

  inline NodeExecutionList& operator=(const NodeExecutionList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionList(NodeExecutionList&& from) noexcept
    : NodeExecutionList() {
    *this = ::std::move(from);
  }

  inline NodeExecutionList& operator=(NodeExecutionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecutionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionList* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionList*>(
               &_NodeExecutionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NodeExecutionList* other);
  friend void swap(NodeExecutionList& a, NodeExecutionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionList* New() const final {
    return CreateMaybeMessage<NodeExecutionList>(nullptr);
  }

  NodeExecutionList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecutionList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecutionList& from);
  void MergeFrom(const NodeExecutionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulaidl.admin.NodeExecution node_executions = 1;
  int node_executions_size() const;
  void clear_node_executions();
  static const int kNodeExecutionsFieldNumber = 1;
  ::nebulaidl::admin::NodeExecution* mutable_node_executions(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::NodeExecution >*
      mutable_node_executions();
  const ::nebulaidl::admin::NodeExecution& node_executions(int index) const;
  ::nebulaidl::admin::NodeExecution* add_node_executions();
  const ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::NodeExecution >&
      node_executions() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.NodeExecutionList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::NodeExecution > node_executions_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeExecutionClosure final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.NodeExecutionClosure) */ {
 public:
  NodeExecutionClosure();
  virtual ~NodeExecutionClosure();

  NodeExecutionClosure(const NodeExecutionClosure& from);

  inline NodeExecutionClosure& operator=(const NodeExecutionClosure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionClosure(NodeExecutionClosure&& from) noexcept
    : NodeExecutionClosure() {
    *this = ::std::move(from);
  }

  inline NodeExecutionClosure& operator=(NodeExecutionClosure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecutionClosure& default_instance();

  enum OutputResultCase {
    kOutputUri = 1,
    kError = 2,
    kOutputData = 10,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  enum TargetMetadataCase {
    kWorkflowNodeMetadata = 8,
    kTaskNodeMetadata = 9,
    TARGET_METADATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionClosure* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionClosure*>(
               &_NodeExecutionClosure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NodeExecutionClosure* other);
  friend void swap(NodeExecutionClosure& a, NodeExecutionClosure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionClosure* New() const final {
    return CreateMaybeMessage<NodeExecutionClosure>(nullptr);
  }

  NodeExecutionClosure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecutionClosure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecutionClosure& from);
  void MergeFrom(const NodeExecutionClosure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionClosure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deck_uri = 11;
  void clear_deck_uri();
  static const int kDeckUriFieldNumber = 11;
  const ::std::string& deck_uri() const;
  void set_deck_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_deck_uri(::std::string&& value);
  #endif
  void set_deck_uri(const char* value);
  void set_deck_uri(const char* value, size_t size);
  ::std::string* mutable_deck_uri();
  ::std::string* release_deck_uri();
  void set_allocated_deck_uri(::std::string* deck_uri);

  // string dynamic_job_spec_uri = 12;
  void clear_dynamic_job_spec_uri();
  static const int kDynamicJobSpecUriFieldNumber = 12;
  const ::std::string& dynamic_job_spec_uri() const;
  void set_dynamic_job_spec_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_dynamic_job_spec_uri(::std::string&& value);
  #endif
  void set_dynamic_job_spec_uri(const char* value);
  void set_dynamic_job_spec_uri(const char* value, size_t size);
  ::std::string* mutable_dynamic_job_spec_uri();
  ::std::string* release_dynamic_job_spec_uri();
  void set_allocated_dynamic_job_spec_uri(::std::string* dynamic_job_spec_uri);

  // .google.protobuf.Timestamp started_at = 4;
  bool has_started_at() const;
  void clear_started_at();
  static const int kStartedAtFieldNumber = 4;
  const ::google::protobuf::Timestamp& started_at() const;
  ::google::protobuf::Timestamp* release_started_at();
  ::google::protobuf::Timestamp* mutable_started_at();
  void set_allocated_started_at(::google::protobuf::Timestamp* started_at);

  // .google.protobuf.Duration duration = 5;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 5;
  const ::google::protobuf::Duration& duration() const;
  ::google::protobuf::Duration* release_duration();
  ::google::protobuf::Duration* mutable_duration();
  void set_allocated_duration(::google::protobuf::Duration* duration);

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 6;
  const ::google::protobuf::Timestamp& created_at() const;
  ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* created_at);

  // .google.protobuf.Timestamp updated_at = 7;
  bool has_updated_at() const;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 7;
  const ::google::protobuf::Timestamp& updated_at() const;
  ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* updated_at);

  // .nebulaidl.core.NodeExecution.Phase phase = 3;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  ::nebulaidl::core::NodeExecution_Phase phase() const;
  void set_phase(::nebulaidl::core::NodeExecution_Phase value);

  // string output_uri = 1 [deprecated = true];
  private:
  bool has_output_uri() const;
  public:
  PROTOBUF_DEPRECATED void clear_output_uri();
  PROTOBUF_DEPRECATED static const int kOutputUriFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& output_uri() const;
  PROTOBUF_DEPRECATED void set_output_uri(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_output_uri(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_output_uri(const char* value);
  PROTOBUF_DEPRECATED void set_output_uri(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_output_uri();
  PROTOBUF_DEPRECATED ::std::string* release_output_uri();
  PROTOBUF_DEPRECATED void set_allocated_output_uri(::std::string* output_uri);

  // .nebulaidl.core.ExecutionError error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::nebulaidl::core::ExecutionError& error() const;
  ::nebulaidl::core::ExecutionError* release_error();
  ::nebulaidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::nebulaidl::core::ExecutionError* error);

  // .nebulaidl.core.LiteralMap output_data = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_output_data() const;
  PROTOBUF_DEPRECATED void clear_output_data();
  PROTOBUF_DEPRECATED static const int kOutputDataFieldNumber = 10;
  PROTOBUF_DEPRECATED const ::nebulaidl::core::LiteralMap& output_data() const;
  PROTOBUF_DEPRECATED ::nebulaidl::core::LiteralMap* release_output_data();
  PROTOBUF_DEPRECATED ::nebulaidl::core::LiteralMap* mutable_output_data();
  PROTOBUF_DEPRECATED void set_allocated_output_data(::nebulaidl::core::LiteralMap* output_data);

  // .nebulaidl.admin.WorkflowNodeMetadata workflow_node_metadata = 8;
  bool has_workflow_node_metadata() const;
  void clear_workflow_node_metadata();
  static const int kWorkflowNodeMetadataFieldNumber = 8;
  const ::nebulaidl::admin::WorkflowNodeMetadata& workflow_node_metadata() const;
  ::nebulaidl::admin::WorkflowNodeMetadata* release_workflow_node_metadata();
  ::nebulaidl::admin::WorkflowNodeMetadata* mutable_workflow_node_metadata();
  void set_allocated_workflow_node_metadata(::nebulaidl::admin::WorkflowNodeMetadata* workflow_node_metadata);

  // .nebulaidl.admin.TaskNodeMetadata task_node_metadata = 9;
  bool has_task_node_metadata() const;
  void clear_task_node_metadata();
  static const int kTaskNodeMetadataFieldNumber = 9;
  const ::nebulaidl::admin::TaskNodeMetadata& task_node_metadata() const;
  ::nebulaidl::admin::TaskNodeMetadata* release_task_node_metadata();
  ::nebulaidl::admin::TaskNodeMetadata* mutable_task_node_metadata();
  void set_allocated_task_node_metadata(::nebulaidl::admin::TaskNodeMetadata* task_node_metadata);

  void clear_output_result();
  OutputResultCase output_result_case() const;
  void clear_target_metadata();
  TargetMetadataCase target_metadata_case() const;
  // @@protoc_insertion_point(class_scope:nebulaidl.admin.NodeExecutionClosure)
 private:
  class HasBitSetters;
  void set_has_output_uri();
  void set_has_error();
  void set_has_output_data();
  void set_has_workflow_node_metadata();
  void set_has_task_node_metadata();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  inline bool has_target_metadata() const;
  inline void clear_has_target_metadata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deck_uri_;
  ::google::protobuf::internal::ArenaStringPtr dynamic_job_spec_uri_;
  ::google::protobuf::Timestamp* started_at_;
  ::google::protobuf::Duration* duration_;
  ::google::protobuf::Timestamp* created_at_;
  ::google::protobuf::Timestamp* updated_at_;
  int phase_;
  union OutputResultUnion {
    OutputResultUnion() {}
    ::google::protobuf::internal::ArenaStringPtr output_uri_;
    ::nebulaidl::core::ExecutionError* error_;
    ::nebulaidl::core::LiteralMap* output_data_;
  } output_result_;
  union TargetMetadataUnion {
    TargetMetadataUnion() {}
    ::nebulaidl::admin::WorkflowNodeMetadata* workflow_node_metadata_;
    ::nebulaidl::admin::TaskNodeMetadata* task_node_metadata_;
  } target_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class WorkflowNodeMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.WorkflowNodeMetadata) */ {
 public:
  WorkflowNodeMetadata();
  virtual ~WorkflowNodeMetadata();

  WorkflowNodeMetadata(const WorkflowNodeMetadata& from);

  inline WorkflowNodeMetadata& operator=(const WorkflowNodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowNodeMetadata(WorkflowNodeMetadata&& from) noexcept
    : WorkflowNodeMetadata() {
    *this = ::std::move(from);
  }

  inline WorkflowNodeMetadata& operator=(WorkflowNodeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowNodeMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowNodeMetadata* internal_default_instance() {
    return reinterpret_cast<const WorkflowNodeMetadata*>(
               &_WorkflowNodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(WorkflowNodeMetadata* other);
  friend void swap(WorkflowNodeMetadata& a, WorkflowNodeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowNodeMetadata* New() const final {
    return CreateMaybeMessage<WorkflowNodeMetadata>(nullptr);
  }

  WorkflowNodeMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowNodeMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowNodeMetadata& from);
  void MergeFrom(const WorkflowNodeMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowNodeMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.WorkflowExecutionIdentifier executionId = 1;
  bool has_executionid() const;
  void clear_executionid();
  static const int kExecutionIdFieldNumber = 1;
  const ::nebulaidl::core::WorkflowExecutionIdentifier& executionid() const;
  ::nebulaidl::core::WorkflowExecutionIdentifier* release_executionid();
  ::nebulaidl::core::WorkflowExecutionIdentifier* mutable_executionid();
  void set_allocated_executionid(::nebulaidl::core::WorkflowExecutionIdentifier* executionid);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.WorkflowNodeMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::core::WorkflowExecutionIdentifier* executionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskNodeMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.TaskNodeMetadata) */ {
 public:
  TaskNodeMetadata();
  virtual ~TaskNodeMetadata();

  TaskNodeMetadata(const TaskNodeMetadata& from);

  inline TaskNodeMetadata& operator=(const TaskNodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskNodeMetadata(TaskNodeMetadata&& from) noexcept
    : TaskNodeMetadata() {
    *this = ::std::move(from);
  }

  inline TaskNodeMetadata& operator=(TaskNodeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskNodeMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskNodeMetadata* internal_default_instance() {
    return reinterpret_cast<const TaskNodeMetadata*>(
               &_TaskNodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TaskNodeMetadata* other);
  friend void swap(TaskNodeMetadata& a, TaskNodeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskNodeMetadata* New() const final {
    return CreateMaybeMessage<TaskNodeMetadata>(nullptr);
  }

  TaskNodeMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskNodeMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskNodeMetadata& from);
  void MergeFrom(const TaskNodeMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskNodeMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string checkpoint_uri = 4;
  void clear_checkpoint_uri();
  static const int kCheckpointUriFieldNumber = 4;
  const ::std::string& checkpoint_uri() const;
  void set_checkpoint_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_checkpoint_uri(::std::string&& value);
  #endif
  void set_checkpoint_uri(const char* value);
  void set_checkpoint_uri(const char* value, size_t size);
  ::std::string* mutable_checkpoint_uri();
  ::std::string* release_checkpoint_uri();
  void set_allocated_checkpoint_uri(::std::string* checkpoint_uri);

  // .nebulaidl.core.CatalogMetadata catalog_key = 2;
  bool has_catalog_key() const;
  void clear_catalog_key();
  static const int kCatalogKeyFieldNumber = 2;
  const ::nebulaidl::core::CatalogMetadata& catalog_key() const;
  ::nebulaidl::core::CatalogMetadata* release_catalog_key();
  ::nebulaidl::core::CatalogMetadata* mutable_catalog_key();
  void set_allocated_catalog_key(::nebulaidl::core::CatalogMetadata* catalog_key);

  // .nebulaidl.core.CatalogCacheStatus cache_status = 1;
  void clear_cache_status();
  static const int kCacheStatusFieldNumber = 1;
  ::nebulaidl::core::CatalogCacheStatus cache_status() const;
  void set_cache_status(::nebulaidl::core::CatalogCacheStatus value);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.TaskNodeMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr checkpoint_uri_;
  ::nebulaidl::core::CatalogMetadata* catalog_key_;
  int cache_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class DynamicWorkflowNodeMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.DynamicWorkflowNodeMetadata) */ {
 public:
  DynamicWorkflowNodeMetadata();
  virtual ~DynamicWorkflowNodeMetadata();

  DynamicWorkflowNodeMetadata(const DynamicWorkflowNodeMetadata& from);

  inline DynamicWorkflowNodeMetadata& operator=(const DynamicWorkflowNodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DynamicWorkflowNodeMetadata(DynamicWorkflowNodeMetadata&& from) noexcept
    : DynamicWorkflowNodeMetadata() {
    *this = ::std::move(from);
  }

  inline DynamicWorkflowNodeMetadata& operator=(DynamicWorkflowNodeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DynamicWorkflowNodeMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicWorkflowNodeMetadata* internal_default_instance() {
    return reinterpret_cast<const DynamicWorkflowNodeMetadata*>(
               &_DynamicWorkflowNodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DynamicWorkflowNodeMetadata* other);
  friend void swap(DynamicWorkflowNodeMetadata& a, DynamicWorkflowNodeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DynamicWorkflowNodeMetadata* New() const final {
    return CreateMaybeMessage<DynamicWorkflowNodeMetadata>(nullptr);
  }

  DynamicWorkflowNodeMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DynamicWorkflowNodeMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DynamicWorkflowNodeMetadata& from);
  void MergeFrom(const DynamicWorkflowNodeMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicWorkflowNodeMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dynamic_job_spec_uri = 3;
  void clear_dynamic_job_spec_uri();
  static const int kDynamicJobSpecUriFieldNumber = 3;
  const ::std::string& dynamic_job_spec_uri() const;
  void set_dynamic_job_spec_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_dynamic_job_spec_uri(::std::string&& value);
  #endif
  void set_dynamic_job_spec_uri(const char* value);
  void set_dynamic_job_spec_uri(const char* value, size_t size);
  ::std::string* mutable_dynamic_job_spec_uri();
  ::std::string* release_dynamic_job_spec_uri();
  void set_allocated_dynamic_job_spec_uri(::std::string* dynamic_job_spec_uri);

  // .nebulaidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::Identifier& id() const;
  ::nebulaidl::core::Identifier* release_id();
  ::nebulaidl::core::Identifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::Identifier* id);

  // .nebulaidl.core.CompiledWorkflowClosure compiled_workflow = 2;
  bool has_compiled_workflow() const;
  void clear_compiled_workflow();
  static const int kCompiledWorkflowFieldNumber = 2;
  const ::nebulaidl::core::CompiledWorkflowClosure& compiled_workflow() const;
  ::nebulaidl::core::CompiledWorkflowClosure* release_compiled_workflow();
  ::nebulaidl::core::CompiledWorkflowClosure* mutable_compiled_workflow();
  void set_allocated_compiled_workflow(::nebulaidl::core::CompiledWorkflowClosure* compiled_workflow);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.DynamicWorkflowNodeMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dynamic_job_spec_uri_;
  ::nebulaidl::core::Identifier* id_;
  ::nebulaidl::core::CompiledWorkflowClosure* compiled_workflow_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeExecutionGetDataRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.NodeExecutionGetDataRequest) */ {
 public:
  NodeExecutionGetDataRequest();
  virtual ~NodeExecutionGetDataRequest();

  NodeExecutionGetDataRequest(const NodeExecutionGetDataRequest& from);

  inline NodeExecutionGetDataRequest& operator=(const NodeExecutionGetDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionGetDataRequest(NodeExecutionGetDataRequest&& from) noexcept
    : NodeExecutionGetDataRequest() {
    *this = ::std::move(from);
  }

  inline NodeExecutionGetDataRequest& operator=(NodeExecutionGetDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecutionGetDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionGetDataRequest* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionGetDataRequest*>(
               &_NodeExecutionGetDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(NodeExecutionGetDataRequest* other);
  friend void swap(NodeExecutionGetDataRequest& a, NodeExecutionGetDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionGetDataRequest* New() const final {
    return CreateMaybeMessage<NodeExecutionGetDataRequest>(nullptr);
  }

  NodeExecutionGetDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecutionGetDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecutionGetDataRequest& from);
  void MergeFrom(const NodeExecutionGetDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionGetDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.core.NodeExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::nebulaidl::core::NodeExecutionIdentifier& id() const;
  ::nebulaidl::core::NodeExecutionIdentifier* release_id();
  ::nebulaidl::core::NodeExecutionIdentifier* mutable_id();
  void set_allocated_id(::nebulaidl::core::NodeExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.NodeExecutionGetDataRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::core::NodeExecutionIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeExecutionGetDataResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulaidl.admin.NodeExecutionGetDataResponse) */ {
 public:
  NodeExecutionGetDataResponse();
  virtual ~NodeExecutionGetDataResponse();

  NodeExecutionGetDataResponse(const NodeExecutionGetDataResponse& from);

  inline NodeExecutionGetDataResponse& operator=(const NodeExecutionGetDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionGetDataResponse(NodeExecutionGetDataResponse&& from) noexcept
    : NodeExecutionGetDataResponse() {
    *this = ::std::move(from);
  }

  inline NodeExecutionGetDataResponse& operator=(NodeExecutionGetDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecutionGetDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionGetDataResponse* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionGetDataResponse*>(
               &_NodeExecutionGetDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(NodeExecutionGetDataResponse* other);
  friend void swap(NodeExecutionGetDataResponse& a, NodeExecutionGetDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionGetDataResponse* New() const final {
    return CreateMaybeMessage<NodeExecutionGetDataResponse>(nullptr);
  }

  NodeExecutionGetDataResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecutionGetDataResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecutionGetDataResponse& from);
  void MergeFrom(const NodeExecutionGetDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionGetDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulaidl.admin.UrlBlob inputs = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_inputs() const;
  PROTOBUF_DEPRECATED void clear_inputs();
  PROTOBUF_DEPRECATED static const int kInputsFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::nebulaidl::admin::UrlBlob& inputs() const;
  PROTOBUF_DEPRECATED ::nebulaidl::admin::UrlBlob* release_inputs();
  PROTOBUF_DEPRECATED ::nebulaidl::admin::UrlBlob* mutable_inputs();
  PROTOBUF_DEPRECATED void set_allocated_inputs(::nebulaidl::admin::UrlBlob* inputs);

  // .nebulaidl.admin.UrlBlob outputs = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_outputs() const;
  PROTOBUF_DEPRECATED void clear_outputs();
  PROTOBUF_DEPRECATED static const int kOutputsFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::nebulaidl::admin::UrlBlob& outputs() const;
  PROTOBUF_DEPRECATED ::nebulaidl::admin::UrlBlob* release_outputs();
  PROTOBUF_DEPRECATED ::nebulaidl::admin::UrlBlob* mutable_outputs();
  PROTOBUF_DEPRECATED void set_allocated_outputs(::nebulaidl::admin::UrlBlob* outputs);

  // .nebulaidl.core.LiteralMap full_inputs = 3;
  bool has_full_inputs() const;
  void clear_full_inputs();
  static const int kFullInputsFieldNumber = 3;
  const ::nebulaidl::core::LiteralMap& full_inputs() const;
  ::nebulaidl::core::LiteralMap* release_full_inputs();
  ::nebulaidl::core::LiteralMap* mutable_full_inputs();
  void set_allocated_full_inputs(::nebulaidl::core::LiteralMap* full_inputs);

  // .nebulaidl.core.LiteralMap full_outputs = 4;
  bool has_full_outputs() const;
  void clear_full_outputs();
  static const int kFullOutputsFieldNumber = 4;
  const ::nebulaidl::core::LiteralMap& full_outputs() const;
  ::nebulaidl::core::LiteralMap* release_full_outputs();
  ::nebulaidl::core::LiteralMap* mutable_full_outputs();
  void set_allocated_full_outputs(::nebulaidl::core::LiteralMap* full_outputs);

  // .nebulaidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 16;
  bool has_dynamic_workflow() const;
  void clear_dynamic_workflow();
  static const int kDynamicWorkflowFieldNumber = 16;
  const ::nebulaidl::admin::DynamicWorkflowNodeMetadata& dynamic_workflow() const;
  ::nebulaidl::admin::DynamicWorkflowNodeMetadata* release_dynamic_workflow();
  ::nebulaidl::admin::DynamicWorkflowNodeMetadata* mutable_dynamic_workflow();
  void set_allocated_dynamic_workflow(::nebulaidl::admin::DynamicWorkflowNodeMetadata* dynamic_workflow);

  // .nebulaidl.admin.NebulaURLs nebula_urls = 17;
  bool has_nebula_urls() const;
  void clear_nebula_urls();
  static const int kNebulaUrlsFieldNumber = 17;
  const ::nebulaidl::admin::NebulaURLs& nebula_urls() const;
  ::nebulaidl::admin::NebulaURLs* release_nebula_urls();
  ::nebulaidl::admin::NebulaURLs* mutable_nebula_urls();
  void set_allocated_nebula_urls(::nebulaidl::admin::NebulaURLs* nebula_urls);

  // @@protoc_insertion_point(class_scope:nebulaidl.admin.NodeExecutionGetDataResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulaidl::admin::UrlBlob* inputs_;
  ::nebulaidl::admin::UrlBlob* outputs_;
  ::nebulaidl::core::LiteralMap* full_inputs_;
  ::nebulaidl::core::LiteralMap* full_outputs_;
  ::nebulaidl::admin::DynamicWorkflowNodeMetadata* dynamic_workflow_;
  ::nebulaidl::admin::NebulaURLs* nebula_urls_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulaidl_2fadmin_2fnode_5fexecution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeExecutionGetRequest

// .nebulaidl.core.NodeExecutionIdentifier id = 1;
inline bool NodeExecutionGetRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::NodeExecutionIdentifier& NodeExecutionGetRequest::id() const {
  const ::nebulaidl::core::NodeExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionGetRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::NodeExecutionIdentifier*>(
      &::nebulaidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::NodeExecutionIdentifier* NodeExecutionGetRequest::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionGetRequest.id)
  
  ::nebulaidl::core::NodeExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::NodeExecutionIdentifier* NodeExecutionGetRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::NodeExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionGetRequest.id)
  return id_;
}
inline void NodeExecutionGetRequest::set_allocated_id(::nebulaidl::core::NodeExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionGetRequest.id)
}

// -------------------------------------------------------------------

// NodeExecutionListRequest

// .nebulaidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
inline bool NodeExecutionListRequest::has_workflow_execution_id() const {
  return this != internal_default_instance() && workflow_execution_id_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& NodeExecutionListRequest::workflow_execution_id() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = workflow_execution_id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionListRequest.workflow_execution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* NodeExecutionListRequest::release_workflow_execution_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionListRequest.workflow_execution_id)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = workflow_execution_id_;
  workflow_execution_id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* NodeExecutionListRequest::mutable_workflow_execution_id() {
  
  if (workflow_execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    workflow_execution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionListRequest.workflow_execution_id)
  return workflow_execution_id_;
}
inline void NodeExecutionListRequest::set_allocated_workflow_execution_id(::nebulaidl::core::WorkflowExecutionIdentifier* workflow_execution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(workflow_execution_id_);
  }
  if (workflow_execution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_execution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_execution_id, submessage_arena);
    }
    
  } else {
    
  }
  workflow_execution_id_ = workflow_execution_id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionListRequest.workflow_execution_id)
}

// uint32 limit = 2;
inline void NodeExecutionListRequest::clear_limit() {
  limit_ = 0u;
}
inline ::google::protobuf::uint32 NodeExecutionListRequest::limit() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionListRequest.limit)
  return limit_;
}
inline void NodeExecutionListRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionListRequest.limit)
}

// string token = 3;
inline void NodeExecutionListRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionListRequest::token() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionListRequest.token)
  return token_.GetNoArena();
}
inline void NodeExecutionListRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionListRequest.token)
}
#if LANG_CXX11
inline void NodeExecutionListRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecutionListRequest.token)
}
#endif
inline void NodeExecutionListRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecutionListRequest.token)
}
inline void NodeExecutionListRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecutionListRequest.token)
}
inline ::std::string* NodeExecutionListRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionListRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionListRequest::release_token() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionListRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionListRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionListRequest.token)
}

// string filters = 4;
inline void NodeExecutionListRequest::clear_filters() {
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionListRequest::filters() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionListRequest.filters)
  return filters_.GetNoArena();
}
inline void NodeExecutionListRequest::set_filters(const ::std::string& value) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionListRequest.filters)
}
#if LANG_CXX11
inline void NodeExecutionListRequest::set_filters(::std::string&& value) {
  
  filters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecutionListRequest.filters)
}
#endif
inline void NodeExecutionListRequest::set_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecutionListRequest.filters)
}
inline void NodeExecutionListRequest::set_filters(const char* value, size_t size) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecutionListRequest.filters)
}
inline ::std::string* NodeExecutionListRequest::mutable_filters() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionListRequest.filters)
  return filters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionListRequest::release_filters() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionListRequest.filters)
  
  return filters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionListRequest::set_allocated_filters(::std::string* filters) {
  if (filters != nullptr) {
    
  } else {
    
  }
  filters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filters);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionListRequest.filters)
}

// .nebulaidl.admin.Sort sort_by = 5;
inline bool NodeExecutionListRequest::has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline const ::nebulaidl::admin::Sort& NodeExecutionListRequest::sort_by() const {
  const ::nebulaidl::admin::Sort* p = sort_by_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionListRequest.sort_by)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::Sort*>(
      &::nebulaidl::admin::_Sort_default_instance_);
}
inline ::nebulaidl::admin::Sort* NodeExecutionListRequest::release_sort_by() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionListRequest.sort_by)
  
  ::nebulaidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::Sort* NodeExecutionListRequest::mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::Sort>(GetArenaNoVirtual());
    sort_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionListRequest.sort_by)
  return sort_by_;
}
inline void NodeExecutionListRequest::set_allocated_sort_by(::nebulaidl::admin::Sort* sort_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sort_by_);
  }
  if (sort_by) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sort_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionListRequest.sort_by)
}

// string unique_parent_id = 6;
inline void NodeExecutionListRequest::clear_unique_parent_id() {
  unique_parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionListRequest::unique_parent_id() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionListRequest.unique_parent_id)
  return unique_parent_id_.GetNoArena();
}
inline void NodeExecutionListRequest::set_unique_parent_id(const ::std::string& value) {
  
  unique_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionListRequest.unique_parent_id)
}
#if LANG_CXX11
inline void NodeExecutionListRequest::set_unique_parent_id(::std::string&& value) {
  
  unique_parent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecutionListRequest.unique_parent_id)
}
#endif
inline void NodeExecutionListRequest::set_unique_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unique_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecutionListRequest.unique_parent_id)
}
inline void NodeExecutionListRequest::set_unique_parent_id(const char* value, size_t size) {
  
  unique_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecutionListRequest.unique_parent_id)
}
inline ::std::string* NodeExecutionListRequest::mutable_unique_parent_id() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionListRequest.unique_parent_id)
  return unique_parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionListRequest::release_unique_parent_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionListRequest.unique_parent_id)
  
  return unique_parent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionListRequest::set_allocated_unique_parent_id(::std::string* unique_parent_id) {
  if (unique_parent_id != nullptr) {
    
  } else {
    
  }
  unique_parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_parent_id);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionListRequest.unique_parent_id)
}

// -------------------------------------------------------------------

// NodeExecutionForTaskListRequest

// .nebulaidl.core.TaskExecutionIdentifier task_execution_id = 1;
inline bool NodeExecutionForTaskListRequest::has_task_execution_id() const {
  return this != internal_default_instance() && task_execution_id_ != nullptr;
}
inline const ::nebulaidl::core::TaskExecutionIdentifier& NodeExecutionForTaskListRequest::task_execution_id() const {
  const ::nebulaidl::core::TaskExecutionIdentifier* p = task_execution_id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionForTaskListRequest.task_execution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::TaskExecutionIdentifier*>(
      &::nebulaidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::TaskExecutionIdentifier* NodeExecutionForTaskListRequest::release_task_execution_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionForTaskListRequest.task_execution_id)
  
  ::nebulaidl::core::TaskExecutionIdentifier* temp = task_execution_id_;
  task_execution_id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::TaskExecutionIdentifier* NodeExecutionForTaskListRequest::mutable_task_execution_id() {
  
  if (task_execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::TaskExecutionIdentifier>(GetArenaNoVirtual());
    task_execution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionForTaskListRequest.task_execution_id)
  return task_execution_id_;
}
inline void NodeExecutionForTaskListRequest::set_allocated_task_execution_id(::nebulaidl::core::TaskExecutionIdentifier* task_execution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_execution_id_);
  }
  if (task_execution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_execution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_execution_id, submessage_arena);
    }
    
  } else {
    
  }
  task_execution_id_ = task_execution_id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionForTaskListRequest.task_execution_id)
}

// uint32 limit = 2;
inline void NodeExecutionForTaskListRequest::clear_limit() {
  limit_ = 0u;
}
inline ::google::protobuf::uint32 NodeExecutionForTaskListRequest::limit() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionForTaskListRequest.limit)
  return limit_;
}
inline void NodeExecutionForTaskListRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionForTaskListRequest.limit)
}

// string token = 3;
inline void NodeExecutionForTaskListRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionForTaskListRequest::token() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionForTaskListRequest.token)
  return token_.GetNoArena();
}
inline void NodeExecutionForTaskListRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionForTaskListRequest.token)
}
#if LANG_CXX11
inline void NodeExecutionForTaskListRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecutionForTaskListRequest.token)
}
#endif
inline void NodeExecutionForTaskListRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecutionForTaskListRequest.token)
}
inline void NodeExecutionForTaskListRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecutionForTaskListRequest.token)
}
inline ::std::string* NodeExecutionForTaskListRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionForTaskListRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionForTaskListRequest::release_token() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionForTaskListRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionForTaskListRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionForTaskListRequest.token)
}

// string filters = 4;
inline void NodeExecutionForTaskListRequest::clear_filters() {
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionForTaskListRequest::filters() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionForTaskListRequest.filters)
  return filters_.GetNoArena();
}
inline void NodeExecutionForTaskListRequest::set_filters(const ::std::string& value) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionForTaskListRequest.filters)
}
#if LANG_CXX11
inline void NodeExecutionForTaskListRequest::set_filters(::std::string&& value) {
  
  filters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecutionForTaskListRequest.filters)
}
#endif
inline void NodeExecutionForTaskListRequest::set_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecutionForTaskListRequest.filters)
}
inline void NodeExecutionForTaskListRequest::set_filters(const char* value, size_t size) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecutionForTaskListRequest.filters)
}
inline ::std::string* NodeExecutionForTaskListRequest::mutable_filters() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionForTaskListRequest.filters)
  return filters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionForTaskListRequest::release_filters() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionForTaskListRequest.filters)
  
  return filters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionForTaskListRequest::set_allocated_filters(::std::string* filters) {
  if (filters != nullptr) {
    
  } else {
    
  }
  filters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filters);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionForTaskListRequest.filters)
}

// .nebulaidl.admin.Sort sort_by = 5;
inline bool NodeExecutionForTaskListRequest::has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline const ::nebulaidl::admin::Sort& NodeExecutionForTaskListRequest::sort_by() const {
  const ::nebulaidl::admin::Sort* p = sort_by_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionForTaskListRequest.sort_by)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::Sort*>(
      &::nebulaidl::admin::_Sort_default_instance_);
}
inline ::nebulaidl::admin::Sort* NodeExecutionForTaskListRequest::release_sort_by() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionForTaskListRequest.sort_by)
  
  ::nebulaidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::Sort* NodeExecutionForTaskListRequest::mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::Sort>(GetArenaNoVirtual());
    sort_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionForTaskListRequest.sort_by)
  return sort_by_;
}
inline void NodeExecutionForTaskListRequest::set_allocated_sort_by(::nebulaidl::admin::Sort* sort_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sort_by_);
  }
  if (sort_by) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sort_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionForTaskListRequest.sort_by)
}

// -------------------------------------------------------------------

// NodeExecution

// .nebulaidl.core.NodeExecutionIdentifier id = 1;
inline bool NodeExecution::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::NodeExecutionIdentifier& NodeExecution::id() const {
  const ::nebulaidl::core::NodeExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecution.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::NodeExecutionIdentifier*>(
      &::nebulaidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::NodeExecutionIdentifier* NodeExecution::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecution.id)
  
  ::nebulaidl::core::NodeExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::NodeExecutionIdentifier* NodeExecution::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::NodeExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecution.id)
  return id_;
}
inline void NodeExecution::set_allocated_id(::nebulaidl::core::NodeExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecution.id)
}

// string input_uri = 2;
inline void NodeExecution::clear_input_uri() {
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecution::input_uri() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecution.input_uri)
  return input_uri_.GetNoArena();
}
inline void NodeExecution::set_input_uri(const ::std::string& value) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecution.input_uri)
}
#if LANG_CXX11
inline void NodeExecution::set_input_uri(::std::string&& value) {
  
  input_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecution.input_uri)
}
#endif
inline void NodeExecution::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecution.input_uri)
}
inline void NodeExecution::set_input_uri(const char* value, size_t size) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecution.input_uri)
}
inline ::std::string* NodeExecution::mutable_input_uri() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecution.input_uri)
  return input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecution::release_input_uri() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecution.input_uri)
  
  return input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecution::set_allocated_input_uri(::std::string* input_uri) {
  if (input_uri != nullptr) {
    
  } else {
    
  }
  input_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_uri);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecution.input_uri)
}

// .nebulaidl.admin.NodeExecutionClosure closure = 3;
inline bool NodeExecution::has_closure() const {
  return this != internal_default_instance() && closure_ != nullptr;
}
inline void NodeExecution::clear_closure() {
  if (GetArenaNoVirtual() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
}
inline const ::nebulaidl::admin::NodeExecutionClosure& NodeExecution::closure() const {
  const ::nebulaidl::admin::NodeExecutionClosure* p = closure_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecution.closure)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::NodeExecutionClosure*>(
      &::nebulaidl::admin::_NodeExecutionClosure_default_instance_);
}
inline ::nebulaidl::admin::NodeExecutionClosure* NodeExecution::release_closure() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecution.closure)
  
  ::nebulaidl::admin::NodeExecutionClosure* temp = closure_;
  closure_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::NodeExecutionClosure* NodeExecution::mutable_closure() {
  
  if (closure_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::NodeExecutionClosure>(GetArenaNoVirtual());
    closure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecution.closure)
  return closure_;
}
inline void NodeExecution::set_allocated_closure(::nebulaidl::admin::NodeExecutionClosure* closure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete closure_;
  }
  if (closure) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      closure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, closure, submessage_arena);
    }
    
  } else {
    
  }
  closure_ = closure;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecution.closure)
}

// .nebulaidl.admin.NodeExecutionMetaData metadata = 4;
inline bool NodeExecution::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void NodeExecution::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::nebulaidl::admin::NodeExecutionMetaData& NodeExecution::metadata() const {
  const ::nebulaidl::admin::NodeExecutionMetaData* p = metadata_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecution.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::NodeExecutionMetaData*>(
      &::nebulaidl::admin::_NodeExecutionMetaData_default_instance_);
}
inline ::nebulaidl::admin::NodeExecutionMetaData* NodeExecution::release_metadata() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecution.metadata)
  
  ::nebulaidl::admin::NodeExecutionMetaData* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::NodeExecutionMetaData* NodeExecution::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::NodeExecutionMetaData>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecution.metadata)
  return metadata_;
}
inline void NodeExecution::set_allocated_metadata(::nebulaidl::admin::NodeExecutionMetaData* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecution.metadata)
}

// -------------------------------------------------------------------

// NodeExecutionMetaData

// string retry_group = 1;
inline void NodeExecutionMetaData::clear_retry_group() {
  retry_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionMetaData::retry_group() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionMetaData.retry_group)
  return retry_group_.GetNoArena();
}
inline void NodeExecutionMetaData::set_retry_group(const ::std::string& value) {
  
  retry_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionMetaData.retry_group)
}
#if LANG_CXX11
inline void NodeExecutionMetaData::set_retry_group(::std::string&& value) {
  
  retry_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecutionMetaData.retry_group)
}
#endif
inline void NodeExecutionMetaData::set_retry_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  retry_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecutionMetaData.retry_group)
}
inline void NodeExecutionMetaData::set_retry_group(const char* value, size_t size) {
  
  retry_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecutionMetaData.retry_group)
}
inline ::std::string* NodeExecutionMetaData::mutable_retry_group() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionMetaData.retry_group)
  return retry_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionMetaData::release_retry_group() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionMetaData.retry_group)
  
  return retry_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionMetaData::set_allocated_retry_group(::std::string* retry_group) {
  if (retry_group != nullptr) {
    
  } else {
    
  }
  retry_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retry_group);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionMetaData.retry_group)
}

// bool is_parent_node = 2;
inline void NodeExecutionMetaData::clear_is_parent_node() {
  is_parent_node_ = false;
}
inline bool NodeExecutionMetaData::is_parent_node() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionMetaData.is_parent_node)
  return is_parent_node_;
}
inline void NodeExecutionMetaData::set_is_parent_node(bool value) {
  
  is_parent_node_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionMetaData.is_parent_node)
}

// string spec_node_id = 3;
inline void NodeExecutionMetaData::clear_spec_node_id() {
  spec_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionMetaData::spec_node_id() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionMetaData.spec_node_id)
  return spec_node_id_.GetNoArena();
}
inline void NodeExecutionMetaData::set_spec_node_id(const ::std::string& value) {
  
  spec_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionMetaData.spec_node_id)
}
#if LANG_CXX11
inline void NodeExecutionMetaData::set_spec_node_id(::std::string&& value) {
  
  spec_node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecutionMetaData.spec_node_id)
}
#endif
inline void NodeExecutionMetaData::set_spec_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spec_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecutionMetaData.spec_node_id)
}
inline void NodeExecutionMetaData::set_spec_node_id(const char* value, size_t size) {
  
  spec_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecutionMetaData.spec_node_id)
}
inline ::std::string* NodeExecutionMetaData::mutable_spec_node_id() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionMetaData.spec_node_id)
  return spec_node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionMetaData::release_spec_node_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionMetaData.spec_node_id)
  
  return spec_node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionMetaData::set_allocated_spec_node_id(::std::string* spec_node_id) {
  if (spec_node_id != nullptr) {
    
  } else {
    
  }
  spec_node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spec_node_id);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionMetaData.spec_node_id)
}

// bool is_dynamic = 4;
inline void NodeExecutionMetaData::clear_is_dynamic() {
  is_dynamic_ = false;
}
inline bool NodeExecutionMetaData::is_dynamic() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionMetaData.is_dynamic)
  return is_dynamic_;
}
inline void NodeExecutionMetaData::set_is_dynamic(bool value) {
  
  is_dynamic_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionMetaData.is_dynamic)
}

// -------------------------------------------------------------------

// NodeExecutionList

// repeated .nebulaidl.admin.NodeExecution node_executions = 1;
inline int NodeExecutionList::node_executions_size() const {
  return node_executions_.size();
}
inline void NodeExecutionList::clear_node_executions() {
  node_executions_.Clear();
}
inline ::nebulaidl::admin::NodeExecution* NodeExecutionList::mutable_node_executions(int index) {
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionList.node_executions)
  return node_executions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::NodeExecution >*
NodeExecutionList::mutable_node_executions() {
  // @@protoc_insertion_point(field_mutable_list:nebulaidl.admin.NodeExecutionList.node_executions)
  return &node_executions_;
}
inline const ::nebulaidl::admin::NodeExecution& NodeExecutionList::node_executions(int index) const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionList.node_executions)
  return node_executions_.Get(index);
}
inline ::nebulaidl::admin::NodeExecution* NodeExecutionList::add_node_executions() {
  // @@protoc_insertion_point(field_add:nebulaidl.admin.NodeExecutionList.node_executions)
  return node_executions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulaidl::admin::NodeExecution >&
NodeExecutionList::node_executions() const {
  // @@protoc_insertion_point(field_list:nebulaidl.admin.NodeExecutionList.node_executions)
  return node_executions_;
}

// string token = 2;
inline void NodeExecutionList::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionList::token() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionList.token)
  return token_.GetNoArena();
}
inline void NodeExecutionList::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionList.token)
}
#if LANG_CXX11
inline void NodeExecutionList::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecutionList.token)
}
#endif
inline void NodeExecutionList::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecutionList.token)
}
inline void NodeExecutionList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecutionList.token)
}
inline ::std::string* NodeExecutionList::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionList.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionList::release_token() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionList.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionList::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionList.token)
}

// -------------------------------------------------------------------

// NodeExecutionClosure

// string output_uri = 1 [deprecated = true];
inline bool NodeExecutionClosure::has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline void NodeExecutionClosure::set_has_output_uri() {
  _oneof_case_[0] = kOutputUri;
}
inline void NodeExecutionClosure::clear_output_uri() {
  if (has_output_uri()) {
    output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_output_result();
  }
}
inline const ::std::string& NodeExecutionClosure::output_uri() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.output_uri)
  if (has_output_uri()) {
    return output_result_.output_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void NodeExecutionClosure::set_output_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionClosure.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionClosure.output_uri)
}
#if LANG_CXX11
inline void NodeExecutionClosure::set_output_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionClosure.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecutionClosure.output_uri)
}
#endif
inline void NodeExecutionClosure::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecutionClosure.output_uri)
}
inline void NodeExecutionClosure::set_output_uri(const char* value, size_t size) {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecutionClosure.output_uri)
}
inline ::std::string* NodeExecutionClosure::mutable_output_uri() {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionClosure.output_uri)
  return output_result_.output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionClosure::release_output_uri() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionClosure.output_uri)
  if (has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void NodeExecutionClosure::set_allocated_output_uri(::std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionClosure.output_uri)
}

// .nebulaidl.core.ExecutionError error = 2;
inline bool NodeExecutionClosure::has_error() const {
  return output_result_case() == kError;
}
inline void NodeExecutionClosure::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::nebulaidl::core::ExecutionError* NodeExecutionClosure::release_error() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionClosure.error)
  if (has_error()) {
    clear_has_output_result();
      ::nebulaidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulaidl::core::ExecutionError& NodeExecutionClosure::error() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.error)
  return has_error()
      ? *output_result_.error_
      : *reinterpret_cast< ::nebulaidl::core::ExecutionError*>(&::nebulaidl::core::_ExecutionError_default_instance_);
}
inline ::nebulaidl::core::ExecutionError* NodeExecutionClosure::mutable_error() {
  if (!has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::nebulaidl::core::ExecutionError >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionClosure.error)
  return output_result_.error_;
}

// .nebulaidl.core.LiteralMap output_data = 10 [deprecated = true];
inline bool NodeExecutionClosure::has_output_data() const {
  return output_result_case() == kOutputData;
}
inline void NodeExecutionClosure::set_has_output_data() {
  _oneof_case_[0] = kOutputData;
}
inline ::nebulaidl::core::LiteralMap* NodeExecutionClosure::release_output_data() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionClosure.output_data)
  if (has_output_data()) {
    clear_has_output_result();
      ::nebulaidl::core::LiteralMap* temp = output_result_.output_data_;
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulaidl::core::LiteralMap& NodeExecutionClosure::output_data() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.output_data)
  return has_output_data()
      ? *output_result_.output_data_
      : *reinterpret_cast< ::nebulaidl::core::LiteralMap*>(&::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* NodeExecutionClosure::mutable_output_data() {
  if (!has_output_data()) {
    clear_output_result();
    set_has_output_data();
    output_result_.output_data_ = CreateMaybeMessage< ::nebulaidl::core::LiteralMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionClosure.output_data)
  return output_result_.output_data_;
}

// .nebulaidl.core.NodeExecution.Phase phase = 3;
inline void NodeExecutionClosure::clear_phase() {
  phase_ = 0;
}
inline ::nebulaidl::core::NodeExecution_Phase NodeExecutionClosure::phase() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.phase)
  return static_cast< ::nebulaidl::core::NodeExecution_Phase >(phase_);
}
inline void NodeExecutionClosure::set_phase(::nebulaidl::core::NodeExecution_Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionClosure.phase)
}

// .google.protobuf.Timestamp started_at = 4;
inline bool NodeExecutionClosure::has_started_at() const {
  return this != internal_default_instance() && started_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& NodeExecutionClosure::started_at() const {
  const ::google::protobuf::Timestamp* p = started_at_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.started_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* NodeExecutionClosure::release_started_at() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionClosure.started_at)
  
  ::google::protobuf::Timestamp* temp = started_at_;
  started_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* NodeExecutionClosure::mutable_started_at() {
  
  if (started_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    started_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionClosure.started_at)
  return started_at_;
}
inline void NodeExecutionClosure::set_allocated_started_at(::google::protobuf::Timestamp* started_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(started_at_);
  }
  if (started_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(started_at)->GetArena();
    if (message_arena != submessage_arena) {
      started_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, started_at, submessage_arena);
    }
    
  } else {
    
  }
  started_at_ = started_at;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionClosure.started_at)
}

// .google.protobuf.Duration duration = 5;
inline bool NodeExecutionClosure::has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline const ::google::protobuf::Duration& NodeExecutionClosure::duration() const {
  const ::google::protobuf::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* NodeExecutionClosure::release_duration() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionClosure.duration)
  
  ::google::protobuf::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* NodeExecutionClosure::mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionClosure.duration)
  return duration_;
}
inline void NodeExecutionClosure::set_allocated_duration(::google::protobuf::Duration* duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(duration_);
  }
  if (duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionClosure.duration)
}

// .google.protobuf.Timestamp created_at = 6;
inline bool NodeExecutionClosure::has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& NodeExecutionClosure::created_at() const {
  const ::google::protobuf::Timestamp* p = created_at_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.created_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* NodeExecutionClosure::release_created_at() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionClosure.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* NodeExecutionClosure::mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionClosure.created_at)
  return created_at_;
}
inline void NodeExecutionClosure::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionClosure.created_at)
}

// .google.protobuf.Timestamp updated_at = 7;
inline bool NodeExecutionClosure::has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& NodeExecutionClosure::updated_at() const {
  const ::google::protobuf::Timestamp* p = updated_at_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.updated_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* NodeExecutionClosure::release_updated_at() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionClosure.updated_at)
  
  ::google::protobuf::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* NodeExecutionClosure::mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    updated_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionClosure.updated_at)
  return updated_at_;
}
inline void NodeExecutionClosure::set_allocated_updated_at(::google::protobuf::Timestamp* updated_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionClosure.updated_at)
}

// .nebulaidl.admin.WorkflowNodeMetadata workflow_node_metadata = 8;
inline bool NodeExecutionClosure::has_workflow_node_metadata() const {
  return target_metadata_case() == kWorkflowNodeMetadata;
}
inline void NodeExecutionClosure::set_has_workflow_node_metadata() {
  _oneof_case_[1] = kWorkflowNodeMetadata;
}
inline void NodeExecutionClosure::clear_workflow_node_metadata() {
  if (has_workflow_node_metadata()) {
    delete target_metadata_.workflow_node_metadata_;
    clear_has_target_metadata();
  }
}
inline ::nebulaidl::admin::WorkflowNodeMetadata* NodeExecutionClosure::release_workflow_node_metadata() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionClosure.workflow_node_metadata)
  if (has_workflow_node_metadata()) {
    clear_has_target_metadata();
      ::nebulaidl::admin::WorkflowNodeMetadata* temp = target_metadata_.workflow_node_metadata_;
    target_metadata_.workflow_node_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulaidl::admin::WorkflowNodeMetadata& NodeExecutionClosure::workflow_node_metadata() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.workflow_node_metadata)
  return has_workflow_node_metadata()
      ? *target_metadata_.workflow_node_metadata_
      : *reinterpret_cast< ::nebulaidl::admin::WorkflowNodeMetadata*>(&::nebulaidl::admin::_WorkflowNodeMetadata_default_instance_);
}
inline ::nebulaidl::admin::WorkflowNodeMetadata* NodeExecutionClosure::mutable_workflow_node_metadata() {
  if (!has_workflow_node_metadata()) {
    clear_target_metadata();
    set_has_workflow_node_metadata();
    target_metadata_.workflow_node_metadata_ = CreateMaybeMessage< ::nebulaidl::admin::WorkflowNodeMetadata >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionClosure.workflow_node_metadata)
  return target_metadata_.workflow_node_metadata_;
}

// .nebulaidl.admin.TaskNodeMetadata task_node_metadata = 9;
inline bool NodeExecutionClosure::has_task_node_metadata() const {
  return target_metadata_case() == kTaskNodeMetadata;
}
inline void NodeExecutionClosure::set_has_task_node_metadata() {
  _oneof_case_[1] = kTaskNodeMetadata;
}
inline void NodeExecutionClosure::clear_task_node_metadata() {
  if (has_task_node_metadata()) {
    delete target_metadata_.task_node_metadata_;
    clear_has_target_metadata();
  }
}
inline ::nebulaidl::admin::TaskNodeMetadata* NodeExecutionClosure::release_task_node_metadata() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionClosure.task_node_metadata)
  if (has_task_node_metadata()) {
    clear_has_target_metadata();
      ::nebulaidl::admin::TaskNodeMetadata* temp = target_metadata_.task_node_metadata_;
    target_metadata_.task_node_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulaidl::admin::TaskNodeMetadata& NodeExecutionClosure::task_node_metadata() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.task_node_metadata)
  return has_task_node_metadata()
      ? *target_metadata_.task_node_metadata_
      : *reinterpret_cast< ::nebulaidl::admin::TaskNodeMetadata*>(&::nebulaidl::admin::_TaskNodeMetadata_default_instance_);
}
inline ::nebulaidl::admin::TaskNodeMetadata* NodeExecutionClosure::mutable_task_node_metadata() {
  if (!has_task_node_metadata()) {
    clear_target_metadata();
    set_has_task_node_metadata();
    target_metadata_.task_node_metadata_ = CreateMaybeMessage< ::nebulaidl::admin::TaskNodeMetadata >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionClosure.task_node_metadata)
  return target_metadata_.task_node_metadata_;
}

// string deck_uri = 11;
inline void NodeExecutionClosure::clear_deck_uri() {
  deck_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionClosure::deck_uri() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.deck_uri)
  return deck_uri_.GetNoArena();
}
inline void NodeExecutionClosure::set_deck_uri(const ::std::string& value) {
  
  deck_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionClosure.deck_uri)
}
#if LANG_CXX11
inline void NodeExecutionClosure::set_deck_uri(::std::string&& value) {
  
  deck_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecutionClosure.deck_uri)
}
#endif
inline void NodeExecutionClosure::set_deck_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deck_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecutionClosure.deck_uri)
}
inline void NodeExecutionClosure::set_deck_uri(const char* value, size_t size) {
  
  deck_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecutionClosure.deck_uri)
}
inline ::std::string* NodeExecutionClosure::mutable_deck_uri() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionClosure.deck_uri)
  return deck_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionClosure::release_deck_uri() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionClosure.deck_uri)
  
  return deck_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionClosure::set_allocated_deck_uri(::std::string* deck_uri) {
  if (deck_uri != nullptr) {
    
  } else {
    
  }
  deck_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deck_uri);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionClosure.deck_uri)
}

// string dynamic_job_spec_uri = 12;
inline void NodeExecutionClosure::clear_dynamic_job_spec_uri() {
  dynamic_job_spec_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionClosure::dynamic_job_spec_uri() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri)
  return dynamic_job_spec_uri_.GetNoArena();
}
inline void NodeExecutionClosure::set_dynamic_job_spec_uri(const ::std::string& value) {
  
  dynamic_job_spec_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri)
}
#if LANG_CXX11
inline void NodeExecutionClosure::set_dynamic_job_spec_uri(::std::string&& value) {
  
  dynamic_job_spec_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri)
}
#endif
inline void NodeExecutionClosure::set_dynamic_job_spec_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dynamic_job_spec_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri)
}
inline void NodeExecutionClosure::set_dynamic_job_spec_uri(const char* value, size_t size) {
  
  dynamic_job_spec_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri)
}
inline ::std::string* NodeExecutionClosure::mutable_dynamic_job_spec_uri() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri)
  return dynamic_job_spec_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionClosure::release_dynamic_job_spec_uri() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri)
  
  return dynamic_job_spec_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionClosure::set_allocated_dynamic_job_spec_uri(::std::string* dynamic_job_spec_uri) {
  if (dynamic_job_spec_uri != nullptr) {
    
  } else {
    
  }
  dynamic_job_spec_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamic_job_spec_uri);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionClosure.dynamic_job_spec_uri)
}

inline bool NodeExecutionClosure::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void NodeExecutionClosure::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline bool NodeExecutionClosure::has_target_metadata() const {
  return target_metadata_case() != TARGET_METADATA_NOT_SET;
}
inline void NodeExecutionClosure::clear_has_target_metadata() {
  _oneof_case_[1] = TARGET_METADATA_NOT_SET;
}
inline NodeExecutionClosure::OutputResultCase NodeExecutionClosure::output_result_case() const {
  return NodeExecutionClosure::OutputResultCase(_oneof_case_[0]);
}
inline NodeExecutionClosure::TargetMetadataCase NodeExecutionClosure::target_metadata_case() const {
  return NodeExecutionClosure::TargetMetadataCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// WorkflowNodeMetadata

// .nebulaidl.core.WorkflowExecutionIdentifier executionId = 1;
inline bool WorkflowNodeMetadata::has_executionid() const {
  return this != internal_default_instance() && executionid_ != nullptr;
}
inline const ::nebulaidl::core::WorkflowExecutionIdentifier& WorkflowNodeMetadata::executionid() const {
  const ::nebulaidl::core::WorkflowExecutionIdentifier* p = executionid_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.WorkflowNodeMetadata.executionId)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::WorkflowExecutionIdentifier*>(
      &::nebulaidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* WorkflowNodeMetadata::release_executionid() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.WorkflowNodeMetadata.executionId)
  
  ::nebulaidl::core::WorkflowExecutionIdentifier* temp = executionid_;
  executionid_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::WorkflowExecutionIdentifier* WorkflowNodeMetadata::mutable_executionid() {
  
  if (executionid_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    executionid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.WorkflowNodeMetadata.executionId)
  return executionid_;
}
inline void WorkflowNodeMetadata::set_allocated_executionid(::nebulaidl::core::WorkflowExecutionIdentifier* executionid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(executionid_);
  }
  if (executionid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      executionid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, executionid, submessage_arena);
    }
    
  } else {
    
  }
  executionid_ = executionid;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.WorkflowNodeMetadata.executionId)
}

// -------------------------------------------------------------------

// TaskNodeMetadata

// .nebulaidl.core.CatalogCacheStatus cache_status = 1;
inline void TaskNodeMetadata::clear_cache_status() {
  cache_status_ = 0;
}
inline ::nebulaidl::core::CatalogCacheStatus TaskNodeMetadata::cache_status() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.TaskNodeMetadata.cache_status)
  return static_cast< ::nebulaidl::core::CatalogCacheStatus >(cache_status_);
}
inline void TaskNodeMetadata::set_cache_status(::nebulaidl::core::CatalogCacheStatus value) {
  
  cache_status_ = value;
  // @@protoc_insertion_point(field_set:nebulaidl.admin.TaskNodeMetadata.cache_status)
}

// .nebulaidl.core.CatalogMetadata catalog_key = 2;
inline bool TaskNodeMetadata::has_catalog_key() const {
  return this != internal_default_instance() && catalog_key_ != nullptr;
}
inline const ::nebulaidl::core::CatalogMetadata& TaskNodeMetadata::catalog_key() const {
  const ::nebulaidl::core::CatalogMetadata* p = catalog_key_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.TaskNodeMetadata.catalog_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::CatalogMetadata*>(
      &::nebulaidl::core::_CatalogMetadata_default_instance_);
}
inline ::nebulaidl::core::CatalogMetadata* TaskNodeMetadata::release_catalog_key() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.TaskNodeMetadata.catalog_key)
  
  ::nebulaidl::core::CatalogMetadata* temp = catalog_key_;
  catalog_key_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::CatalogMetadata* TaskNodeMetadata::mutable_catalog_key() {
  
  if (catalog_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::CatalogMetadata>(GetArenaNoVirtual());
    catalog_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.TaskNodeMetadata.catalog_key)
  return catalog_key_;
}
inline void TaskNodeMetadata::set_allocated_catalog_key(::nebulaidl::core::CatalogMetadata* catalog_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(catalog_key_);
  }
  if (catalog_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      catalog_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, catalog_key, submessage_arena);
    }
    
  } else {
    
  }
  catalog_key_ = catalog_key;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.TaskNodeMetadata.catalog_key)
}

// string checkpoint_uri = 4;
inline void TaskNodeMetadata::clear_checkpoint_uri() {
  checkpoint_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskNodeMetadata::checkpoint_uri() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.TaskNodeMetadata.checkpoint_uri)
  return checkpoint_uri_.GetNoArena();
}
inline void TaskNodeMetadata::set_checkpoint_uri(const ::std::string& value) {
  
  checkpoint_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.TaskNodeMetadata.checkpoint_uri)
}
#if LANG_CXX11
inline void TaskNodeMetadata::set_checkpoint_uri(::std::string&& value) {
  
  checkpoint_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.TaskNodeMetadata.checkpoint_uri)
}
#endif
inline void TaskNodeMetadata::set_checkpoint_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpoint_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.TaskNodeMetadata.checkpoint_uri)
}
inline void TaskNodeMetadata::set_checkpoint_uri(const char* value, size_t size) {
  
  checkpoint_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.TaskNodeMetadata.checkpoint_uri)
}
inline ::std::string* TaskNodeMetadata::mutable_checkpoint_uri() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.TaskNodeMetadata.checkpoint_uri)
  return checkpoint_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskNodeMetadata::release_checkpoint_uri() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.TaskNodeMetadata.checkpoint_uri)
  
  return checkpoint_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskNodeMetadata::set_allocated_checkpoint_uri(::std::string* checkpoint_uri) {
  if (checkpoint_uri != nullptr) {
    
  } else {
    
  }
  checkpoint_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkpoint_uri);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.TaskNodeMetadata.checkpoint_uri)
}

// -------------------------------------------------------------------

// DynamicWorkflowNodeMetadata

// .nebulaidl.core.Identifier id = 1;
inline bool DynamicWorkflowNodeMetadata::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::Identifier& DynamicWorkflowNodeMetadata::id() const {
  const ::nebulaidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.DynamicWorkflowNodeMetadata.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::Identifier*>(
      &::nebulaidl::core::_Identifier_default_instance_);
}
inline ::nebulaidl::core::Identifier* DynamicWorkflowNodeMetadata::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.DynamicWorkflowNodeMetadata.id)
  
  ::nebulaidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::Identifier* DynamicWorkflowNodeMetadata::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.DynamicWorkflowNodeMetadata.id)
  return id_;
}
inline void DynamicWorkflowNodeMetadata::set_allocated_id(::nebulaidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.DynamicWorkflowNodeMetadata.id)
}

// .nebulaidl.core.CompiledWorkflowClosure compiled_workflow = 2;
inline bool DynamicWorkflowNodeMetadata::has_compiled_workflow() const {
  return this != internal_default_instance() && compiled_workflow_ != nullptr;
}
inline const ::nebulaidl::core::CompiledWorkflowClosure& DynamicWorkflowNodeMetadata::compiled_workflow() const {
  const ::nebulaidl::core::CompiledWorkflowClosure* p = compiled_workflow_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.DynamicWorkflowNodeMetadata.compiled_workflow)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::CompiledWorkflowClosure*>(
      &::nebulaidl::core::_CompiledWorkflowClosure_default_instance_);
}
inline ::nebulaidl::core::CompiledWorkflowClosure* DynamicWorkflowNodeMetadata::release_compiled_workflow() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.DynamicWorkflowNodeMetadata.compiled_workflow)
  
  ::nebulaidl::core::CompiledWorkflowClosure* temp = compiled_workflow_;
  compiled_workflow_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::CompiledWorkflowClosure* DynamicWorkflowNodeMetadata::mutable_compiled_workflow() {
  
  if (compiled_workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::CompiledWorkflowClosure>(GetArenaNoVirtual());
    compiled_workflow_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.DynamicWorkflowNodeMetadata.compiled_workflow)
  return compiled_workflow_;
}
inline void DynamicWorkflowNodeMetadata::set_allocated_compiled_workflow(::nebulaidl::core::CompiledWorkflowClosure* compiled_workflow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(compiled_workflow_);
  }
  if (compiled_workflow) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compiled_workflow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, compiled_workflow, submessage_arena);
    }
    
  } else {
    
  }
  compiled_workflow_ = compiled_workflow;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.DynamicWorkflowNodeMetadata.compiled_workflow)
}

// string dynamic_job_spec_uri = 3;
inline void DynamicWorkflowNodeMetadata::clear_dynamic_job_spec_uri() {
  dynamic_job_spec_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DynamicWorkflowNodeMetadata::dynamic_job_spec_uri() const {
  // @@protoc_insertion_point(field_get:nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
  return dynamic_job_spec_uri_.GetNoArena();
}
inline void DynamicWorkflowNodeMetadata::set_dynamic_job_spec_uri(const ::std::string& value) {
  
  dynamic_job_spec_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
}
#if LANG_CXX11
inline void DynamicWorkflowNodeMetadata::set_dynamic_job_spec_uri(::std::string&& value) {
  
  dynamic_job_spec_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
}
#endif
inline void DynamicWorkflowNodeMetadata::set_dynamic_job_spec_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dynamic_job_spec_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
}
inline void DynamicWorkflowNodeMetadata::set_dynamic_job_spec_uri(const char* value, size_t size) {
  
  dynamic_job_spec_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
}
inline ::std::string* DynamicWorkflowNodeMetadata::mutable_dynamic_job_spec_uri() {
  
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
  return dynamic_job_spec_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DynamicWorkflowNodeMetadata::release_dynamic_job_spec_uri() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
  
  return dynamic_job_spec_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicWorkflowNodeMetadata::set_allocated_dynamic_job_spec_uri(::std::string* dynamic_job_spec_uri) {
  if (dynamic_job_spec_uri != nullptr) {
    
  } else {
    
  }
  dynamic_job_spec_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamic_job_spec_uri);
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
}

// -------------------------------------------------------------------

// NodeExecutionGetDataRequest

// .nebulaidl.core.NodeExecutionIdentifier id = 1;
inline bool NodeExecutionGetDataRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::nebulaidl::core::NodeExecutionIdentifier& NodeExecutionGetDataRequest::id() const {
  const ::nebulaidl::core::NodeExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionGetDataRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::NodeExecutionIdentifier*>(
      &::nebulaidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::nebulaidl::core::NodeExecutionIdentifier* NodeExecutionGetDataRequest::release_id() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionGetDataRequest.id)
  
  ::nebulaidl::core::NodeExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::NodeExecutionIdentifier* NodeExecutionGetDataRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::NodeExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionGetDataRequest.id)
  return id_;
}
inline void NodeExecutionGetDataRequest::set_allocated_id(::nebulaidl::core::NodeExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionGetDataRequest.id)
}

// -------------------------------------------------------------------

// NodeExecutionGetDataResponse

// .nebulaidl.admin.UrlBlob inputs = 1 [deprecated = true];
inline bool NodeExecutionGetDataResponse::has_inputs() const {
  return this != internal_default_instance() && inputs_ != nullptr;
}
inline const ::nebulaidl::admin::UrlBlob& NodeExecutionGetDataResponse::inputs() const {
  const ::nebulaidl::admin::UrlBlob* p = inputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionGetDataResponse.inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::UrlBlob*>(
      &::nebulaidl::admin::_UrlBlob_default_instance_);
}
inline ::nebulaidl::admin::UrlBlob* NodeExecutionGetDataResponse::release_inputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionGetDataResponse.inputs)
  
  ::nebulaidl::admin::UrlBlob* temp = inputs_;
  inputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::UrlBlob* NodeExecutionGetDataResponse::mutable_inputs() {
  
  if (inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::UrlBlob>(GetArenaNoVirtual());
    inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionGetDataResponse.inputs)
  return inputs_;
}
inline void NodeExecutionGetDataResponse::set_allocated_inputs(::nebulaidl::admin::UrlBlob* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionGetDataResponse.inputs)
}

// .nebulaidl.admin.UrlBlob outputs = 2 [deprecated = true];
inline bool NodeExecutionGetDataResponse::has_outputs() const {
  return this != internal_default_instance() && outputs_ != nullptr;
}
inline const ::nebulaidl::admin::UrlBlob& NodeExecutionGetDataResponse::outputs() const {
  const ::nebulaidl::admin::UrlBlob* p = outputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionGetDataResponse.outputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::UrlBlob*>(
      &::nebulaidl::admin::_UrlBlob_default_instance_);
}
inline ::nebulaidl::admin::UrlBlob* NodeExecutionGetDataResponse::release_outputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionGetDataResponse.outputs)
  
  ::nebulaidl::admin::UrlBlob* temp = outputs_;
  outputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::UrlBlob* NodeExecutionGetDataResponse::mutable_outputs() {
  
  if (outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::UrlBlob>(GetArenaNoVirtual());
    outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionGetDataResponse.outputs)
  return outputs_;
}
inline void NodeExecutionGetDataResponse::set_allocated_outputs(::nebulaidl::admin::UrlBlob* outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(outputs_);
  }
  if (outputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    
  } else {
    
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionGetDataResponse.outputs)
}

// .nebulaidl.core.LiteralMap full_inputs = 3;
inline bool NodeExecutionGetDataResponse::has_full_inputs() const {
  return this != internal_default_instance() && full_inputs_ != nullptr;
}
inline const ::nebulaidl::core::LiteralMap& NodeExecutionGetDataResponse::full_inputs() const {
  const ::nebulaidl::core::LiteralMap* p = full_inputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionGetDataResponse.full_inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::LiteralMap*>(
      &::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* NodeExecutionGetDataResponse::release_full_inputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionGetDataResponse.full_inputs)
  
  ::nebulaidl::core::LiteralMap* temp = full_inputs_;
  full_inputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::LiteralMap* NodeExecutionGetDataResponse::mutable_full_inputs() {
  
  if (full_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::LiteralMap>(GetArenaNoVirtual());
    full_inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionGetDataResponse.full_inputs)
  return full_inputs_;
}
inline void NodeExecutionGetDataResponse::set_allocated_full_inputs(::nebulaidl::core::LiteralMap* full_inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(full_inputs_);
  }
  if (full_inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      full_inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, full_inputs, submessage_arena);
    }
    
  } else {
    
  }
  full_inputs_ = full_inputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionGetDataResponse.full_inputs)
}

// .nebulaidl.core.LiteralMap full_outputs = 4;
inline bool NodeExecutionGetDataResponse::has_full_outputs() const {
  return this != internal_default_instance() && full_outputs_ != nullptr;
}
inline const ::nebulaidl::core::LiteralMap& NodeExecutionGetDataResponse::full_outputs() const {
  const ::nebulaidl::core::LiteralMap* p = full_outputs_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionGetDataResponse.full_outputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::core::LiteralMap*>(
      &::nebulaidl::core::_LiteralMap_default_instance_);
}
inline ::nebulaidl::core::LiteralMap* NodeExecutionGetDataResponse::release_full_outputs() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionGetDataResponse.full_outputs)
  
  ::nebulaidl::core::LiteralMap* temp = full_outputs_;
  full_outputs_ = nullptr;
  return temp;
}
inline ::nebulaidl::core::LiteralMap* NodeExecutionGetDataResponse::mutable_full_outputs() {
  
  if (full_outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::core::LiteralMap>(GetArenaNoVirtual());
    full_outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionGetDataResponse.full_outputs)
  return full_outputs_;
}
inline void NodeExecutionGetDataResponse::set_allocated_full_outputs(::nebulaidl::core::LiteralMap* full_outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(full_outputs_);
  }
  if (full_outputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      full_outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, full_outputs, submessage_arena);
    }
    
  } else {
    
  }
  full_outputs_ = full_outputs;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionGetDataResponse.full_outputs)
}

// .nebulaidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 16;
inline bool NodeExecutionGetDataResponse::has_dynamic_workflow() const {
  return this != internal_default_instance() && dynamic_workflow_ != nullptr;
}
inline void NodeExecutionGetDataResponse::clear_dynamic_workflow() {
  if (GetArenaNoVirtual() == nullptr && dynamic_workflow_ != nullptr) {
    delete dynamic_workflow_;
  }
  dynamic_workflow_ = nullptr;
}
inline const ::nebulaidl::admin::DynamicWorkflowNodeMetadata& NodeExecutionGetDataResponse::dynamic_workflow() const {
  const ::nebulaidl::admin::DynamicWorkflowNodeMetadata* p = dynamic_workflow_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionGetDataResponse.dynamic_workflow)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::DynamicWorkflowNodeMetadata*>(
      &::nebulaidl::admin::_DynamicWorkflowNodeMetadata_default_instance_);
}
inline ::nebulaidl::admin::DynamicWorkflowNodeMetadata* NodeExecutionGetDataResponse::release_dynamic_workflow() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionGetDataResponse.dynamic_workflow)
  
  ::nebulaidl::admin::DynamicWorkflowNodeMetadata* temp = dynamic_workflow_;
  dynamic_workflow_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::DynamicWorkflowNodeMetadata* NodeExecutionGetDataResponse::mutable_dynamic_workflow() {
  
  if (dynamic_workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::DynamicWorkflowNodeMetadata>(GetArenaNoVirtual());
    dynamic_workflow_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionGetDataResponse.dynamic_workflow)
  return dynamic_workflow_;
}
inline void NodeExecutionGetDataResponse::set_allocated_dynamic_workflow(::nebulaidl::admin::DynamicWorkflowNodeMetadata* dynamic_workflow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dynamic_workflow_;
  }
  if (dynamic_workflow) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dynamic_workflow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dynamic_workflow, submessage_arena);
    }
    
  } else {
    
  }
  dynamic_workflow_ = dynamic_workflow;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionGetDataResponse.dynamic_workflow)
}

// .nebulaidl.admin.NebulaURLs nebula_urls = 17;
inline bool NodeExecutionGetDataResponse::has_nebula_urls() const {
  return this != internal_default_instance() && nebula_urls_ != nullptr;
}
inline const ::nebulaidl::admin::NebulaURLs& NodeExecutionGetDataResponse::nebula_urls() const {
  const ::nebulaidl::admin::NebulaURLs* p = nebula_urls_;
  // @@protoc_insertion_point(field_get:nebulaidl.admin.NodeExecutionGetDataResponse.nebula_urls)
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulaidl::admin::NebulaURLs*>(
      &::nebulaidl::admin::_NebulaURLs_default_instance_);
}
inline ::nebulaidl::admin::NebulaURLs* NodeExecutionGetDataResponse::release_nebula_urls() {
  // @@protoc_insertion_point(field_release:nebulaidl.admin.NodeExecutionGetDataResponse.nebula_urls)
  
  ::nebulaidl::admin::NebulaURLs* temp = nebula_urls_;
  nebula_urls_ = nullptr;
  return temp;
}
inline ::nebulaidl::admin::NebulaURLs* NodeExecutionGetDataResponse::mutable_nebula_urls() {
  
  if (nebula_urls_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulaidl::admin::NebulaURLs>(GetArenaNoVirtual());
    nebula_urls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulaidl.admin.NodeExecutionGetDataResponse.nebula_urls)
  return nebula_urls_;
}
inline void NodeExecutionGetDataResponse::set_allocated_nebula_urls(::nebulaidl::admin::NebulaURLs* nebula_urls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(nebula_urls_);
  }
  if (nebula_urls) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nebula_urls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nebula_urls, submessage_arena);
    }
    
  } else {
    
  }
  nebula_urls_ = nebula_urls;
  // @@protoc_insertion_point(field_set_allocated:nebulaidl.admin.NodeExecutionGetDataResponse.nebula_urls)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace nebulaidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_nebulaidl_2fadmin_2fnode_5fexecution_2eproto
