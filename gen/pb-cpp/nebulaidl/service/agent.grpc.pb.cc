// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nebulaidl/service/agent.proto

#include "nebulaidl/service/agent.pb.h"
#include "nebulaidl/service/agent.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nebulaidl {
namespace service {

static const char* AsyncAgentService_method_names[] = {
  "/nebulaidl.service.AsyncAgentService/CreateTask",
  "/nebulaidl.service.AsyncAgentService/GetTask",
  "/nebulaidl.service.AsyncAgentService/DeleteTask",
};

std::unique_ptr< AsyncAgentService::Stub> AsyncAgentService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AsyncAgentService::Stub> stub(new AsyncAgentService::Stub(channel));
  return stub;
}

AsyncAgentService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateTask_(AsyncAgentService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTask_(AsyncAgentService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTask_(AsyncAgentService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AsyncAgentService::Stub::CreateTask(::grpc::ClientContext* context, const ::nebulaidl::admin::CreateTaskRequest& request, ::nebulaidl::admin::CreateTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTask_, context, request, response);
}

void AsyncAgentService::Stub::experimental_async::CreateTask(::grpc::ClientContext* context, const ::nebulaidl::admin::CreateTaskRequest* request, ::nebulaidl::admin::CreateTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTask_, context, request, response, std::move(f));
}

void AsyncAgentService::Stub::experimental_async::CreateTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::admin::CreateTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTask_, context, request, response, std::move(f));
}

void AsyncAgentService::Stub::experimental_async::CreateTask(::grpc::ClientContext* context, const ::nebulaidl::admin::CreateTaskRequest* request, ::nebulaidl::admin::CreateTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTask_, context, request, response, reactor);
}

void AsyncAgentService::Stub::experimental_async::CreateTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::admin::CreateTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nebulaidl::admin::CreateTaskResponse>* AsyncAgentService::Stub::AsyncCreateTaskRaw(::grpc::ClientContext* context, const ::nebulaidl::admin::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nebulaidl::admin::CreateTaskResponse>::Create(channel_.get(), cq, rpcmethod_CreateTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nebulaidl::admin::CreateTaskResponse>* AsyncAgentService::Stub::PrepareAsyncCreateTaskRaw(::grpc::ClientContext* context, const ::nebulaidl::admin::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nebulaidl::admin::CreateTaskResponse>::Create(channel_.get(), cq, rpcmethod_CreateTask_, context, request, false);
}

::grpc::Status AsyncAgentService::Stub::GetTask(::grpc::ClientContext* context, const ::nebulaidl::admin::GetTaskRequest& request, ::nebulaidl::admin::GetTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTask_, context, request, response);
}

void AsyncAgentService::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::nebulaidl::admin::GetTaskRequest* request, ::nebulaidl::admin::GetTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, std::move(f));
}

void AsyncAgentService::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::admin::GetTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, std::move(f));
}

void AsyncAgentService::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::nebulaidl::admin::GetTaskRequest* request, ::nebulaidl::admin::GetTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, reactor);
}

void AsyncAgentService::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::admin::GetTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nebulaidl::admin::GetTaskResponse>* AsyncAgentService::Stub::AsyncGetTaskRaw(::grpc::ClientContext* context, const ::nebulaidl::admin::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nebulaidl::admin::GetTaskResponse>::Create(channel_.get(), cq, rpcmethod_GetTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nebulaidl::admin::GetTaskResponse>* AsyncAgentService::Stub::PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::nebulaidl::admin::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nebulaidl::admin::GetTaskResponse>::Create(channel_.get(), cq, rpcmethod_GetTask_, context, request, false);
}

::grpc::Status AsyncAgentService::Stub::DeleteTask(::grpc::ClientContext* context, const ::nebulaidl::admin::DeleteTaskRequest& request, ::nebulaidl::admin::DeleteTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteTask_, context, request, response);
}

void AsyncAgentService::Stub::experimental_async::DeleteTask(::grpc::ClientContext* context, const ::nebulaidl::admin::DeleteTaskRequest* request, ::nebulaidl::admin::DeleteTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteTask_, context, request, response, std::move(f));
}

void AsyncAgentService::Stub::experimental_async::DeleteTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::admin::DeleteTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteTask_, context, request, response, std::move(f));
}

void AsyncAgentService::Stub::experimental_async::DeleteTask(::grpc::ClientContext* context, const ::nebulaidl::admin::DeleteTaskRequest* request, ::nebulaidl::admin::DeleteTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteTask_, context, request, response, reactor);
}

void AsyncAgentService::Stub::experimental_async::DeleteTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::admin::DeleteTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nebulaidl::admin::DeleteTaskResponse>* AsyncAgentService::Stub::AsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::nebulaidl::admin::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nebulaidl::admin::DeleteTaskResponse>::Create(channel_.get(), cq, rpcmethod_DeleteTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nebulaidl::admin::DeleteTaskResponse>* AsyncAgentService::Stub::PrepareAsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::nebulaidl::admin::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nebulaidl::admin::DeleteTaskResponse>::Create(channel_.get(), cq, rpcmethod_DeleteTask_, context, request, false);
}

AsyncAgentService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AsyncAgentService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AsyncAgentService::Service, ::nebulaidl::admin::CreateTaskRequest, ::nebulaidl::admin::CreateTaskResponse>(
          std::mem_fn(&AsyncAgentService::Service::CreateTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AsyncAgentService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AsyncAgentService::Service, ::nebulaidl::admin::GetTaskRequest, ::nebulaidl::admin::GetTaskResponse>(
          std::mem_fn(&AsyncAgentService::Service::GetTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AsyncAgentService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AsyncAgentService::Service, ::nebulaidl::admin::DeleteTaskRequest, ::nebulaidl::admin::DeleteTaskResponse>(
          std::mem_fn(&AsyncAgentService::Service::DeleteTask), this)));
}

AsyncAgentService::Service::~Service() {
}

::grpc::Status AsyncAgentService::Service::CreateTask(::grpc::ServerContext* context, const ::nebulaidl::admin::CreateTaskRequest* request, ::nebulaidl::admin::CreateTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AsyncAgentService::Service::GetTask(::grpc::ServerContext* context, const ::nebulaidl::admin::GetTaskRequest* request, ::nebulaidl::admin::GetTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AsyncAgentService::Service::DeleteTask(::grpc::ServerContext* context, const ::nebulaidl::admin::DeleteTaskRequest* request, ::nebulaidl::admin::DeleteTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nebulaidl
}  // namespace service

