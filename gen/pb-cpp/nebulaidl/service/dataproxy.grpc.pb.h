// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nebulaidl/service/dataproxy.proto
#ifndef GRPC_nebulaidl_2fservice_2fdataproxy_2eproto__INCLUDED
#define GRPC_nebulaidl_2fservice_2fdataproxy_2eproto__INCLUDED

#include "nebulaidl/service/dataproxy.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace nebulaidl {
namespace service {

// DataProxyService defines an RPC Service that allows access to user-data in a controlled manner.
class DataProxyService final {
 public:
  static constexpr char const* service_full_name() {
    return "nebulaidl.service.DataProxyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // CreateUploadLocation creates a signed url to upload artifacts to for a given project/domain.
    virtual ::grpc::Status CreateUploadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest& request, ::nebulaidl::service::CreateUploadLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateUploadLocationResponse>> AsyncCreateUploadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateUploadLocationResponse>>(AsyncCreateUploadLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateUploadLocationResponse>> PrepareAsyncCreateUploadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateUploadLocationResponse>>(PrepareAsyncCreateUploadLocationRaw(context, request, cq));
    }
    // CreateDownloadLocation creates a signed url to download artifacts.
    virtual ::grpc::Status CreateDownloadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest& request, ::nebulaidl::service::CreateDownloadLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLocationResponse>> AsyncCreateDownloadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLocationResponse>>(AsyncCreateDownloadLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLocationResponse>> PrepareAsyncCreateDownloadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLocationResponse>>(PrepareAsyncCreateDownloadLocationRaw(context, request, cq));
    }
    // CreateDownloadLocation creates a signed url to download artifacts.
    virtual ::grpc::Status CreateDownloadLink(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest& request, ::nebulaidl::service::CreateDownloadLinkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLinkResponse>> AsyncCreateDownloadLink(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLinkResponse>>(AsyncCreateDownloadLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLinkResponse>> PrepareAsyncCreateDownloadLink(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLinkResponse>>(PrepareAsyncCreateDownloadLinkRaw(context, request, cq));
    }
    virtual ::grpc::Status GetData(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest& request, ::nebulaidl::service::GetDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::GetDataResponse>> AsyncGetData(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::GetDataResponse>>(AsyncGetDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::GetDataResponse>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::GetDataResponse>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // CreateUploadLocation creates a signed url to upload artifacts to for a given project/domain.
      virtual void CreateUploadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateUploadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateUploadLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateUploadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateUploadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateUploadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CreateDownloadLocation creates a signed url to download artifacts.
      virtual void CreateDownloadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDownloadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateDownloadLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDownloadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateDownloadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateDownloadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CreateDownloadLocation creates a signed url to download artifacts.
      virtual void CreateDownloadLink(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDownloadLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateDownloadLinkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDownloadLink(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateDownloadLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateDownloadLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetData(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::GetDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetData(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::GetDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateUploadLocationResponse>* AsyncCreateUploadLocationRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateUploadLocationResponse>* PrepareAsyncCreateUploadLocationRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLocationResponse>* AsyncCreateDownloadLocationRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLocationResponse>* PrepareAsyncCreateDownloadLocationRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLinkResponse>* AsyncCreateDownloadLinkRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::CreateDownloadLinkResponse>* PrepareAsyncCreateDownloadLinkRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::GetDataResponse>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nebulaidl::service::GetDataResponse>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateUploadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest& request, ::nebulaidl::service::CreateUploadLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateUploadLocationResponse>> AsyncCreateUploadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateUploadLocationResponse>>(AsyncCreateUploadLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateUploadLocationResponse>> PrepareAsyncCreateUploadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateUploadLocationResponse>>(PrepareAsyncCreateUploadLocationRaw(context, request, cq));
    }
    ::grpc::Status CreateDownloadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest& request, ::nebulaidl::service::CreateDownloadLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLocationResponse>> AsyncCreateDownloadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLocationResponse>>(AsyncCreateDownloadLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLocationResponse>> PrepareAsyncCreateDownloadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLocationResponse>>(PrepareAsyncCreateDownloadLocationRaw(context, request, cq));
    }
    ::grpc::Status CreateDownloadLink(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest& request, ::nebulaidl::service::CreateDownloadLinkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLinkResponse>> AsyncCreateDownloadLink(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLinkResponse>>(AsyncCreateDownloadLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLinkResponse>> PrepareAsyncCreateDownloadLink(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLinkResponse>>(PrepareAsyncCreateDownloadLinkRaw(context, request, cq));
    }
    ::grpc::Status GetData(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest& request, ::nebulaidl::service::GetDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::GetDataResponse>> AsyncGetData(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::GetDataResponse>>(AsyncGetDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::GetDataResponse>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::GetDataResponse>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateUploadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateUploadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateUploadLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateUploadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateUploadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateUploadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateDownloadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateDownloadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateDownloadLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateDownloadLocation(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateDownloadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateDownloadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateDownloadLink(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateDownloadLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateDownloadLinkResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateDownloadLink(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateDownloadLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::CreateDownloadLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetData(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::GetDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetData(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nebulaidl::service::GetDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateUploadLocationResponse>* AsyncCreateUploadLocationRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateUploadLocationResponse>* PrepareAsyncCreateUploadLocationRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateUploadLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLocationResponse>* AsyncCreateDownloadLocationRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLocationResponse>* PrepareAsyncCreateDownloadLocationRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLinkResponse>* AsyncCreateDownloadLinkRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::CreateDownloadLinkResponse>* PrepareAsyncCreateDownloadLinkRaw(::grpc::ClientContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::GetDataResponse>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nebulaidl::service::GetDataResponse>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::nebulaidl::service::GetDataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateUploadLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDownloadLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDownloadLink_;
    const ::grpc::internal::RpcMethod rpcmethod_GetData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // CreateUploadLocation creates a signed url to upload artifacts to for a given project/domain.
    virtual ::grpc::Status CreateUploadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response);
    // CreateDownloadLocation creates a signed url to download artifacts.
    virtual ::grpc::Status CreateDownloadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response);
    // CreateDownloadLocation creates a signed url to download artifacts.
    virtual ::grpc::Status CreateDownloadLink(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response);
    virtual ::grpc::Status GetData(::grpc::ServerContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateUploadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateUploadLocation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateUploadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUploadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUploadLocation(::grpc::ServerContext* context, ::nebulaidl::service::CreateUploadLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::nebulaidl::service::CreateUploadLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDownloadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateDownloadLocation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateDownloadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDownloadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDownloadLocation(::grpc::ServerContext* context, ::nebulaidl::service::CreateDownloadLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::nebulaidl::service::CreateDownloadLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDownloadLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateDownloadLink() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateDownloadLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDownloadLink(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDownloadLink(::grpc::ServerContext* context, ::nebulaidl::service::CreateDownloadLinkRequest* request, ::grpc::ServerAsyncResponseWriter< ::nebulaidl::service::CreateDownloadLinkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetData() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::nebulaidl::service::GetDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::nebulaidl::service::GetDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateUploadLocation<WithAsyncMethod_CreateDownloadLocation<WithAsyncMethod_CreateDownloadLink<WithAsyncMethod_GetData<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateUploadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateUploadLocation() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::nebulaidl::service::CreateUploadLocationRequest, ::nebulaidl::service::CreateUploadLocationResponse>(
          [this](::grpc::ServerContext* context,
                 const ::nebulaidl::service::CreateUploadLocationRequest* request,
                 ::nebulaidl::service::CreateUploadLocationResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateUploadLocation(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateUploadLocation(
        ::grpc::experimental::MessageAllocator< ::nebulaidl::service::CreateUploadLocationRequest, ::nebulaidl::service::CreateUploadLocationResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nebulaidl::service::CreateUploadLocationRequest, ::nebulaidl::service::CreateUploadLocationResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateUploadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUploadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateUploadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateDownloadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateDownloadLocation() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::nebulaidl::service::CreateDownloadLocationRequest, ::nebulaidl::service::CreateDownloadLocationResponse>(
          [this](::grpc::ServerContext* context,
                 const ::nebulaidl::service::CreateDownloadLocationRequest* request,
                 ::nebulaidl::service::CreateDownloadLocationResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateDownloadLocation(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateDownloadLocation(
        ::grpc::experimental::MessageAllocator< ::nebulaidl::service::CreateDownloadLocationRequest, ::nebulaidl::service::CreateDownloadLocationResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nebulaidl::service::CreateDownloadLocationRequest, ::nebulaidl::service::CreateDownloadLocationResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateDownloadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDownloadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateDownloadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateDownloadLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateDownloadLink() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::nebulaidl::service::CreateDownloadLinkRequest, ::nebulaidl::service::CreateDownloadLinkResponse>(
          [this](::grpc::ServerContext* context,
                 const ::nebulaidl::service::CreateDownloadLinkRequest* request,
                 ::nebulaidl::service::CreateDownloadLinkResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateDownloadLink(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateDownloadLink(
        ::grpc::experimental::MessageAllocator< ::nebulaidl::service::CreateDownloadLinkRequest, ::nebulaidl::service::CreateDownloadLinkResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nebulaidl::service::CreateDownloadLinkRequest, ::nebulaidl::service::CreateDownloadLinkResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateDownloadLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDownloadLink(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateDownloadLink(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetData() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::nebulaidl::service::GetDataRequest, ::nebulaidl::service::GetDataResponse>(
          [this](::grpc::ServerContext* context,
                 const ::nebulaidl::service::GetDataRequest* request,
                 ::nebulaidl::service::GetDataResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetData(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetData(
        ::grpc::experimental::MessageAllocator< ::nebulaidl::service::GetDataRequest, ::nebulaidl::service::GetDataResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nebulaidl::service::GetDataRequest, ::nebulaidl::service::GetDataResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetData(::grpc::ServerContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_CreateUploadLocation<ExperimentalWithCallbackMethod_CreateDownloadLocation<ExperimentalWithCallbackMethod_CreateDownloadLink<ExperimentalWithCallbackMethod_GetData<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateUploadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateUploadLocation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateUploadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUploadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDownloadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateDownloadLocation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateDownloadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDownloadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDownloadLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateDownloadLink() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateDownloadLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDownloadLink(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetData() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateUploadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateUploadLocation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateUploadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUploadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUploadLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDownloadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateDownloadLocation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateDownloadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDownloadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDownloadLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDownloadLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateDownloadLink() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateDownloadLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDownloadLink(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDownloadLink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetData() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateUploadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateUploadLocation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateUploadLocation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateUploadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUploadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateUploadLocation(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateDownloadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateDownloadLocation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateDownloadLocation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateDownloadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDownloadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateDownloadLocation(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateDownloadLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateDownloadLink() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateDownloadLink(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateDownloadLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDownloadLink(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateDownloadLink(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetData(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetData(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateUploadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateUploadLocation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::nebulaidl::service::CreateUploadLocationRequest, ::nebulaidl::service::CreateUploadLocationResponse>(std::bind(&WithStreamedUnaryMethod_CreateUploadLocation<BaseClass>::StreamedCreateUploadLocation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateUploadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateUploadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateUploadLocationRequest* request, ::nebulaidl::service::CreateUploadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateUploadLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nebulaidl::service::CreateUploadLocationRequest,::nebulaidl::service::CreateUploadLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDownloadLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateDownloadLocation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::nebulaidl::service::CreateDownloadLocationRequest, ::nebulaidl::service::CreateDownloadLocationResponse>(std::bind(&WithStreamedUnaryMethod_CreateDownloadLocation<BaseClass>::StreamedCreateDownloadLocation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateDownloadLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDownloadLocation(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLocationRequest* request, ::nebulaidl::service::CreateDownloadLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDownloadLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nebulaidl::service::CreateDownloadLocationRequest,::nebulaidl::service::CreateDownloadLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDownloadLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateDownloadLink() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::nebulaidl::service::CreateDownloadLinkRequest, ::nebulaidl::service::CreateDownloadLinkResponse>(std::bind(&WithStreamedUnaryMethod_CreateDownloadLink<BaseClass>::StreamedCreateDownloadLink, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateDownloadLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDownloadLink(::grpc::ServerContext* context, const ::nebulaidl::service::CreateDownloadLinkRequest* request, ::nebulaidl::service::CreateDownloadLinkResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDownloadLink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nebulaidl::service::CreateDownloadLinkRequest,::nebulaidl::service::CreateDownloadLinkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetData() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::nebulaidl::service::GetDataRequest, ::nebulaidl::service::GetDataResponse>(std::bind(&WithStreamedUnaryMethod_GetData<BaseClass>::StreamedGetData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::nebulaidl::service::GetDataRequest* request, ::nebulaidl::service::GetDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nebulaidl::service::GetDataRequest,::nebulaidl::service::GetDataResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateUploadLocation<WithStreamedUnaryMethod_CreateDownloadLocation<WithStreamedUnaryMethod_CreateDownloadLink<WithStreamedUnaryMethod_GetData<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateUploadLocation<WithStreamedUnaryMethod_CreateDownloadLocation<WithStreamedUnaryMethod_CreateDownloadLink<WithStreamedUnaryMethod_GetData<Service > > > > StreamedService;
};

}  // namespace service
}  // namespace nebulaidl


#endif  // GRPC_nebulaidl_2fservice_2fdataproxy_2eproto__INCLUDED
