// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulaidl/core/workflow_closure.proto

package nebulaidl.core;

public final class WorkflowClosureOuterClass {
  private WorkflowClosureOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface WorkflowClosureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:nebulaidl.core.WorkflowClosure)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *required. Workflow template.
     * </pre>
     *
     * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
     */
    boolean hasWorkflow();
    /**
     * <pre>
     *required. Workflow template.
     * </pre>
     *
     * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
     */
    nebulaidl.core.Workflow.WorkflowTemplate getWorkflow();
    /**
     * <pre>
     *required. Workflow template.
     * </pre>
     *
     * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
     */
    nebulaidl.core.Workflow.WorkflowTemplateOrBuilder getWorkflowOrBuilder();

    /**
     * <pre>
     *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
     * references tasks.
     * </pre>
     *
     * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
     */
    java.util.List<nebulaidl.core.Tasks.TaskTemplate>
        getTasksList();
    /**
     * <pre>
     *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
     * references tasks.
     * </pre>
     *
     * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
     */
    nebulaidl.core.Tasks.TaskTemplate getTasks(int index);
    /**
     * <pre>
     *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
     * references tasks.
     * </pre>
     *
     * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
     */
    int getTasksCount();
    /**
     * <pre>
     *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
     * references tasks.
     * </pre>
     *
     * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
     */
    java.util.List<? extends nebulaidl.core.Tasks.TaskTemplateOrBuilder>
        getTasksOrBuilderList();
    /**
     * <pre>
     *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
     * references tasks.
     * </pre>
     *
     * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
     */
    nebulaidl.core.Tasks.TaskTemplateOrBuilder getTasksOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Defines an enclosed package of workflow and tasks it references.
   * </pre>
   *
   * Protobuf type {@code nebulaidl.core.WorkflowClosure}
   */
  public  static final class WorkflowClosure extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:nebulaidl.core.WorkflowClosure)
      WorkflowClosureOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WorkflowClosure.newBuilder() to construct.
    private WorkflowClosure(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WorkflowClosure() {
      tasks_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WorkflowClosure(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              nebulaidl.core.Workflow.WorkflowTemplate.Builder subBuilder = null;
              if (workflow_ != null) {
                subBuilder = workflow_.toBuilder();
              }
              workflow_ = input.readMessage(nebulaidl.core.Workflow.WorkflowTemplate.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(workflow_);
                workflow_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                tasks_ = new java.util.ArrayList<nebulaidl.core.Tasks.TaskTemplate>();
                mutable_bitField0_ |= 0x00000002;
              }
              tasks_.add(
                  input.readMessage(nebulaidl.core.Tasks.TaskTemplate.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          tasks_ = java.util.Collections.unmodifiableList(tasks_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return nebulaidl.core.WorkflowClosureOuterClass.internal_static_nebulaidl_core_WorkflowClosure_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return nebulaidl.core.WorkflowClosureOuterClass.internal_static_nebulaidl_core_WorkflowClosure_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure.class, nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure.Builder.class);
    }

    private int bitField0_;
    public static final int WORKFLOW_FIELD_NUMBER = 1;
    private nebulaidl.core.Workflow.WorkflowTemplate workflow_;
    /**
     * <pre>
     *required. Workflow template.
     * </pre>
     *
     * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
     */
    public boolean hasWorkflow() {
      return workflow_ != null;
    }
    /**
     * <pre>
     *required. Workflow template.
     * </pre>
     *
     * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
     */
    public nebulaidl.core.Workflow.WorkflowTemplate getWorkflow() {
      return workflow_ == null ? nebulaidl.core.Workflow.WorkflowTemplate.getDefaultInstance() : workflow_;
    }
    /**
     * <pre>
     *required. Workflow template.
     * </pre>
     *
     * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
     */
    public nebulaidl.core.Workflow.WorkflowTemplateOrBuilder getWorkflowOrBuilder() {
      return getWorkflow();
    }

    public static final int TASKS_FIELD_NUMBER = 2;
    private java.util.List<nebulaidl.core.Tasks.TaskTemplate> tasks_;
    /**
     * <pre>
     *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
     * references tasks.
     * </pre>
     *
     * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
     */
    public java.util.List<nebulaidl.core.Tasks.TaskTemplate> getTasksList() {
      return tasks_;
    }
    /**
     * <pre>
     *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
     * references tasks.
     * </pre>
     *
     * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
     */
    public java.util.List<? extends nebulaidl.core.Tasks.TaskTemplateOrBuilder>
        getTasksOrBuilderList() {
      return tasks_;
    }
    /**
     * <pre>
     *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
     * references tasks.
     * </pre>
     *
     * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
     */
    public int getTasksCount() {
      return tasks_.size();
    }
    /**
     * <pre>
     *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
     * references tasks.
     * </pre>
     *
     * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
     */
    public nebulaidl.core.Tasks.TaskTemplate getTasks(int index) {
      return tasks_.get(index);
    }
    /**
     * <pre>
     *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
     * references tasks.
     * </pre>
     *
     * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
     */
    public nebulaidl.core.Tasks.TaskTemplateOrBuilder getTasksOrBuilder(
        int index) {
      return tasks_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (workflow_ != null) {
        output.writeMessage(1, getWorkflow());
      }
      for (int i = 0; i < tasks_.size(); i++) {
        output.writeMessage(2, tasks_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (workflow_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getWorkflow());
      }
      for (int i = 0; i < tasks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, tasks_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure)) {
        return super.equals(obj);
      }
      nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure other = (nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure) obj;

      if (hasWorkflow() != other.hasWorkflow()) return false;
      if (hasWorkflow()) {
        if (!getWorkflow()
            .equals(other.getWorkflow())) return false;
      }
      if (!getTasksList()
          .equals(other.getTasksList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasWorkflow()) {
        hash = (37 * hash) + WORKFLOW_FIELD_NUMBER;
        hash = (53 * hash) + getWorkflow().hashCode();
      }
      if (getTasksCount() > 0) {
        hash = (37 * hash) + TASKS_FIELD_NUMBER;
        hash = (53 * hash) + getTasksList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines an enclosed package of workflow and tasks it references.
     * </pre>
     *
     * Protobuf type {@code nebulaidl.core.WorkflowClosure}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:nebulaidl.core.WorkflowClosure)
        nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosureOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return nebulaidl.core.WorkflowClosureOuterClass.internal_static_nebulaidl_core_WorkflowClosure_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return nebulaidl.core.WorkflowClosureOuterClass.internal_static_nebulaidl_core_WorkflowClosure_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure.class, nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure.Builder.class);
      }

      // Construct using nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTasksFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (workflowBuilder_ == null) {
          workflow_ = null;
        } else {
          workflow_ = null;
          workflowBuilder_ = null;
        }
        if (tasksBuilder_ == null) {
          tasks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          tasksBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return nebulaidl.core.WorkflowClosureOuterClass.internal_static_nebulaidl_core_WorkflowClosure_descriptor;
      }

      @java.lang.Override
      public nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure getDefaultInstanceForType() {
        return nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure.getDefaultInstance();
      }

      @java.lang.Override
      public nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure build() {
        nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure buildPartial() {
        nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure result = new nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (workflowBuilder_ == null) {
          result.workflow_ = workflow_;
        } else {
          result.workflow_ = workflowBuilder_.build();
        }
        if (tasksBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            tasks_ = java.util.Collections.unmodifiableList(tasks_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.tasks_ = tasks_;
        } else {
          result.tasks_ = tasksBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure) {
          return mergeFrom((nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure other) {
        if (other == nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure.getDefaultInstance()) return this;
        if (other.hasWorkflow()) {
          mergeWorkflow(other.getWorkflow());
        }
        if (tasksBuilder_ == null) {
          if (!other.tasks_.isEmpty()) {
            if (tasks_.isEmpty()) {
              tasks_ = other.tasks_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTasksIsMutable();
              tasks_.addAll(other.tasks_);
            }
            onChanged();
          }
        } else {
          if (!other.tasks_.isEmpty()) {
            if (tasksBuilder_.isEmpty()) {
              tasksBuilder_.dispose();
              tasksBuilder_ = null;
              tasks_ = other.tasks_;
              bitField0_ = (bitField0_ & ~0x00000002);
              tasksBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTasksFieldBuilder() : null;
            } else {
              tasksBuilder_.addAllMessages(other.tasks_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private nebulaidl.core.Workflow.WorkflowTemplate workflow_;
      private com.google.protobuf.SingleFieldBuilderV3<
          nebulaidl.core.Workflow.WorkflowTemplate, nebulaidl.core.Workflow.WorkflowTemplate.Builder, nebulaidl.core.Workflow.WorkflowTemplateOrBuilder> workflowBuilder_;
      /**
       * <pre>
       *required. Workflow template.
       * </pre>
       *
       * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
       */
      public boolean hasWorkflow() {
        return workflowBuilder_ != null || workflow_ != null;
      }
      /**
       * <pre>
       *required. Workflow template.
       * </pre>
       *
       * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
       */
      public nebulaidl.core.Workflow.WorkflowTemplate getWorkflow() {
        if (workflowBuilder_ == null) {
          return workflow_ == null ? nebulaidl.core.Workflow.WorkflowTemplate.getDefaultInstance() : workflow_;
        } else {
          return workflowBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *required. Workflow template.
       * </pre>
       *
       * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
       */
      public Builder setWorkflow(nebulaidl.core.Workflow.WorkflowTemplate value) {
        if (workflowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          workflow_ = value;
          onChanged();
        } else {
          workflowBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *required. Workflow template.
       * </pre>
       *
       * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
       */
      public Builder setWorkflow(
          nebulaidl.core.Workflow.WorkflowTemplate.Builder builderForValue) {
        if (workflowBuilder_ == null) {
          workflow_ = builderForValue.build();
          onChanged();
        } else {
          workflowBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *required. Workflow template.
       * </pre>
       *
       * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
       */
      public Builder mergeWorkflow(nebulaidl.core.Workflow.WorkflowTemplate value) {
        if (workflowBuilder_ == null) {
          if (workflow_ != null) {
            workflow_ =
              nebulaidl.core.Workflow.WorkflowTemplate.newBuilder(workflow_).mergeFrom(value).buildPartial();
          } else {
            workflow_ = value;
          }
          onChanged();
        } else {
          workflowBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *required. Workflow template.
       * </pre>
       *
       * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
       */
      public Builder clearWorkflow() {
        if (workflowBuilder_ == null) {
          workflow_ = null;
          onChanged();
        } else {
          workflow_ = null;
          workflowBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *required. Workflow template.
       * </pre>
       *
       * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
       */
      public nebulaidl.core.Workflow.WorkflowTemplate.Builder getWorkflowBuilder() {
        
        onChanged();
        return getWorkflowFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *required. Workflow template.
       * </pre>
       *
       * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
       */
      public nebulaidl.core.Workflow.WorkflowTemplateOrBuilder getWorkflowOrBuilder() {
        if (workflowBuilder_ != null) {
          return workflowBuilder_.getMessageOrBuilder();
        } else {
          return workflow_ == null ?
              nebulaidl.core.Workflow.WorkflowTemplate.getDefaultInstance() : workflow_;
        }
      }
      /**
       * <pre>
       *required. Workflow template.
       * </pre>
       *
       * <code>.nebulaidl.core.WorkflowTemplate workflow = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          nebulaidl.core.Workflow.WorkflowTemplate, nebulaidl.core.Workflow.WorkflowTemplate.Builder, nebulaidl.core.Workflow.WorkflowTemplateOrBuilder>
          getWorkflowFieldBuilder() {
        if (workflowBuilder_ == null) {
          workflowBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              nebulaidl.core.Workflow.WorkflowTemplate, nebulaidl.core.Workflow.WorkflowTemplate.Builder, nebulaidl.core.Workflow.WorkflowTemplateOrBuilder>(
                  getWorkflow(),
                  getParentForChildren(),
                  isClean());
          workflow_ = null;
        }
        return workflowBuilder_;
      }

      private java.util.List<nebulaidl.core.Tasks.TaskTemplate> tasks_ =
        java.util.Collections.emptyList();
      private void ensureTasksIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          tasks_ = new java.util.ArrayList<nebulaidl.core.Tasks.TaskTemplate>(tasks_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          nebulaidl.core.Tasks.TaskTemplate, nebulaidl.core.Tasks.TaskTemplate.Builder, nebulaidl.core.Tasks.TaskTemplateOrBuilder> tasksBuilder_;

      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public java.util.List<nebulaidl.core.Tasks.TaskTemplate> getTasksList() {
        if (tasksBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tasks_);
        } else {
          return tasksBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public int getTasksCount() {
        if (tasksBuilder_ == null) {
          return tasks_.size();
        } else {
          return tasksBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public nebulaidl.core.Tasks.TaskTemplate getTasks(int index) {
        if (tasksBuilder_ == null) {
          return tasks_.get(index);
        } else {
          return tasksBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public Builder setTasks(
          int index, nebulaidl.core.Tasks.TaskTemplate value) {
        if (tasksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTasksIsMutable();
          tasks_.set(index, value);
          onChanged();
        } else {
          tasksBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public Builder setTasks(
          int index, nebulaidl.core.Tasks.TaskTemplate.Builder builderForValue) {
        if (tasksBuilder_ == null) {
          ensureTasksIsMutable();
          tasks_.set(index, builderForValue.build());
          onChanged();
        } else {
          tasksBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public Builder addTasks(nebulaidl.core.Tasks.TaskTemplate value) {
        if (tasksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTasksIsMutable();
          tasks_.add(value);
          onChanged();
        } else {
          tasksBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public Builder addTasks(
          int index, nebulaidl.core.Tasks.TaskTemplate value) {
        if (tasksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTasksIsMutable();
          tasks_.add(index, value);
          onChanged();
        } else {
          tasksBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public Builder addTasks(
          nebulaidl.core.Tasks.TaskTemplate.Builder builderForValue) {
        if (tasksBuilder_ == null) {
          ensureTasksIsMutable();
          tasks_.add(builderForValue.build());
          onChanged();
        } else {
          tasksBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public Builder addTasks(
          int index, nebulaidl.core.Tasks.TaskTemplate.Builder builderForValue) {
        if (tasksBuilder_ == null) {
          ensureTasksIsMutable();
          tasks_.add(index, builderForValue.build());
          onChanged();
        } else {
          tasksBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public Builder addAllTasks(
          java.lang.Iterable<? extends nebulaidl.core.Tasks.TaskTemplate> values) {
        if (tasksBuilder_ == null) {
          ensureTasksIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tasks_);
          onChanged();
        } else {
          tasksBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public Builder clearTasks() {
        if (tasksBuilder_ == null) {
          tasks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          tasksBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public Builder removeTasks(int index) {
        if (tasksBuilder_ == null) {
          ensureTasksIsMutable();
          tasks_.remove(index);
          onChanged();
        } else {
          tasksBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public nebulaidl.core.Tasks.TaskTemplate.Builder getTasksBuilder(
          int index) {
        return getTasksFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public nebulaidl.core.Tasks.TaskTemplateOrBuilder getTasksOrBuilder(
          int index) {
        if (tasksBuilder_ == null) {
          return tasks_.get(index);  } else {
          return tasksBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public java.util.List<? extends nebulaidl.core.Tasks.TaskTemplateOrBuilder>
           getTasksOrBuilderList() {
        if (tasksBuilder_ != null) {
          return tasksBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tasks_);
        }
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public nebulaidl.core.Tasks.TaskTemplate.Builder addTasksBuilder() {
        return getTasksFieldBuilder().addBuilder(
            nebulaidl.core.Tasks.TaskTemplate.getDefaultInstance());
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public nebulaidl.core.Tasks.TaskTemplate.Builder addTasksBuilder(
          int index) {
        return getTasksFieldBuilder().addBuilder(
            index, nebulaidl.core.Tasks.TaskTemplate.getDefaultInstance());
      }
      /**
       * <pre>
       *optional. A collection of tasks referenced by the workflow. Only needed if the workflow
       * references tasks.
       * </pre>
       *
       * <code>repeated .nebulaidl.core.TaskTemplate tasks = 2;</code>
       */
      public java.util.List<nebulaidl.core.Tasks.TaskTemplate.Builder>
           getTasksBuilderList() {
        return getTasksFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          nebulaidl.core.Tasks.TaskTemplate, nebulaidl.core.Tasks.TaskTemplate.Builder, nebulaidl.core.Tasks.TaskTemplateOrBuilder>
          getTasksFieldBuilder() {
        if (tasksBuilder_ == null) {
          tasksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              nebulaidl.core.Tasks.TaskTemplate, nebulaidl.core.Tasks.TaskTemplate.Builder, nebulaidl.core.Tasks.TaskTemplateOrBuilder>(
                  tasks_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          tasks_ = null;
        }
        return tasksBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:nebulaidl.core.WorkflowClosure)
    }

    // @@protoc_insertion_point(class_scope:nebulaidl.core.WorkflowClosure)
    private static final nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure();
    }

    public static nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WorkflowClosure>
        PARSER = new com.google.protobuf.AbstractParser<WorkflowClosure>() {
      @java.lang.Override
      public WorkflowClosure parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WorkflowClosure(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WorkflowClosure> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WorkflowClosure> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public nebulaidl.core.WorkflowClosureOuterClass.WorkflowClosure getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_nebulaidl_core_WorkflowClosure_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_nebulaidl_core_WorkflowClosure_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n$nebulaidl/core/workflow_closure.proto\022\r" +
      "nebulaidl.core\032\034nebulaidl/core/workflow.pr" +
      "oto\032\031nebulaidl/core/tasks.proto\"p\n\017Workfl" +
      "owClosure\0221\n\010workflow\030\001 \001(\0132\037.nebulaidl.c" +
      "ore.WorkflowTemplate\022*\n\005tasks\030\002 \003(\0132\033.fl" +
      "yteidl.core.TaskTemplateB6Z4github.com/f" +
      "lyteorg/nebulaidl/gen/pb-go/nebulaidl/core" +
      "b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          nebulaidl.core.Workflow.getDescriptor(),
          nebulaidl.core.Tasks.getDescriptor(),
        }, assigner);
    internal_static_nebulaidl_core_WorkflowClosure_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_nebulaidl_core_WorkflowClosure_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_nebulaidl_core_WorkflowClosure_descriptor,
        new java.lang.String[] { "Workflow", "Tasks", });
    nebulaidl.core.Workflow.getDescriptor();
    nebulaidl.core.Tasks.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
